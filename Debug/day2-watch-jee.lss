
day2-watch-jee.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  000012fc  00001390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000035  0080008e  0080008e  000013be  2**0
                  ALLOC
  3 .stab         00002790  00000000  00000000  000013c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000106c  00000000  00000000  00003b50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 94 03 	jmp	0x728	; 0x728 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ef       	ldi	r30, 0xFC	; 252
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3c       	cpi	r26, 0xC3	; 195
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0f 06 	call	0xc1e	; 0xc1e <main>
      8a:	0c 94 7c 09 	jmp	0x12f8	; 0x12f8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <u8GetNum>:
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <u8GetNum+0x6>
      98:	0f 92       	push	r0
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
      9e:	8a e0       	ldi	r24, 0x0A	; 10
      a0:	89 83       	std	Y+1, r24	; 0x01
      a2:	0e 94 39 05 	call	0xa72	; 0xa72 <KP_u16GetStatus>
      a6:	9b 83       	std	Y+3, r25	; 0x03
      a8:	8a 83       	std	Y+2, r24	; 0x02
      aa:	8a 81       	ldd	r24, Y+2	; 0x02
      ac:	9b 81       	ldd	r25, Y+3	; 0x03
      ae:	80 32       	cpi	r24, 0x20	; 32
      b0:	91 05       	cpc	r25, r1
      b2:	09 f4       	brne	.+2      	; 0xb6 <u8GetNum+0x24>
      b4:	52 c0       	rjmp	.+164    	; 0x15a <u8GetNum+0xc8>
      b6:	8a 81       	ldd	r24, Y+2	; 0x02
      b8:	9b 81       	ldd	r25, Y+3	; 0x03
      ba:	81 32       	cpi	r24, 0x21	; 33
      bc:	91 05       	cpc	r25, r1
      be:	e0 f4       	brcc	.+56     	; 0xf8 <u8GetNum+0x66>
      c0:	8a 81       	ldd	r24, Y+2	; 0x02
      c2:	9b 81       	ldd	r25, Y+3	; 0x03
      c4:	82 30       	cpi	r24, 0x02	; 2
      c6:	91 05       	cpc	r25, r1
      c8:	09 f4       	brne	.+2      	; 0xcc <u8GetNum+0x3a>
      ca:	3e c0       	rjmp	.+124    	; 0x148 <u8GetNum+0xb6>
      cc:	8a 81       	ldd	r24, Y+2	; 0x02
      ce:	9b 81       	ldd	r25, Y+3	; 0x03
      d0:	83 30       	cpi	r24, 0x03	; 3
      d2:	91 05       	cpc	r25, r1
      d4:	30 f4       	brcc	.+12     	; 0xe2 <u8GetNum+0x50>
      d6:	8a 81       	ldd	r24, Y+2	; 0x02
      d8:	9b 81       	ldd	r25, Y+3	; 0x03
      da:	81 30       	cpi	r24, 0x01	; 1
      dc:	91 05       	cpc	r25, r1
      de:	89 f1       	breq	.+98     	; 0x142 <u8GetNum+0xb0>
      e0:	4c c0       	rjmp	.+152    	; 0x17a <u8GetNum+0xe8>
      e2:	8a 81       	ldd	r24, Y+2	; 0x02
      e4:	9b 81       	ldd	r25, Y+3	; 0x03
      e6:	84 30       	cpi	r24, 0x04	; 4
      e8:	91 05       	cpc	r25, r1
      ea:	89 f1       	breq	.+98     	; 0x14e <u8GetNum+0xbc>
      ec:	8a 81       	ldd	r24, Y+2	; 0x02
      ee:	9b 81       	ldd	r25, Y+3	; 0x03
      f0:	80 31       	cpi	r24, 0x10	; 16
      f2:	91 05       	cpc	r25, r1
      f4:	79 f1       	breq	.+94     	; 0x154 <u8GetNum+0xc2>
      f6:	41 c0       	rjmp	.+130    	; 0x17a <u8GetNum+0xe8>
      f8:	8a 81       	ldd	r24, Y+2	; 0x02
      fa:	9b 81       	ldd	r25, Y+3	; 0x03
      fc:	22 e0       	ldi	r18, 0x02	; 2
      fe:	80 30       	cpi	r24, 0x00	; 0
     100:	92 07       	cpc	r25, r18
     102:	a1 f1       	breq	.+104    	; 0x16c <u8GetNum+0xda>
     104:	8a 81       	ldd	r24, Y+2	; 0x02
     106:	9b 81       	ldd	r25, Y+3	; 0x03
     108:	22 e0       	ldi	r18, 0x02	; 2
     10a:	81 30       	cpi	r24, 0x01	; 1
     10c:	92 07       	cpc	r25, r18
     10e:	60 f4       	brcc	.+24     	; 0x128 <u8GetNum+0x96>
     110:	8a 81       	ldd	r24, Y+2	; 0x02
     112:	9b 81       	ldd	r25, Y+3	; 0x03
     114:	80 34       	cpi	r24, 0x40	; 64
     116:	91 05       	cpc	r25, r1
     118:	19 f1       	breq	.+70     	; 0x160 <u8GetNum+0xce>
     11a:	8a 81       	ldd	r24, Y+2	; 0x02
     11c:	9b 81       	ldd	r25, Y+3	; 0x03
     11e:	21 e0       	ldi	r18, 0x01	; 1
     120:	80 30       	cpi	r24, 0x00	; 0
     122:	92 07       	cpc	r25, r18
     124:	01 f1       	breq	.+64     	; 0x166 <u8GetNum+0xd4>
     126:	29 c0       	rjmp	.+82     	; 0x17a <u8GetNum+0xe8>
     128:	8a 81       	ldd	r24, Y+2	; 0x02
     12a:	9b 81       	ldd	r25, Y+3	; 0x03
     12c:	24 e0       	ldi	r18, 0x04	; 4
     12e:	80 30       	cpi	r24, 0x00	; 0
     130:	92 07       	cpc	r25, r18
     132:	f9 f0       	breq	.+62     	; 0x172 <u8GetNum+0xe0>
     134:	8a 81       	ldd	r24, Y+2	; 0x02
     136:	9b 81       	ldd	r25, Y+3	; 0x03
     138:	20 e2       	ldi	r18, 0x20	; 32
     13a:	80 30       	cpi	r24, 0x00	; 0
     13c:	92 07       	cpc	r25, r18
     13e:	e1 f0       	breq	.+56     	; 0x178 <u8GetNum+0xe6>
     140:	1c c0       	rjmp	.+56     	; 0x17a <u8GetNum+0xe8>
     142:	81 e0       	ldi	r24, 0x01	; 1
     144:	89 83       	std	Y+1, r24	; 0x01
     146:	19 c0       	rjmp	.+50     	; 0x17a <u8GetNum+0xe8>
     148:	82 e0       	ldi	r24, 0x02	; 2
     14a:	89 83       	std	Y+1, r24	; 0x01
     14c:	16 c0       	rjmp	.+44     	; 0x17a <u8GetNum+0xe8>
     14e:	83 e0       	ldi	r24, 0x03	; 3
     150:	89 83       	std	Y+1, r24	; 0x01
     152:	13 c0       	rjmp	.+38     	; 0x17a <u8GetNum+0xe8>
     154:	84 e0       	ldi	r24, 0x04	; 4
     156:	89 83       	std	Y+1, r24	; 0x01
     158:	10 c0       	rjmp	.+32     	; 0x17a <u8GetNum+0xe8>
     15a:	85 e0       	ldi	r24, 0x05	; 5
     15c:	89 83       	std	Y+1, r24	; 0x01
     15e:	0d c0       	rjmp	.+26     	; 0x17a <u8GetNum+0xe8>
     160:	86 e0       	ldi	r24, 0x06	; 6
     162:	89 83       	std	Y+1, r24	; 0x01
     164:	0a c0       	rjmp	.+20     	; 0x17a <u8GetNum+0xe8>
     166:	87 e0       	ldi	r24, 0x07	; 7
     168:	89 83       	std	Y+1, r24	; 0x01
     16a:	07 c0       	rjmp	.+14     	; 0x17a <u8GetNum+0xe8>
     16c:	88 e0       	ldi	r24, 0x08	; 8
     16e:	89 83       	std	Y+1, r24	; 0x01
     170:	04 c0       	rjmp	.+8      	; 0x17a <u8GetNum+0xe8>
     172:	89 e0       	ldi	r24, 0x09	; 9
     174:	89 83       	std	Y+1, r24	; 0x01
     176:	01 c0       	rjmp	.+2      	; 0x17a <u8GetNum+0xe8>
     178:	19 82       	std	Y+1, r1	; 0x01
     17a:	89 81       	ldd	r24, Y+1	; 0x01
     17c:	0f 90       	pop	r0
     17e:	0f 90       	pop	r0
     180:	0f 90       	pop	r0
     182:	cf 91       	pop	r28
     184:	df 91       	pop	r29
     186:	08 95       	ret

00000188 <voidClockAdjust>:
}

u8 u8FlagAdjustmentMode;

void voidClockAdjust(void)
{
     188:	df 93       	push	r29
     18a:	cf 93       	push	r28
     18c:	00 d0       	rcall	.+0      	; 0x18e <voidClockAdjust+0x6>
     18e:	00 d0       	rcall	.+0      	; 0x190 <voidClockAdjust+0x8>
     190:	0f 92       	push	r0
     192:	cd b7       	in	r28, 0x3d	; 61
     194:	de b7       	in	r29, 0x3e	; 62
	static u8 u8DigitCounter;                    /* number of digit has been entered */
	static u8 u8AdjustValue;                     /* new adjust value                 */
	static u16 u16AdjustStateTimeout;            /* Amount of time that the adjust mode can be active in*/
	static u16 u16KeypadStoredValue;             /* holds last pressed key value */

	switch(u16AdjustState)
     196:	80 91 94 00 	lds	r24, 0x0094
     19a:	90 91 95 00 	lds	r25, 0x0095
     19e:	9d 83       	std	Y+5, r25	; 0x05
     1a0:	8c 83       	std	Y+4, r24	; 0x04
     1a2:	8c 81       	ldd	r24, Y+4	; 0x04
     1a4:	9d 81       	ldd	r25, Y+5	; 0x05
     1a6:	88 30       	cpi	r24, 0x08	; 8
     1a8:	91 05       	cpc	r25, r1
     1aa:	09 f4       	brne	.+2      	; 0x1ae <voidClockAdjust+0x26>
     1ac:	c0 c0       	rjmp	.+384    	; 0x32e <voidClockAdjust+0x1a6>
     1ae:	8c 81       	ldd	r24, Y+4	; 0x04
     1b0:	9d 81       	ldd	r25, Y+5	; 0x05
     1b2:	89 30       	cpi	r24, 0x09	; 9
     1b4:	91 05       	cpc	r25, r1
     1b6:	58 f4       	brcc	.+22     	; 0x1ce <voidClockAdjust+0x46>
     1b8:	8c 81       	ldd	r24, Y+4	; 0x04
     1ba:	9d 81       	ldd	r25, Y+5	; 0x05
     1bc:	00 97       	sbiw	r24, 0x00	; 0
     1be:	a9 f0       	breq	.+42     	; 0x1ea <voidClockAdjust+0x62>
     1c0:	8c 81       	ldd	r24, Y+4	; 0x04
     1c2:	9d 81       	ldd	r25, Y+5	; 0x05
     1c4:	85 30       	cpi	r24, 0x05	; 5
     1c6:	91 05       	cpc	r25, r1
     1c8:	09 f4       	brne	.+2      	; 0x1cc <voidClockAdjust+0x44>
     1ca:	40 c0       	rjmp	.+128    	; 0x24c <voidClockAdjust+0xc4>
     1cc:	d6 c0       	rjmp	.+428    	; 0x37a <voidClockAdjust+0x1f2>
     1ce:	8c 81       	ldd	r24, Y+4	; 0x04
     1d0:	9d 81       	ldd	r25, Y+5	; 0x05
     1d2:	80 38       	cpi	r24, 0x80	; 128
     1d4:	91 05       	cpc	r25, r1
     1d6:	09 f4       	brne	.+2      	; 0x1da <voidClockAdjust+0x52>
     1d8:	b7 c0       	rjmp	.+366    	; 0x348 <voidClockAdjust+0x1c0>
     1da:	8c 81       	ldd	r24, Y+4	; 0x04
     1dc:	9d 81       	ldd	r25, Y+5	; 0x05
     1de:	28 e0       	ldi	r18, 0x08	; 8
     1e0:	80 30       	cpi	r24, 0x00	; 0
     1e2:	92 07       	cpc	r25, r18
     1e4:	09 f4       	brne	.+2      	; 0x1e8 <voidClockAdjust+0x60>
     1e6:	bd c0       	rjmp	.+378    	; 0x362 <voidClockAdjust+0x1da>
     1e8:	c8 c0       	rjmp	.+400    	; 0x37a <voidClockAdjust+0x1f2>
	{
		case NORMAL_STATE:
		/* check if the kp got pressed */
		u16KeypadStoredValue= KP_u16GetStatus();
     1ea:	0e 94 39 05 	call	0xa72	; 0xa72 <KP_u16GetStatus>
     1ee:	90 93 8f 00 	sts	0x008F, r25
     1f2:	80 93 8e 00 	sts	0x008E, r24

		switch(u16KeypadStoredValue)
     1f6:	80 91 8e 00 	lds	r24, 0x008E
     1fa:	90 91 8f 00 	lds	r25, 0x008F
     1fe:	9b 83       	std	Y+3, r25	; 0x03
     200:	8a 83       	std	Y+2, r24	; 0x02
     202:	8a 81       	ldd	r24, Y+2	; 0x02
     204:	9b 81       	ldd	r25, Y+3	; 0x03
     206:	80 38       	cpi	r24, 0x80	; 128
     208:	91 05       	cpc	r25, r1
     20a:	61 f0       	breq	.+24     	; 0x224 <voidClockAdjust+0x9c>
     20c:	8a 81       	ldd	r24, Y+2	; 0x02
     20e:	9b 81       	ldd	r25, Y+3	; 0x03
     210:	28 e0       	ldi	r18, 0x08	; 8
     212:	80 30       	cpi	r24, 0x00	; 0
     214:	92 07       	cpc	r25, r18
     216:	31 f0       	breq	.+12     	; 0x224 <voidClockAdjust+0x9c>
     218:	8a 81       	ldd	r24, Y+2	; 0x02
     21a:	9b 81       	ldd	r25, Y+3	; 0x03
     21c:	88 30       	cpi	r24, 0x08	; 8
     21e:	91 05       	cpc	r25, r1
     220:	09 f0       	breq	.+2      	; 0x224 <voidClockAdjust+0x9c>
     222:	ab c0       	rjmp	.+342    	; 0x37a <voidClockAdjust+0x1f2>
		{
		case ADJUST_SS_STATE:
		case ADJUST_MM_STATE:
		case ADJUST_HH_STATE:
			/* prepare for the adjust mode*/
			u16AdjustStateTimeout = 6;
     224:	86 e0       	ldi	r24, 0x06	; 6
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	90 93 91 00 	sts	0x0091, r25
     22c:	80 93 90 00 	sts	0x0090, r24
			u8DigitCounter = 0;
     230:	10 92 93 00 	sts	0x0093, r1
			u8AdjustValue  = 0;
     234:	10 92 92 00 	sts	0x0092, r1
			/* go to adjusting mode */
			u16AdjustState = ADJUSTING_STATE;
     238:	85 e0       	ldi	r24, 0x05	; 5
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	90 93 95 00 	sts	0x0095, r25
     240:	80 93 94 00 	sts	0x0094, r24
			u8FlagAdjustmentMode = 1;
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	80 93 bb 00 	sts	0x00BB, r24
     24a:	97 c0       	rjmp	.+302    	; 0x37a <voidClockAdjust+0x1f2>
		}
		break;

		case ADJUSTING_STATE:
			/* allow user to enter tow digits only as long as the adjust event didn't timeout */
			if(u16AdjustStateTimeout && u8DigitCounter < 2)
     24c:	80 91 90 00 	lds	r24, 0x0090
     250:	90 91 91 00 	lds	r25, 0x0091
     254:	00 97       	sbiw	r24, 0x00	; 0
     256:	09 f4       	brne	.+2      	; 0x25a <voidClockAdjust+0xd2>
     258:	4e c0       	rjmp	.+156    	; 0x2f6 <voidClockAdjust+0x16e>
     25a:	80 91 93 00 	lds	r24, 0x0093
     25e:	82 30       	cpi	r24, 0x02	; 2
     260:	08 f0       	brcs	.+2      	; 0x264 <voidClockAdjust+0xdc>
     262:	49 c0       	rjmp	.+146    	; 0x2f6 <voidClockAdjust+0x16e>
			{
				u8 u8digit = u8GetNum();
     264:	0e 94 49 00 	call	0x92	; 0x92 <u8GetNum>
     268:	89 83       	std	Y+1, r24	; 0x01
                /* if got number from 0 to 9 */
				if(u8digit < 10)
     26a:	89 81       	ldd	r24, Y+1	; 0x01
     26c:	8a 30       	cpi	r24, 0x0A	; 10
     26e:	c8 f5       	brcc	.+114    	; 0x2e2 <voidClockAdjust+0x15a>
				{
					/* combine the tow digits in one decimal value*/
					if(u8DigitCounter == 0)
     270:	80 91 93 00 	lds	r24, 0x0093
     274:	88 23       	and	r24, r24
     276:	01 f5       	brne	.+64     	; 0x2b8 <voidClockAdjust+0x130>
					{
						PORTC = u8SegNum[u8digit];
     278:	a5 e3       	ldi	r26, 0x35	; 53
     27a:	b0 e0       	ldi	r27, 0x00	; 0
     27c:	89 81       	ldd	r24, Y+1	; 0x01
     27e:	88 2f       	mov	r24, r24
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	fc 01       	movw	r30, r24
     284:	e0 5a       	subi	r30, 0xA0	; 160
     286:	ff 4f       	sbci	r31, 0xFF	; 255
     288:	80 81       	ld	r24, Z
     28a:	8c 93       	st	X, r24
						u8AdjustValue = u8digit * 10;
     28c:	89 81       	ldd	r24, Y+1	; 0x01
     28e:	88 2f       	mov	r24, r24
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	9c 01       	movw	r18, r24
     294:	22 0f       	add	r18, r18
     296:	33 1f       	adc	r19, r19
     298:	c9 01       	movw	r24, r18
     29a:	88 0f       	add	r24, r24
     29c:	99 1f       	adc	r25, r25
     29e:	88 0f       	add	r24, r24
     2a0:	99 1f       	adc	r25, r25
     2a2:	82 0f       	add	r24, r18
     2a4:	93 1f       	adc	r25, r19
     2a6:	80 93 92 00 	sts	0x0092, r24
						u16AdjustStateTimeout = 6;
     2aa:	86 e0       	ldi	r24, 0x06	; 6
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	90 93 91 00 	sts	0x0091, r25
     2b2:	80 93 90 00 	sts	0x0090, r24
     2b6:	10 c0       	rjmp	.+32     	; 0x2d8 <voidClockAdjust+0x150>
					}
					else
					{
						PORTA = u8SegNum[u8digit];
     2b8:	ab e3       	ldi	r26, 0x3B	; 59
     2ba:	b0 e0       	ldi	r27, 0x00	; 0
     2bc:	89 81       	ldd	r24, Y+1	; 0x01
     2be:	88 2f       	mov	r24, r24
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	fc 01       	movw	r30, r24
     2c4:	e0 5a       	subi	r30, 0xA0	; 160
     2c6:	ff 4f       	sbci	r31, 0xFF	; 255
     2c8:	80 81       	ld	r24, Z
     2ca:	8c 93       	st	X, r24
						u8AdjustValue += u8digit;
     2cc:	90 91 92 00 	lds	r25, 0x0092
     2d0:	89 81       	ldd	r24, Y+1	; 0x01
     2d2:	89 0f       	add	r24, r25
     2d4:	80 93 92 00 	sts	0x0092, r24
					}
					u8DigitCounter++;
     2d8:	80 91 93 00 	lds	r24, 0x0093
     2dc:	8f 5f       	subi	r24, 0xFF	; 255
     2de:	80 93 93 00 	sts	0x0093, r24
				}
				u16AdjustStateTimeout--;
     2e2:	80 91 90 00 	lds	r24, 0x0090
     2e6:	90 91 91 00 	lds	r25, 0x0091
     2ea:	01 97       	sbiw	r24, 0x01	; 1
     2ec:	90 93 91 00 	sts	0x0091, r25
     2f0:	80 93 90 00 	sts	0x0090, r24
     2f4:	42 c0       	rjmp	.+132    	; 0x37a <voidClockAdjust+0x1f2>
			}
			/* if adjust has been completed successfully go apply it */
			else if(u16AdjustStateTimeout && u8DigitCounter == 2)
     2f6:	80 91 90 00 	lds	r24, 0x0090
     2fa:	90 91 91 00 	lds	r25, 0x0091
     2fe:	00 97       	sbiw	r24, 0x00	; 0
     300:	79 f0       	breq	.+30     	; 0x320 <voidClockAdjust+0x198>
     302:	80 91 93 00 	lds	r24, 0x0093
     306:	82 30       	cpi	r24, 0x02	; 2
     308:	59 f4       	brne	.+22     	; 0x320 <voidClockAdjust+0x198>
			{
				u16AdjustState = u16KeypadStoredValue;
     30a:	80 91 8e 00 	lds	r24, 0x008E
     30e:	90 91 8f 00 	lds	r25, 0x008F
     312:	90 93 95 00 	sts	0x0095, r25
     316:	80 93 94 00 	sts	0x0094, r24
				u8FlagAdjustmentMode = 0;
     31a:	10 92 bb 00 	sts	0x00BB, r1
     31e:	2d c0       	rjmp	.+90     	; 0x37a <voidClockAdjust+0x1f2>
			}
			/* if adjust has'nt been completed successfully dismiss it */
			else
			{
				u16AdjustState = NORMAL_STATE;
     320:	10 92 95 00 	sts	0x0095, r1
     324:	10 92 94 00 	sts	0x0094, r1
				u8FlagAdjustmentMode = 0;
     328:	10 92 bb 00 	sts	0x00BB, r1
     32c:	26 c0       	rjmp	.+76     	; 0x37a <voidClockAdjust+0x1f2>
			}
			break;

		case ADJUST_SS_STATE:
			/* update seconds with the u8AdjustValue*/
			if (u8AdjustValue < 60){
     32e:	80 91 92 00 	lds	r24, 0x0092
     332:	8c 33       	cpi	r24, 0x3C	; 60
     334:	20 f4       	brcc	.+8      	; 0x33e <voidClockAdjust+0x1b6>
				counterSec = u8AdjustValue;
     336:	80 91 92 00 	lds	r24, 0x0092
     33a:	80 93 b4 00 	sts	0x00B4, r24
			}
			u16AdjustState = NORMAL_STATE;
     33e:	10 92 95 00 	sts	0x0095, r1
     342:	10 92 94 00 	sts	0x0094, r1
     346:	19 c0       	rjmp	.+50     	; 0x37a <voidClockAdjust+0x1f2>
			break;
		case ADJUST_MM_STATE:
			/* update minutes with the u8AdjustValue*/
			if (u8AdjustValue < 60){
     348:	80 91 92 00 	lds	r24, 0x0092
     34c:	8c 33       	cpi	r24, 0x3C	; 60
     34e:	20 f4       	brcc	.+8      	; 0x358 <voidClockAdjust+0x1d0>
				countermin = u8AdjustValue;
     350:	80 91 92 00 	lds	r24, 0x0092
     354:	80 93 b5 00 	sts	0x00B5, r24
			}
			u16AdjustState = NORMAL_STATE;
     358:	10 92 95 00 	sts	0x0095, r1
     35c:	10 92 94 00 	sts	0x0094, r1
     360:	0c c0       	rjmp	.+24     	; 0x37a <voidClockAdjust+0x1f2>
			break;
		case ADJUST_HH_STATE:
			/* update hours with the u8AdjustValue*/
			if (u8AdjustValue < 24){
     362:	80 91 92 00 	lds	r24, 0x0092
     366:	88 31       	cpi	r24, 0x18	; 24
     368:	20 f4       	brcc	.+8      	; 0x372 <voidClockAdjust+0x1ea>
				counterhr = u8AdjustValue;
     36a:	80 91 92 00 	lds	r24, 0x0092
     36e:	80 93 b6 00 	sts	0x00B6, r24
			}
			u16AdjustState = NORMAL_STATE;
     372:	10 92 95 00 	sts	0x0095, r1
     376:	10 92 94 00 	sts	0x0094, r1
			break;
	}
}
     37a:	0f 90       	pop	r0
     37c:	0f 90       	pop	r0
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	cf 91       	pop	r28
     386:	df 91       	pop	r29
     388:	08 95       	ret

0000038a <DIO_voidInitialize>:
#include "DIO_priv.h"
#include "DIO_int.h"
#include "DIO_reg.h"

void DIO_voidInitialize(void)
{
     38a:	df 93       	push	r29
     38c:	cf 93       	push	r28
     38e:	cd b7       	in	r28, 0x3d	; 61
     390:	de b7       	in	r29, 0x3e	; 62
	DDRA=DIO_u8_PORTA_DIRECTION;
     392:	ea e3       	ldi	r30, 0x3A	; 58
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	8f ef       	ldi	r24, 0xFF	; 255
     398:	80 83       	st	Z, r24
	DDRB=DIO_u8_PORTB_DIRECTION;
     39a:	e7 e3       	ldi	r30, 0x37	; 55
     39c:	f0 e0       	ldi	r31, 0x00	; 0
     39e:	8f e0       	ldi	r24, 0x0F	; 15
     3a0:	80 83       	st	Z, r24
	DDRC=DIO_u8_PORTC_DIRECTION;
     3a2:	e4 e3       	ldi	r30, 0x34	; 52
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
     3a6:	8f ef       	ldi	r24, 0xFF	; 255
     3a8:	80 83       	st	Z, r24
	DDRD=DIO_u8_PORTD_DIRECTION;
     3aa:	e1 e3       	ldi	r30, 0x31	; 49
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
     3ae:	8e ec       	ldi	r24, 0xCE	; 206
     3b0:	80 83       	st	Z, r24
	
}
     3b2:	cf 91       	pop	r28
     3b4:	df 91       	pop	r29
     3b6:	08 95       	ret

000003b8 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 u8PinIndexcpy,u8 u8PinValueCpy)
{
     3b8:	df 93       	push	r29
     3ba:	cf 93       	push	r28
     3bc:	00 d0       	rcall	.+0      	; 0x3be <DIO_voidSetPinValue+0x6>
     3be:	cd b7       	in	r28, 0x3d	; 61
     3c0:	de b7       	in	r29, 0x3e	; 62
     3c2:	89 83       	std	Y+1, r24	; 0x01
     3c4:	6a 83       	std	Y+2, r22	; 0x02
	
	/*check if the pin index in  PORTA	range*/
	if(  (u8PinIndexcpy >=DIO_u8_PORTA_START )&& (u8PinIndexcpy <=DIO_u8_PORTA_END))
     3c6:	89 81       	ldd	r24, Y+1	; 0x01
     3c8:	88 30       	cpi	r24, 0x08	; 8
     3ca:	60 f5       	brcc	.+88     	; 0x424 <DIO_voidSetPinValue+0x6c>
	{
		if(u8PinValueCpy == DIO_u8_HIGH)
     3cc:	8a 81       	ldd	r24, Y+2	; 0x02
     3ce:	88 23       	and	r24, r24
     3d0:	a1 f4       	brne	.+40     	; 0x3fa <DIO_voidSetPinValue+0x42>
		{
			SET_BIT(PORTA, u8PinIndexcpy);
     3d2:	ab e3       	ldi	r26, 0x3B	; 59
     3d4:	b0 e0       	ldi	r27, 0x00	; 0
     3d6:	eb e3       	ldi	r30, 0x3B	; 59
     3d8:	f0 e0       	ldi	r31, 0x00	; 0
     3da:	80 81       	ld	r24, Z
     3dc:	48 2f       	mov	r20, r24
     3de:	89 81       	ldd	r24, Y+1	; 0x01
     3e0:	28 2f       	mov	r18, r24
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	02 2e       	mov	r0, r18
     3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <DIO_voidSetPinValue+0x38>
     3ec:	88 0f       	add	r24, r24
     3ee:	99 1f       	adc	r25, r25
     3f0:	0a 94       	dec	r0
     3f2:	e2 f7       	brpl	.-8      	; 0x3ec <DIO_voidSetPinValue+0x34>
     3f4:	84 2b       	or	r24, r20
     3f6:	8c 93       	st	X, r24
     3f8:	b3 c0       	rjmp	.+358    	; 0x560 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTA, u8PinIndexcpy);
     3fa:	ab e3       	ldi	r26, 0x3B	; 59
     3fc:	b0 e0       	ldi	r27, 0x00	; 0
     3fe:	eb e3       	ldi	r30, 0x3B	; 59
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	80 81       	ld	r24, Z
     404:	48 2f       	mov	r20, r24
     406:	89 81       	ldd	r24, Y+1	; 0x01
     408:	28 2f       	mov	r18, r24
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	02 2e       	mov	r0, r18
     412:	02 c0       	rjmp	.+4      	; 0x418 <DIO_voidSetPinValue+0x60>
     414:	88 0f       	add	r24, r24
     416:	99 1f       	adc	r25, r25
     418:	0a 94       	dec	r0
     41a:	e2 f7       	brpl	.-8      	; 0x414 <DIO_voidSetPinValue+0x5c>
     41c:	80 95       	com	r24
     41e:	84 23       	and	r24, r20
     420:	8c 93       	st	X, r24
     422:	9e c0       	rjmp	.+316    	; 0x560 <DIO_voidSetPinValue+0x1a8>
		}
	}
	else if(  (u8PinIndexcpy >= DIO_u8_PORTB_START )&& (u8PinIndexcpy <= DIO_u8_PORTB_END))
     424:	89 81       	ldd	r24, Y+1	; 0x01
     426:	88 30       	cpi	r24, 0x08	; 8
     428:	90 f1       	brcs	.+100    	; 0x48e <DIO_voidSetPinValue+0xd6>
     42a:	89 81       	ldd	r24, Y+1	; 0x01
     42c:	80 31       	cpi	r24, 0x10	; 16
     42e:	78 f5       	brcc	.+94     	; 0x48e <DIO_voidSetPinValue+0xd6>
	{
		u8PinIndexcpy-= DIO_PORTA_SIZE;
     430:	89 81       	ldd	r24, Y+1	; 0x01
     432:	88 50       	subi	r24, 0x08	; 8
     434:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
     436:	8a 81       	ldd	r24, Y+2	; 0x02
     438:	88 23       	and	r24, r24
     43a:	a1 f4       	brne	.+40     	; 0x464 <DIO_voidSetPinValue+0xac>
		{
			SET_BIT(PORTB, u8PinIndexcpy);
     43c:	a8 e3       	ldi	r26, 0x38	; 56
     43e:	b0 e0       	ldi	r27, 0x00	; 0
     440:	e8 e3       	ldi	r30, 0x38	; 56
     442:	f0 e0       	ldi	r31, 0x00	; 0
     444:	80 81       	ld	r24, Z
     446:	48 2f       	mov	r20, r24
     448:	89 81       	ldd	r24, Y+1	; 0x01
     44a:	28 2f       	mov	r18, r24
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	02 2e       	mov	r0, r18
     454:	02 c0       	rjmp	.+4      	; 0x45a <DIO_voidSetPinValue+0xa2>
     456:	88 0f       	add	r24, r24
     458:	99 1f       	adc	r25, r25
     45a:	0a 94       	dec	r0
     45c:	e2 f7       	brpl	.-8      	; 0x456 <DIO_voidSetPinValue+0x9e>
     45e:	84 2b       	or	r24, r20
     460:	8c 93       	st	X, r24
     462:	7e c0       	rjmp	.+252    	; 0x560 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTB, u8PinIndexcpy);
     464:	a8 e3       	ldi	r26, 0x38	; 56
     466:	b0 e0       	ldi	r27, 0x00	; 0
     468:	e8 e3       	ldi	r30, 0x38	; 56
     46a:	f0 e0       	ldi	r31, 0x00	; 0
     46c:	80 81       	ld	r24, Z
     46e:	48 2f       	mov	r20, r24
     470:	89 81       	ldd	r24, Y+1	; 0x01
     472:	28 2f       	mov	r18, r24
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	02 2e       	mov	r0, r18
     47c:	02 c0       	rjmp	.+4      	; 0x482 <DIO_voidSetPinValue+0xca>
     47e:	88 0f       	add	r24, r24
     480:	99 1f       	adc	r25, r25
     482:	0a 94       	dec	r0
     484:	e2 f7       	brpl	.-8      	; 0x47e <DIO_voidSetPinValue+0xc6>
     486:	80 95       	com	r24
     488:	84 23       	and	r24, r20
     48a:	8c 93       	st	X, r24
     48c:	69 c0       	rjmp	.+210    	; 0x560 <DIO_voidSetPinValue+0x1a8>
		}
		
	}
	else if((u8PinIndexcpy >= DIO_u8_PORTC_START )&& (u8PinIndexcpy <= DIO_u8_PORTC_END))
     48e:	89 81       	ldd	r24, Y+1	; 0x01
     490:	80 31       	cpi	r24, 0x10	; 16
     492:	90 f1       	brcs	.+100    	; 0x4f8 <DIO_voidSetPinValue+0x140>
     494:	89 81       	ldd	r24, Y+1	; 0x01
     496:	88 31       	cpi	r24, 0x18	; 24
     498:	78 f5       	brcc	.+94     	; 0x4f8 <DIO_voidSetPinValue+0x140>
	{
		    u8PinIndexcpy -= DIO_PORTA_SIZE+DIO_PORTB_SIZE;
     49a:	89 81       	ldd	r24, Y+1	; 0x01
     49c:	80 51       	subi	r24, 0x10	; 16
     49e:	89 83       	std	Y+1, r24	; 0x01
			if(u8PinValueCpy == DIO_u8_HIGH)
     4a0:	8a 81       	ldd	r24, Y+2	; 0x02
     4a2:	88 23       	and	r24, r24
     4a4:	a1 f4       	brne	.+40     	; 0x4ce <DIO_voidSetPinValue+0x116>
			{
				SET_BIT(PORTC, u8PinIndexcpy);
     4a6:	a5 e3       	ldi	r26, 0x35	; 53
     4a8:	b0 e0       	ldi	r27, 0x00	; 0
     4aa:	e5 e3       	ldi	r30, 0x35	; 53
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	80 81       	ld	r24, Z
     4b0:	48 2f       	mov	r20, r24
     4b2:	89 81       	ldd	r24, Y+1	; 0x01
     4b4:	28 2f       	mov	r18, r24
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	02 2e       	mov	r0, r18
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <DIO_voidSetPinValue+0x10c>
     4c0:	88 0f       	add	r24, r24
     4c2:	99 1f       	adc	r25, r25
     4c4:	0a 94       	dec	r0
     4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <DIO_voidSetPinValue+0x108>
     4c8:	84 2b       	or	r24, r20
     4ca:	8c 93       	st	X, r24
     4cc:	49 c0       	rjmp	.+146    	; 0x560 <DIO_voidSetPinValue+0x1a8>
			}
			else
			{
				CLR_BIT(PORTC, u8PinIndexcpy);
     4ce:	a5 e3       	ldi	r26, 0x35	; 53
     4d0:	b0 e0       	ldi	r27, 0x00	; 0
     4d2:	e5 e3       	ldi	r30, 0x35	; 53
     4d4:	f0 e0       	ldi	r31, 0x00	; 0
     4d6:	80 81       	ld	r24, Z
     4d8:	48 2f       	mov	r20, r24
     4da:	89 81       	ldd	r24, Y+1	; 0x01
     4dc:	28 2f       	mov	r18, r24
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	02 2e       	mov	r0, r18
     4e6:	02 c0       	rjmp	.+4      	; 0x4ec <DIO_voidSetPinValue+0x134>
     4e8:	88 0f       	add	r24, r24
     4ea:	99 1f       	adc	r25, r25
     4ec:	0a 94       	dec	r0
     4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <DIO_voidSetPinValue+0x130>
     4f0:	80 95       	com	r24
     4f2:	84 23       	and	r24, r20
     4f4:	8c 93       	st	X, r24
     4f6:	34 c0       	rjmp	.+104    	; 0x560 <DIO_voidSetPinValue+0x1a8>
			}
	}
	else if((u8PinIndexcpy >=DIO_u8_PORTD_START )&& (u8PinIndexcpy <= DIO_u8_PORTD_END))
     4f8:	89 81       	ldd	r24, Y+1	; 0x01
     4fa:	88 31       	cpi	r24, 0x18	; 24
     4fc:	88 f1       	brcs	.+98     	; 0x560 <DIO_voidSetPinValue+0x1a8>
     4fe:	89 81       	ldd	r24, Y+1	; 0x01
     500:	80 32       	cpi	r24, 0x20	; 32
     502:	70 f5       	brcc	.+92     	; 0x560 <DIO_voidSetPinValue+0x1a8>
	{
		    u8PinIndexcpy -= DIO_PORTA_SIZE+DIO_PORTB_SIZE+DIO_PORTC_SIZE;
     504:	89 81       	ldd	r24, Y+1	; 0x01
     506:	88 51       	subi	r24, 0x18	; 24
     508:	89 83       	std	Y+1, r24	; 0x01
			if(u8PinValueCpy == DIO_u8_HIGH)
     50a:	8a 81       	ldd	r24, Y+2	; 0x02
     50c:	88 23       	and	r24, r24
     50e:	a1 f4       	brne	.+40     	; 0x538 <DIO_voidSetPinValue+0x180>
			{
				SET_BIT(PORTD, u8PinIndexcpy);
     510:	a2 e3       	ldi	r26, 0x32	; 50
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e2 e3       	ldi	r30, 0x32	; 50
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	80 81       	ld	r24, Z
     51a:	48 2f       	mov	r20, r24
     51c:	89 81       	ldd	r24, Y+1	; 0x01
     51e:	28 2f       	mov	r18, r24
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	02 2e       	mov	r0, r18
     528:	02 c0       	rjmp	.+4      	; 0x52e <DIO_voidSetPinValue+0x176>
     52a:	88 0f       	add	r24, r24
     52c:	99 1f       	adc	r25, r25
     52e:	0a 94       	dec	r0
     530:	e2 f7       	brpl	.-8      	; 0x52a <DIO_voidSetPinValue+0x172>
     532:	84 2b       	or	r24, r20
     534:	8c 93       	st	X, r24
     536:	14 c0       	rjmp	.+40     	; 0x560 <DIO_voidSetPinValue+0x1a8>
			}
			else
			{
				CLR_BIT(PORTD,u8PinIndexcpy);
     538:	a2 e3       	ldi	r26, 0x32	; 50
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 e3       	ldi	r30, 0x32	; 50
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	80 81       	ld	r24, Z
     542:	48 2f       	mov	r20, r24
     544:	89 81       	ldd	r24, Y+1	; 0x01
     546:	28 2f       	mov	r18, r24
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	02 2e       	mov	r0, r18
     550:	02 c0       	rjmp	.+4      	; 0x556 <DIO_voidSetPinValue+0x19e>
     552:	88 0f       	add	r24, r24
     554:	99 1f       	adc	r25, r25
     556:	0a 94       	dec	r0
     558:	e2 f7       	brpl	.-8      	; 0x552 <DIO_voidSetPinValue+0x19a>
     55a:	80 95       	com	r24
     55c:	84 23       	and	r24, r20
     55e:	8c 93       	st	X, r24
			}
	}
		
}
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	cf 91       	pop	r28
     566:	df 91       	pop	r29
     568:	08 95       	ret

0000056a <DIO_u8GetPinValue>:

 u8 DIO_u8GetPinValue(u8 u8PinIndexcpy)
{
     56a:	df 93       	push	r29
     56c:	cf 93       	push	r28
     56e:	00 d0       	rcall	.+0      	; 0x570 <DIO_u8GetPinValue+0x6>
     570:	cd b7       	in	r28, 0x3d	; 61
     572:	de b7       	in	r29, 0x3e	; 62
     574:	8a 83       	std	Y+2, r24	; 0x02
	 u8 u8ReturnValue;
	if(  (u8PinIndexcpy >= DIO_u8_PORTA_START )&& (u8PinIndexcpy <= DIO_u8_PORTA_END))
     576:	8a 81       	ldd	r24, Y+2	; 0x02
     578:	88 30       	cpi	r24, 0x08	; 8
     57a:	c0 f4       	brcc	.+48     	; 0x5ac <DIO_u8GetPinValue+0x42>
	{
		if(GET_BIT(PINA, u8PinIndexcpy) == 1)
     57c:	e9 e3       	ldi	r30, 0x39	; 57
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	80 81       	ld	r24, Z
     582:	28 2f       	mov	r18, r24
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	8a 81       	ldd	r24, Y+2	; 0x02
     588:	88 2f       	mov	r24, r24
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	a9 01       	movw	r20, r18
     58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_u8GetPinValue+0x2a>
     590:	55 95       	asr	r21
     592:	47 95       	ror	r20
     594:	8a 95       	dec	r24
     596:	e2 f7       	brpl	.-8      	; 0x590 <DIO_u8GetPinValue+0x26>
     598:	ca 01       	movw	r24, r20
     59a:	81 70       	andi	r24, 0x01	; 1
     59c:	90 70       	andi	r25, 0x00	; 0
     59e:	88 23       	and	r24, r24
     5a0:	11 f0       	breq	.+4      	; 0x5a6 <DIO_u8GetPinValue+0x3c>
		{
			u8ReturnValue=DIO_u8_HIGH;
     5a2:	19 82       	std	Y+1, r1	; 0x01
     5a4:	65 c0       	rjmp	.+202    	; 0x670 <DIO_u8GetPinValue+0x106>
		}
		else
		{
			u8ReturnValue=DIO_u8_LOW;
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	89 83       	std	Y+1, r24	; 0x01
     5aa:	62 c0       	rjmp	.+196    	; 0x670 <DIO_u8GetPinValue+0x106>
		}

	}
	else if(  (u8PinIndexcpy >=DIO_u8_PORTB_START )&& (u8PinIndexcpy <=DIO_u8_PORTB_END))
     5ac:	8a 81       	ldd	r24, Y+2	; 0x02
     5ae:	88 30       	cpi	r24, 0x08	; 8
     5b0:	f0 f0       	brcs	.+60     	; 0x5ee <DIO_u8GetPinValue+0x84>
     5b2:	8a 81       	ldd	r24, Y+2	; 0x02
     5b4:	80 31       	cpi	r24, 0x10	; 16
     5b6:	d8 f4       	brcc	.+54     	; 0x5ee <DIO_u8GetPinValue+0x84>
	{
		u8PinIndexcpy-=DIO_PORTA_SIZE;
     5b8:	8a 81       	ldd	r24, Y+2	; 0x02
     5ba:	88 50       	subi	r24, 0x08	; 8
     5bc:	8a 83       	std	Y+2, r24	; 0x02
		if(GET_BIT(PINB,u8PinIndexcpy) == 1)
     5be:	e6 e3       	ldi	r30, 0x36	; 54
     5c0:	f0 e0       	ldi	r31, 0x00	; 0
     5c2:	80 81       	ld	r24, Z
     5c4:	28 2f       	mov	r18, r24
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	8a 81       	ldd	r24, Y+2	; 0x02
     5ca:	88 2f       	mov	r24, r24
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	a9 01       	movw	r20, r18
     5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_u8GetPinValue+0x6c>
     5d2:	55 95       	asr	r21
     5d4:	47 95       	ror	r20
     5d6:	8a 95       	dec	r24
     5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_u8GetPinValue+0x68>
     5da:	ca 01       	movw	r24, r20
     5dc:	81 70       	andi	r24, 0x01	; 1
     5de:	90 70       	andi	r25, 0x00	; 0
     5e0:	88 23       	and	r24, r24
     5e2:	11 f0       	breq	.+4      	; 0x5e8 <DIO_u8GetPinValue+0x7e>
		{
			u8ReturnValue=DIO_u8_HIGH;
     5e4:	19 82       	std	Y+1, r1	; 0x01
     5e6:	44 c0       	rjmp	.+136    	; 0x670 <DIO_u8GetPinValue+0x106>
		}
		else
		{
			u8ReturnValue=DIO_u8_LOW;
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	89 83       	std	Y+1, r24	; 0x01
     5ec:	41 c0       	rjmp	.+130    	; 0x670 <DIO_u8GetPinValue+0x106>
		}

	}
	else if((u8PinIndexcpy >=DIO_u8_PORTC_START )&& (u8PinIndexcpy <=DIO_u8_PORTC_END))
     5ee:	8a 81       	ldd	r24, Y+2	; 0x02
     5f0:	80 31       	cpi	r24, 0x10	; 16
     5f2:	f0 f0       	brcs	.+60     	; 0x630 <DIO_u8GetPinValue+0xc6>
     5f4:	8a 81       	ldd	r24, Y+2	; 0x02
     5f6:	88 31       	cpi	r24, 0x18	; 24
     5f8:	d8 f4       	brcc	.+54     	; 0x630 <DIO_u8GetPinValue+0xc6>
	{
		u8PinIndexcpy-=DIO_PORTA_SIZE+DIO_PORTB_SIZE;
     5fa:	8a 81       	ldd	r24, Y+2	; 0x02
     5fc:	80 51       	subi	r24, 0x10	; 16
     5fe:	8a 83       	std	Y+2, r24	; 0x02
		if(GET_BIT(PINC,u8PinIndexcpy) == 1)
     600:	e3 e3       	ldi	r30, 0x33	; 51
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	80 81       	ld	r24, Z
     606:	28 2f       	mov	r18, r24
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	8a 81       	ldd	r24, Y+2	; 0x02
     60c:	88 2f       	mov	r24, r24
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	a9 01       	movw	r20, r18
     612:	02 c0       	rjmp	.+4      	; 0x618 <DIO_u8GetPinValue+0xae>
     614:	55 95       	asr	r21
     616:	47 95       	ror	r20
     618:	8a 95       	dec	r24
     61a:	e2 f7       	brpl	.-8      	; 0x614 <DIO_u8GetPinValue+0xaa>
     61c:	ca 01       	movw	r24, r20
     61e:	81 70       	andi	r24, 0x01	; 1
     620:	90 70       	andi	r25, 0x00	; 0
     622:	88 23       	and	r24, r24
     624:	11 f0       	breq	.+4      	; 0x62a <DIO_u8GetPinValue+0xc0>
		{
			u8ReturnValue=DIO_u8_HIGH;
     626:	19 82       	std	Y+1, r1	; 0x01
     628:	23 c0       	rjmp	.+70     	; 0x670 <DIO_u8GetPinValue+0x106>
		}
		else
		{
			u8ReturnValue=DIO_u8_LOW;
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	89 83       	std	Y+1, r24	; 0x01
     62e:	20 c0       	rjmp	.+64     	; 0x670 <DIO_u8GetPinValue+0x106>
		}
	}
	else if((u8PinIndexcpy >=DIO_u8_PORTD_START )&& (u8PinIndexcpy <=DIO_u8_PORTD_END))
     630:	8a 81       	ldd	r24, Y+2	; 0x02
     632:	88 31       	cpi	r24, 0x18	; 24
     634:	e8 f0       	brcs	.+58     	; 0x670 <DIO_u8GetPinValue+0x106>
     636:	8a 81       	ldd	r24, Y+2	; 0x02
     638:	80 32       	cpi	r24, 0x20	; 32
     63a:	d0 f4       	brcc	.+52     	; 0x670 <DIO_u8GetPinValue+0x106>
	{
		u8PinIndexcpy-=DIO_PORTA_SIZE+DIO_PORTB_SIZE+DIO_PORTC_SIZE;
     63c:	8a 81       	ldd	r24, Y+2	; 0x02
     63e:	88 51       	subi	r24, 0x18	; 24
     640:	8a 83       	std	Y+2, r24	; 0x02
		if(GET_BIT(PIND,u8PinIndexcpy) == 1)
     642:	e0 e3       	ldi	r30, 0x30	; 48
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	80 81       	ld	r24, Z
     648:	28 2f       	mov	r18, r24
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	8a 81       	ldd	r24, Y+2	; 0x02
     64e:	88 2f       	mov	r24, r24
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	a9 01       	movw	r20, r18
     654:	02 c0       	rjmp	.+4      	; 0x65a <DIO_u8GetPinValue+0xf0>
     656:	55 95       	asr	r21
     658:	47 95       	ror	r20
     65a:	8a 95       	dec	r24
     65c:	e2 f7       	brpl	.-8      	; 0x656 <DIO_u8GetPinValue+0xec>
     65e:	ca 01       	movw	r24, r20
     660:	81 70       	andi	r24, 0x01	; 1
     662:	90 70       	andi	r25, 0x00	; 0
     664:	88 23       	and	r24, r24
     666:	11 f0       	breq	.+4      	; 0x66c <DIO_u8GetPinValue+0x102>
		{
			u8ReturnValue=DIO_u8_HIGH;
     668:	19 82       	std	Y+1, r1	; 0x01
     66a:	02 c0       	rjmp	.+4      	; 0x670 <DIO_u8GetPinValue+0x106>
		}
		else
		{
			u8ReturnValue=DIO_u8_LOW;
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	89 83       	std	Y+1, r24	; 0x01
		}


	}
	return u8ReturnValue;
     670:	89 81       	ldd	r24, Y+1	; 0x01
}
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	cf 91       	pop	r28
     678:	df 91       	pop	r29
     67a:	08 95       	ret

0000067c <OS_voidInitialization>:
#define InitialValue  0

volatile u32 u32Tick_counter = InitialValue;
volatile u8	 u8Tick_Flag = InitialValue;

void OS_voidInitialization(void){
     67c:	df 93       	push	r29
     67e:	cf 93       	push	r28
     680:	cd b7       	in	r28, 0x3d	; 61
     682:	de b7       	in	r29, 0x3e	; 62

}
     684:	cf 91       	pop	r28
     686:	df 91       	pop	r29
     688:	08 95       	ret

0000068a <OS_voidStart>:

void OS_voidStart(void)
{
     68a:	ef 92       	push	r14
     68c:	ff 92       	push	r15
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	df 93       	push	r29
     694:	cf 93       	push	r28
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
	static u8 u8LoopCounterLoc;
	while(1){
		if (1 == u8Tick_Flag)
     69a:	80 91 9a 00 	lds	r24, 0x009A
     69e:	81 30       	cpi	r24, 0x01	; 1
     6a0:	e1 f7       	brne	.-8      	; 0x69a <OS_voidStart+0x10>
		{
			u8Tick_Flag = 0;
     6a2:	10 92 9a 00 	sts	0x009A, r1
			for(u8LoopCounterLoc = InitialValue ; u8LoopCounterLoc < u8NumberOfTasks; u8LoopCounterLoc++)
     6a6:	10 92 9b 00 	sts	0x009B, r1
     6aa:	37 c0       	rjmp	.+110    	; 0x71a <OS_voidStart+0x90>
			{
				if((u32Tick_counter % OS_cfg[u8LoopCounterLoc].u16Periodicity) == InitialValue)
     6ac:	e0 90 96 00 	lds	r14, 0x0096
     6b0:	f0 90 97 00 	lds	r15, 0x0097
     6b4:	00 91 98 00 	lds	r16, 0x0098
     6b8:	10 91 99 00 	lds	r17, 0x0099
     6bc:	80 91 9b 00 	lds	r24, 0x009B
     6c0:	88 2f       	mov	r24, r24
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	88 0f       	add	r24, r24
     6c6:	99 1f       	adc	r25, r25
     6c8:	01 96       	adiw	r24, 0x01	; 1
     6ca:	88 0f       	add	r24, r24
     6cc:	99 1f       	adc	r25, r25
     6ce:	fc 01       	movw	r30, r24
     6d0:	e5 59       	subi	r30, 0x95	; 149
     6d2:	ff 4f       	sbci	r31, 0xFF	; 255
     6d4:	80 81       	ld	r24, Z
     6d6:	91 81       	ldd	r25, Z+1	; 0x01
     6d8:	9c 01       	movw	r18, r24
     6da:	40 e0       	ldi	r20, 0x00	; 0
     6dc:	50 e0       	ldi	r21, 0x00	; 0
     6de:	c8 01       	movw	r24, r16
     6e0:	b7 01       	movw	r22, r14
     6e2:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__udivmodsi4>
     6e6:	dc 01       	movw	r26, r24
     6e8:	cb 01       	movw	r24, r22
     6ea:	00 97       	sbiw	r24, 0x00	; 0
     6ec:	a1 05       	cpc	r26, r1
     6ee:	b1 05       	cpc	r27, r1
     6f0:	79 f4       	brne	.+30     	; 0x710 <OS_voidStart+0x86>
				{
					OS_cfg[u8LoopCounterLoc].pfTask();
     6f2:	80 91 9b 00 	lds	r24, 0x009B
     6f6:	88 2f       	mov	r24, r24
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	88 0f       	add	r24, r24
     6fc:	99 1f       	adc	r25, r25
     6fe:	88 0f       	add	r24, r24
     700:	99 1f       	adc	r25, r25
     702:	fc 01       	movw	r30, r24
     704:	e5 59       	subi	r30, 0x95	; 149
     706:	ff 4f       	sbci	r31, 0xFF	; 255
     708:	01 90       	ld	r0, Z+
     70a:	f0 81       	ld	r31, Z
     70c:	e0 2d       	mov	r30, r0
     70e:	09 95       	icall
	static u8 u8LoopCounterLoc;
	while(1){
		if (1 == u8Tick_Flag)
		{
			u8Tick_Flag = 0;
			for(u8LoopCounterLoc = InitialValue ; u8LoopCounterLoc < u8NumberOfTasks; u8LoopCounterLoc++)
     710:	80 91 9b 00 	lds	r24, 0x009B
     714:	8f 5f       	subi	r24, 0xFF	; 255
     716:	80 93 9b 00 	sts	0x009B, r24
     71a:	90 91 9b 00 	lds	r25, 0x009B
     71e:	80 91 8b 00 	lds	r24, 0x008B
     722:	98 17       	cp	r25, r24
     724:	18 f2       	brcs	.-122    	; 0x6ac <OS_voidStart+0x22>
     726:	b9 cf       	rjmp	.-142    	; 0x69a <OS_voidStart+0x10>

00000728 <__vector_10>:
}


/* Tick Timer */
ISR (TIMER0_COMP_vect)
{
     728:	1f 92       	push	r1
     72a:	0f 92       	push	r0
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	0f 92       	push	r0
     730:	11 24       	eor	r1, r1
     732:	8f 93       	push	r24
     734:	9f 93       	push	r25
     736:	af 93       	push	r26
     738:	bf 93       	push	r27
     73a:	df 93       	push	r29
     73c:	cf 93       	push	r28
     73e:	cd b7       	in	r28, 0x3d	; 61
     740:	de b7       	in	r29, 0x3e	; 62
	u32Tick_counter++;
     742:	80 91 96 00 	lds	r24, 0x0096
     746:	90 91 97 00 	lds	r25, 0x0097
     74a:	a0 91 98 00 	lds	r26, 0x0098
     74e:	b0 91 99 00 	lds	r27, 0x0099
     752:	01 96       	adiw	r24, 0x01	; 1
     754:	a1 1d       	adc	r26, r1
     756:	b1 1d       	adc	r27, r1
     758:	80 93 96 00 	sts	0x0096, r24
     75c:	90 93 97 00 	sts	0x0097, r25
     760:	a0 93 98 00 	sts	0x0098, r26
     764:	b0 93 99 00 	sts	0x0099, r27
	u8Tick_Flag = 1 ;
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	80 93 9a 00 	sts	0x009A, r24
}
     76e:	cf 91       	pop	r28
     770:	df 91       	pop	r29
     772:	bf 91       	pop	r27
     774:	af 91       	pop	r26
     776:	9f 91       	pop	r25
     778:	8f 91       	pop	r24
     77a:	0f 90       	pop	r0
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	0f 90       	pop	r0
     780:	1f 90       	pop	r1
     782:	18 95       	reti

00000784 <TIMER0_voidInit>:
#include "TIM_int.h"
#include "TIM_reg.h"

/* set timer0 to work in CTC mode */
void TIMER0_voidInit()
{
     784:	df 93       	push	r29
     786:	cf 93       	push	r28
     788:	cd b7       	in	r28, 0x3d	; 61
     78a:	de b7       	in	r29, 0x3e	; 62
	/* clear tmr1 flag */
	/* Activating Compare PIN 1*/
	SET_BIT(TIFR, 1);
     78c:	a8 e5       	ldi	r26, 0x58	; 88
     78e:	b0 e0       	ldi	r27, 0x00	; 0
     790:	e8 e5       	ldi	r30, 0x58	; 88
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	80 81       	ld	r24, Z
     796:	82 60       	ori	r24, 0x02	; 2
     798:	8c 93       	st	X, r24

	/*to select CTC mode */
	SET_BIT(TCCR0, WGM01);
     79a:	a3 e5       	ldi	r26, 0x53	; 83
     79c:	b0 e0       	ldi	r27, 0x00	; 0
     79e:	e3 e5       	ldi	r30, 0x53	; 83
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	80 81       	ld	r24, Z
     7a4:	88 60       	ori	r24, 0x08	; 8
     7a6:	8c 93       	st	X, r24

	/*  set the pre-scaler to: 1024 */
	SET_BIT(TCCR0, CS00);
     7a8:	a3 e5       	ldi	r26, 0x53	; 83
     7aa:	b0 e0       	ldi	r27, 0x00	; 0
     7ac:	e3 e5       	ldi	r30, 0x53	; 83
     7ae:	f0 e0       	ldi	r31, 0x00	; 0
     7b0:	80 81       	ld	r24, Z
     7b2:	81 60       	ori	r24, 0x01	; 1
     7b4:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
     7b6:	a3 e5       	ldi	r26, 0x53	; 83
     7b8:	b0 e0       	ldi	r27, 0x00	; 0
     7ba:	e3 e5       	ldi	r30, 0x53	; 83
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	80 81       	ld	r24, Z
     7c0:	8d 7f       	andi	r24, 0xFD	; 253
     7c2:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS02);
     7c4:	a3 e5       	ldi	r26, 0x53	; 83
     7c6:	b0 e0       	ldi	r27, 0x00	; 0
     7c8:	e3 e5       	ldi	r30, 0x53	; 83
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	80 81       	ld	r24, Z
     7ce:	84 60       	ori	r24, 0x04	; 4
     7d0:	8c 93       	st	X, r24
	/* set OCR0 compare register */
	OCR0 = 156; // OS Tick = 20 MS
     7d2:	ec e5       	ldi	r30, 0x5C	; 92
     7d4:	f0 e0       	ldi	r31, 0x00	; 0
     7d6:	8c e9       	ldi	r24, 0x9C	; 156
     7d8:	80 83       	st	Z, r24

	/* enable tmr0 interrupt */
	SET_BIT(TIMSK, OCIE0);
     7da:	a9 e5       	ldi	r26, 0x59	; 89
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e9 e5       	ldi	r30, 0x59	; 89
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	80 81       	ld	r24, Z
     7e4:	82 60       	ori	r24, 0x02	; 2
     7e6:	8c 93       	st	X, r24
}
     7e8:	cf 91       	pop	r28
     7ea:	df 91       	pop	r29
     7ec:	08 95       	ret

000007ee <UART_Init>:
#include  "UART_cfg.h"
#include "GIE_int.h"

static UART_t UART_data = {{0}, 0};
void UART_Init(void)
{
     7ee:	df 93       	push	r29
     7f0:	cf 93       	push	r28
     7f2:	00 d0       	rcall	.+0      	; 0x7f4 <UART_Init+0x6>
     7f4:	cd b7       	in	r28, 0x3d	; 61
     7f6:	de b7       	in	r29, 0x3e	; 62
	/* Set baud rate */
	u16 baud = 51;
     7f8:	83 e3       	ldi	r24, 0x33	; 51
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	9a 83       	std	Y+2, r25	; 0x02
     7fe:	89 83       	std	Y+1, r24	; 0x01
	/* baud = ((u16)((u32)F_CPU/(u32)(16 * BAUD_RATE)) -1);*/
	UBRRH = (u8)(baud>>8);
     800:	e0 e4       	ldi	r30, 0x40	; 64
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	89 81       	ldd	r24, Y+1	; 0x01
     806:	9a 81       	ldd	r25, Y+2	; 0x02
     808:	89 2f       	mov	r24, r25
     80a:	99 27       	eor	r25, r25
     80c:	80 83       	st	Z, r24
	UBRRL = (u8)baud;
     80e:	e9 e2       	ldi	r30, 0x29	; 41
     810:	f0 e0       	ldi	r31, 0x00	; 0
     812:	89 81       	ldd	r24, Y+1	; 0x01
     814:	80 83       	st	Z, r24
	/* Enable receiver and transmitter */
	UCSRB |= (1<<RXEN)|(1<<TXEN);
     816:	aa e2       	ldi	r26, 0x2A	; 42
     818:	b0 e0       	ldi	r27, 0x00	; 0
     81a:	ea e2       	ldi	r30, 0x2A	; 42
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	80 81       	ld	r24, Z
     820:	88 61       	ori	r24, 0x18	; 24
     822:	8c 93       	st	X, r24
	/* Set frame format: 8data, 2stop bit */
	UCSRC |= (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
     824:	a0 e4       	ldi	r26, 0x40	; 64
     826:	b0 e0       	ldi	r27, 0x00	; 0
     828:	e0 e4       	ldi	r30, 0x40	; 64
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	80 81       	ld	r24, Z
     82e:	8e 68       	ori	r24, 0x8E	; 142
     830:	8c 93       	st	X, r24
	/* Enable RX Interrupt */
	UCSRB |= (1<<RXCIE);
     832:	aa e2       	ldi	r26, 0x2A	; 42
     834:	b0 e0       	ldi	r27, 0x00	; 0
     836:	ea e2       	ldi	r30, 0x2A	; 42
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	80 81       	ld	r24, Z
     83c:	80 68       	ori	r24, 0x80	; 128
     83e:	8c 93       	st	X, r24
}
     840:	0f 90       	pop	r0
     842:	0f 90       	pop	r0
     844:	cf 91       	pop	r28
     846:	df 91       	pop	r29
     848:	08 95       	ret

0000084a <UART_Transmit>:

void UART_Transmit(u8* data, u16 Len)
{
     84a:	df 93       	push	r29
     84c:	cf 93       	push	r28
     84e:	00 d0       	rcall	.+0      	; 0x850 <UART_Transmit+0x6>
     850:	00 d0       	rcall	.+0      	; 0x852 <UART_Transmit+0x8>
     852:	00 d0       	rcall	.+0      	; 0x854 <UART_Transmit+0xa>
     854:	cd b7       	in	r28, 0x3d	; 61
     856:	de b7       	in	r29, 0x3e	; 62
     858:	9c 83       	std	Y+4, r25	; 0x04
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	7e 83       	std	Y+6, r23	; 0x06
     85e:	6d 83       	std	Y+5, r22	; 0x05
	/* Loop that */
	u16 u16CountrLoopLoc;
	for (u16CountrLoopLoc = 0; u16CountrLoopLoc < Len; u16CountrLoopLoc++)
     860:	1a 82       	std	Y+2, r1	; 0x02
     862:	19 82       	std	Y+1, r1	; 0x01
     864:	19 c0       	rjmp	.+50     	; 0x898 <__stack+0x39>
	{

		/* Wait for empty transmit buffer */
		while ( !( UCSRA & (1<<UDRE)));
     866:	eb e2       	ldi	r30, 0x2B	; 43
     868:	f0 e0       	ldi	r31, 0x00	; 0
     86a:	80 81       	ld	r24, Z
     86c:	88 2f       	mov	r24, r24
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	80 72       	andi	r24, 0x20	; 32
     872:	90 70       	andi	r25, 0x00	; 0
     874:	00 97       	sbiw	r24, 0x00	; 0
     876:	b9 f3       	breq	.-18     	; 0x866 <__stack+0x7>
		/* Put data into buffer, sends the data */
		UDR = data[u16CountrLoopLoc];
     878:	ac e2       	ldi	r26, 0x2C	; 44
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	2b 81       	ldd	r18, Y+3	; 0x03
     87e:	3c 81       	ldd	r19, Y+4	; 0x04
     880:	89 81       	ldd	r24, Y+1	; 0x01
     882:	9a 81       	ldd	r25, Y+2	; 0x02
     884:	f9 01       	movw	r30, r18
     886:	e8 0f       	add	r30, r24
     888:	f9 1f       	adc	r31, r25
     88a:	80 81       	ld	r24, Z
     88c:	8c 93       	st	X, r24

void UART_Transmit(u8* data, u16 Len)
{
	/* Loop that */
	u16 u16CountrLoopLoc;
	for (u16CountrLoopLoc = 0; u16CountrLoopLoc < Len; u16CountrLoopLoc++)
     88e:	89 81       	ldd	r24, Y+1	; 0x01
     890:	9a 81       	ldd	r25, Y+2	; 0x02
     892:	01 96       	adiw	r24, 0x01	; 1
     894:	9a 83       	std	Y+2, r25	; 0x02
     896:	89 83       	std	Y+1, r24	; 0x01
     898:	29 81       	ldd	r18, Y+1	; 0x01
     89a:	3a 81       	ldd	r19, Y+2	; 0x02
     89c:	8d 81       	ldd	r24, Y+5	; 0x05
     89e:	9e 81       	ldd	r25, Y+6	; 0x06
     8a0:	28 17       	cp	r18, r24
     8a2:	39 07       	cpc	r19, r25
     8a4:	00 f3       	brcs	.-64     	; 0x866 <__stack+0x7>
		/* Wait for empty transmit buffer */
		while ( !( UCSRA & (1<<UDRE)));
		/* Put data into buffer, sends the data */
		UDR = data[u16CountrLoopLoc];
	}
}
     8a6:	26 96       	adiw	r28, 0x06	; 6
     8a8:	0f b6       	in	r0, 0x3f	; 63
     8aa:	f8 94       	cli
     8ac:	de bf       	out	0x3e, r29	; 62
     8ae:	0f be       	out	0x3f, r0	; 63
     8b0:	cd bf       	out	0x3d, r28	; 61
     8b2:	cf 91       	pop	r28
     8b4:	df 91       	pop	r29
     8b6:	08 95       	ret

000008b8 <UART_Receive>:


void UART_Receive(u8 *data, u16 *len)
{
     8b8:	df 93       	push	r29
     8ba:	cf 93       	push	r28
     8bc:	00 d0       	rcall	.+0      	; 0x8be <UART_Receive+0x6>
     8be:	00 d0       	rcall	.+0      	; 0x8c0 <UART_Receive+0x8>
     8c0:	00 d0       	rcall	.+0      	; 0x8c2 <UART_Receive+0xa>
     8c2:	cd b7       	in	r28, 0x3d	; 61
     8c4:	de b7       	in	r29, 0x3e	; 62
     8c6:	9c 83       	std	Y+4, r25	; 0x04
     8c8:	8b 83       	std	Y+3, r24	; 0x03
     8ca:	7e 83       	std	Y+6, r23	; 0x06
     8cc:	6d 83       	std	Y+5, r22	; 0x05
	u16 u16CountrLoopLoc;
	/* Disabling the Global interrupt to ensure*/
	GIE_DISABLE();
     8ce:	af e5       	ldi	r26, 0x5F	; 95
     8d0:	b0 e0       	ldi	r27, 0x00	; 0
     8d2:	ef e5       	ldi	r30, 0x5F	; 95
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
     8d6:	80 81       	ld	r24, Z
     8d8:	8f 77       	andi	r24, 0x7F	; 127
     8da:	8c 93       	st	X, r24
	/* Disable RX Interrupt */
	UCSRB &= ~(1<<RXCIE);
     8dc:	aa e2       	ldi	r26, 0x2A	; 42
     8de:	b0 e0       	ldi	r27, 0x00	; 0
     8e0:	ea e2       	ldi	r30, 0x2A	; 42
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	80 81       	ld	r24, Z
     8e6:	8f 77       	andi	r24, 0x7F	; 127
     8e8:	8c 93       	st	X, r24


	/* return the size of received data */
	*len = UART_data.RxBufferSize;
     8ea:	80 91 a6 00 	lds	r24, 0x00A6
     8ee:	88 2f       	mov	r24, r24
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	ed 81       	ldd	r30, Y+5	; 0x05
     8f4:	fe 81       	ldd	r31, Y+6	; 0x06
     8f6:	91 83       	std	Z+1, r25	; 0x01
     8f8:	80 83       	st	Z, r24

	/* return the received data into our given array */
	for (u16CountrLoopLoc = 0; u16CountrLoopLoc < UART_data.RxBufferSize; u16CountrLoopLoc++)
     8fa:	1a 82       	std	Y+2, r1	; 0x02
     8fc:	19 82       	std	Y+1, r1	; 0x01
     8fe:	13 c0       	rjmp	.+38     	; 0x926 <UART_Receive+0x6e>
	{
		data[u16CountrLoopLoc] = UART_data.RxBuffer[u16CountrLoopLoc];
     900:	2b 81       	ldd	r18, Y+3	; 0x03
     902:	3c 81       	ldd	r19, Y+4	; 0x04
     904:	89 81       	ldd	r24, Y+1	; 0x01
     906:	9a 81       	ldd	r25, Y+2	; 0x02
     908:	d9 01       	movw	r26, r18
     90a:	a8 0f       	add	r26, r24
     90c:	b9 1f       	adc	r27, r25
     90e:	89 81       	ldd	r24, Y+1	; 0x01
     910:	9a 81       	ldd	r25, Y+2	; 0x02
     912:	fc 01       	movw	r30, r24
     914:	e4 56       	subi	r30, 0x64	; 100
     916:	ff 4f       	sbci	r31, 0xFF	; 255
     918:	80 81       	ld	r24, Z
     91a:	8c 93       	st	X, r24

	/* return the size of received data */
	*len = UART_data.RxBufferSize;

	/* return the received data into our given array */
	for (u16CountrLoopLoc = 0; u16CountrLoopLoc < UART_data.RxBufferSize; u16CountrLoopLoc++)
     91c:	89 81       	ldd	r24, Y+1	; 0x01
     91e:	9a 81       	ldd	r25, Y+2	; 0x02
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	9a 83       	std	Y+2, r25	; 0x02
     924:	89 83       	std	Y+1, r24	; 0x01
     926:	80 91 a6 00 	lds	r24, 0x00A6
     92a:	28 2f       	mov	r18, r24
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	89 81       	ldd	r24, Y+1	; 0x01
     930:	9a 81       	ldd	r25, Y+2	; 0x02
     932:	82 17       	cp	r24, r18
     934:	93 07       	cpc	r25, r19
     936:	20 f3       	brcs	.-56     	; 0x900 <UART_Receive+0x48>
	{
		data[u16CountrLoopLoc] = UART_data.RxBuffer[u16CountrLoopLoc];
	}

	/* reset the buffer counter */
	UART_data.RxBufferSize = 0;
     938:	10 92 a6 00 	sts	0x00A6, r1

	/* Enable RX Interrupt */
	UCSRB |= (1<<RXCIE);
     93c:	aa e2       	ldi	r26, 0x2A	; 42
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	ea e2       	ldi	r30, 0x2A	; 42
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	80 81       	ld	r24, Z
     946:	80 68       	ori	r24, 0x80	; 128
     948:	8c 93       	st	X, r24
	/* Enabling the global interrupt */
	GIE_ENABLE();
     94a:	af e5       	ldi	r26, 0x5F	; 95
     94c:	b0 e0       	ldi	r27, 0x00	; 0
     94e:	ef e5       	ldi	r30, 0x5F	; 95
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	80 81       	ld	r24, Z
     954:	80 68       	ori	r24, 0x80	; 128
     956:	8c 93       	st	X, r24
}
     958:	26 96       	adiw	r28, 0x06	; 6
     95a:	0f b6       	in	r0, 0x3f	; 63
     95c:	f8 94       	cli
     95e:	de bf       	out	0x3e, r29	; 62
     960:	0f be       	out	0x3f, r0	; 63
     962:	cd bf       	out	0x3d, r28	; 61
     964:	cf 91       	pop	r28
     966:	df 91       	pop	r29
     968:	08 95       	ret

0000096a <UART_u8DataAvilable>:


/*  if UART buffer is not empty: return number of available bytes  */
u8 UART_u8DataAvilable(void)
{
     96a:	df 93       	push	r29
     96c:	cf 93       	push	r28
     96e:	cd b7       	in	r28, 0x3d	; 61
     970:	de b7       	in	r29, 0x3e	; 62
	return UART_data.RxBufferSize;
     972:	80 91 a6 00 	lds	r24, 0x00A6
}
     976:	cf 91       	pop	r28
     978:	df 91       	pop	r29
     97a:	08 95       	ret

0000097c <UART_u8ReadByte>:

/* return last byte in UART buffer */
u8 UART_u8ReadByte(void)
{
     97c:	df 93       	push	r29
     97e:	cf 93       	push	r28
     980:	cd b7       	in	r28, 0x3d	; 61
     982:	de b7       	in	r29, 0x3e	; 62
	UART_data.RxBufferSize--;
     984:	80 91 a6 00 	lds	r24, 0x00A6
     988:	81 50       	subi	r24, 0x01	; 1
     98a:	80 93 a6 00 	sts	0x00A6, r24
	return UART_data.RxBuffer[UART_data.RxBufferSize];
     98e:	80 91 a6 00 	lds	r24, 0x00A6
     992:	88 2f       	mov	r24, r24
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	fc 01       	movw	r30, r24
     998:	e4 56       	subi	r30, 0x64	; 100
     99a:	ff 4f       	sbci	r31, 0xFF	; 255
     99c:	80 81       	ld	r24, Z
}
     99e:	cf 91       	pop	r28
     9a0:	df 91       	pop	r29
     9a2:	08 95       	ret

000009a4 <__vector_13>:

/* Enabling USART, Rx Complete Based on vector table from data sheet page 42*/
void __vector_13 (void) __attribute__((signal, used));
void __vector_13 (void)
{
     9a4:	1f 92       	push	r1
     9a6:	0f 92       	push	r0
     9a8:	0f b6       	in	r0, 0x3f	; 63
     9aa:	0f 92       	push	r0
     9ac:	11 24       	eor	r1, r1
     9ae:	2f 93       	push	r18
     9b0:	8f 93       	push	r24
     9b2:	9f 93       	push	r25
     9b4:	ef 93       	push	r30
     9b6:	ff 93       	push	r31
     9b8:	df 93       	push	r29
     9ba:	cf 93       	push	r28
     9bc:	cd b7       	in	r28, 0x3d	; 61
     9be:	de b7       	in	r29, 0x3e	; 62
	if(UART_data.RxBufferSize < 9)
     9c0:	80 91 a6 00 	lds	r24, 0x00A6
     9c4:	89 30       	cpi	r24, 0x09	; 9
     9c6:	80 f4       	brcc	.+32     	; 0x9e8 <__vector_13+0x44>
	{
		UART_data.RxBuffer[UART_data.RxBufferSize] = UDR;
     9c8:	80 91 a6 00 	lds	r24, 0x00A6
     9cc:	88 2f       	mov	r24, r24
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	ec e2       	ldi	r30, 0x2C	; 44
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	20 81       	ld	r18, Z
     9d6:	fc 01       	movw	r30, r24
     9d8:	e4 56       	subi	r30, 0x64	; 100
     9da:	ff 4f       	sbci	r31, 0xFF	; 255
     9dc:	20 83       	st	Z, r18
		UART_data.RxBufferSize++;
     9de:	80 91 a6 00 	lds	r24, 0x00A6
     9e2:	8f 5f       	subi	r24, 0xFF	; 255
     9e4:	80 93 a6 00 	sts	0x00A6, r24
	}
}
     9e8:	cf 91       	pop	r28
     9ea:	df 91       	pop	r29
     9ec:	ff 91       	pop	r31
     9ee:	ef 91       	pop	r30
     9f0:	9f 91       	pop	r25
     9f2:	8f 91       	pop	r24
     9f4:	2f 91       	pop	r18
     9f6:	0f 90       	pop	r0
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	0f 90       	pop	r0
     9fc:	1f 90       	pop	r1
     9fe:	18 95       	reti

00000a00 <voidRecieveFunc>:
#include "STD_TYPES.h"
#include "DIO_int.h"
#include "UART.h"


void voidRecieveFunc(void){
     a00:	df 93       	push	r29
     a02:	cf 93       	push	r28
     a04:	00 d0       	rcall	.+0      	; 0xa06 <voidRecieveFunc+0x6>
     a06:	0f 92       	push	r0
     a08:	cd b7       	in	r28, 0x3d	; 61
     a0a:	de b7       	in	r29, 0x3e	; 62
	u8 data;
	u16 len;
	UART_Receive(&data, &len);
     a0c:	9e 01       	movw	r18, r28
     a0e:	2e 5f       	subi	r18, 0xFE	; 254
     a10:	3f 4f       	sbci	r19, 0xFF	; 255
     a12:	ce 01       	movw	r24, r28
     a14:	01 96       	adiw	r24, 0x01	; 1
     a16:	b9 01       	movw	r22, r18
     a18:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <UART_Receive>
	if (0xFF == data)
     a1c:	89 81       	ldd	r24, Y+1	; 0x01
     a1e:	8f 3f       	cpi	r24, 0xFF	; 255
     a20:	29 f4       	brne	.+10     	; 0xa2c <voidRecieveFunc+0x2c>
	{
		DIO_voidSetPinValue(8, DIO_u8_HIGH);
     a22:	88 e0       	ldi	r24, 0x08	; 8
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
     a2a:	04 c0       	rjmp	.+8      	; 0xa34 <voidRecieveFunc+0x34>
	}
	else
	{
		DIO_voidSetPinValue(8, DIO_u8_LOW);
     a2c:	88 e0       	ldi	r24, 0x08	; 8
     a2e:	61 e0       	ldi	r22, 0x01	; 1
     a30:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	}
}
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0
     a3a:	cf 91       	pop	r28
     a3c:	df 91       	pop	r29
     a3e:	08 95       	ret

00000a40 <voidSendFunc>:

void voidSendFunc(void)
{
     a40:	df 93       	push	r29
     a42:	cf 93       	push	r28
     a44:	00 d0       	rcall	.+0      	; 0xa46 <voidSendFunc+0x6>
     a46:	0f 92       	push	r0
     a48:	cd b7       	in	r28, 0x3d	; 61
     a4a:	de b7       	in	r29, 0x3e	; 62
	u8 data = 0xFF;
     a4c:	8f ef       	ldi	r24, 0xFF	; 255
     a4e:	8b 83       	std	Y+3, r24	; 0x03
	u16 len = 1; // Length in Byte
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	9a 83       	std	Y+2, r25	; 0x02
     a56:	89 83       	std	Y+1, r24	; 0x01
	UART_Transmit(&data, len);
     a58:	ce 01       	movw	r24, r28
     a5a:	03 96       	adiw	r24, 0x03	; 3
     a5c:	29 81       	ldd	r18, Y+1	; 0x01
     a5e:	3a 81       	ldd	r19, Y+2	; 0x02
     a60:	b9 01       	movw	r22, r18
     a62:	0e 94 25 04 	call	0x84a	; 0x84a <UART_Transmit>
}
     a66:	0f 90       	pop	r0
     a68:	0f 90       	pop	r0
     a6a:	0f 90       	pop	r0
     a6c:	cf 91       	pop	r28
     a6e:	df 91       	pop	r29
     a70:	08 95       	ret

00000a72 <KP_u16GetStatus>:
/*  this functions gets you all pressed buttons */
/************************************************/
static u16 KP_u16Status = 0;

u16 KP_u16GetStatus(void)
{
     a72:	df 93       	push	r29
     a74:	cf 93       	push	r28
     a76:	cd b7       	in	r28, 0x3d	; 61
     a78:	de b7       	in	r29, 0x3e	; 62
	KP_u16Status = 0;
     a7a:	10 92 a8 00 	sts	0x00A8, r1
     a7e:	10 92 a7 00 	sts	0x00A7, r1
	/* activate column 1 */
	DIO_voidSetPinValue (KP_u8_OUT_1, DIO_u8_LOW);
     a82:	8b e0       	ldi	r24, 0x0B	; 11
     a84:	61 e0       	ldi	r22, 0x01	; 1
     a86:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (KP_u8_OUT_2, DIO_u8_HIGH);
     a8a:	8a e0       	ldi	r24, 0x0A	; 10
     a8c:	60 e0       	ldi	r22, 0x00	; 0
     a8e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (KP_u8_OUT_3, DIO_u8_HIGH);
     a92:	89 e0       	ldi	r24, 0x09	; 9
     a94:	60 e0       	ldi	r22, 0x00	; 0
     a96:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (KP_u8_OUT_4, DIO_u8_HIGH);
     a9a:	88 e0       	ldi	r24, 0x08	; 8
     a9c:	60 e0       	ldi	r22, 0x00	; 0
     a9e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	KP_voidGetColStatus(0);
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	0e 94 94 05 	call	0xb28	; 0xb28 <KP_voidGetColStatus>

	/* activate column 2 */
	DIO_voidSetPinValue (KP_u8_OUT_1, DIO_u8_HIGH);
     aa8:	8b e0       	ldi	r24, 0x0B	; 11
     aaa:	60 e0       	ldi	r22, 0x00	; 0
     aac:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (KP_u8_OUT_2, DIO_u8_LOW);
     ab0:	8a e0       	ldi	r24, 0x0A	; 10
     ab2:	61 e0       	ldi	r22, 0x01	; 1
     ab4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (KP_u8_OUT_3, DIO_u8_HIGH);
     ab8:	89 e0       	ldi	r24, 0x09	; 9
     aba:	60 e0       	ldi	r22, 0x00	; 0
     abc:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (KP_u8_OUT_4, DIO_u8_HIGH);
     ac0:	88 e0       	ldi	r24, 0x08	; 8
     ac2:	60 e0       	ldi	r22, 0x00	; 0
     ac4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	KP_voidGetColStatus(1);
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	0e 94 94 05 	call	0xb28	; 0xb28 <KP_voidGetColStatus>

	/* activate column 3 */
	DIO_voidSetPinValue (KP_u8_OUT_1, DIO_u8_HIGH);
     ace:	8b e0       	ldi	r24, 0x0B	; 11
     ad0:	60 e0       	ldi	r22, 0x00	; 0
     ad2:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (KP_u8_OUT_2, DIO_u8_HIGH);
     ad6:	8a e0       	ldi	r24, 0x0A	; 10
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (KP_u8_OUT_3, DIO_u8_LOW);
     ade:	89 e0       	ldi	r24, 0x09	; 9
     ae0:	61 e0       	ldi	r22, 0x01	; 1
     ae2:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (KP_u8_OUT_4, DIO_u8_HIGH);
     ae6:	88 e0       	ldi	r24, 0x08	; 8
     ae8:	60 e0       	ldi	r22, 0x00	; 0
     aea:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	KP_voidGetColStatus(2);
     aee:	82 e0       	ldi	r24, 0x02	; 2
     af0:	0e 94 94 05 	call	0xb28	; 0xb28 <KP_voidGetColStatus>

	/* activate column 4 */
	DIO_voidSetPinValue (KP_u8_OUT_1, DIO_u8_HIGH);
     af4:	8b e0       	ldi	r24, 0x0B	; 11
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (KP_u8_OUT_2, DIO_u8_HIGH);
     afc:	8a e0       	ldi	r24, 0x0A	; 10
     afe:	60 e0       	ldi	r22, 0x00	; 0
     b00:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (KP_u8_OUT_3, DIO_u8_HIGH);
     b04:	89 e0       	ldi	r24, 0x09	; 9
     b06:	60 e0       	ldi	r22, 0x00	; 0
     b08:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (KP_u8_OUT_4, DIO_u8_LOW);
     b0c:	88 e0       	ldi	r24, 0x08	; 8
     b0e:	61 e0       	ldi	r22, 0x01	; 1
     b10:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	KP_voidGetColStatus(3);
     b14:	83 e0       	ldi	r24, 0x03	; 3
     b16:	0e 94 94 05 	call	0xb28	; 0xb28 <KP_voidGetColStatus>
	return KP_u16Status;
     b1a:	80 91 a7 00 	lds	r24, 0x00A7
     b1e:	90 91 a8 00 	lds	r25, 0x00A8
}
     b22:	cf 91       	pop	r28
     b24:	df 91       	pop	r29
     b26:	08 95       	ret

00000b28 <KP_voidGetColStatus>:

void KP_voidGetColStatus(u8 col)
{
     b28:	df 93       	push	r29
     b2a:	cf 93       	push	r28
     b2c:	0f 92       	push	r0
     b2e:	cd b7       	in	r28, 0x3d	; 61
     b30:	de b7       	in	r29, 0x3e	; 62
     b32:	89 83       	std	Y+1, r24	; 0x01
	/* check for key 0 + n */
	if(DIO_u8GetPinValue(KP_u8_IN_1) == DIO_u8_LOW)
     b34:	8f e0       	ldi	r24, 0x0F	; 15
     b36:	0e 94 b5 02 	call	0x56a	; 0x56a <DIO_u8GetPinValue>
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	a9 f4       	brne	.+42     	; 0xb68 <KP_voidGetColStatus+0x40>
	{
		SET_BIT(KP_u16Status,  col);
     b3e:	89 81       	ldd	r24, Y+1	; 0x01
     b40:	28 2f       	mov	r18, r24
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	02 c0       	rjmp	.+4      	; 0xb4e <KP_voidGetColStatus+0x26>
     b4a:	88 0f       	add	r24, r24
     b4c:	99 1f       	adc	r25, r25
     b4e:	2a 95       	dec	r18
     b50:	e2 f7       	brpl	.-8      	; 0xb4a <KP_voidGetColStatus+0x22>
     b52:	9c 01       	movw	r18, r24
     b54:	80 91 a7 00 	lds	r24, 0x00A7
     b58:	90 91 a8 00 	lds	r25, 0x00A8
     b5c:	82 2b       	or	r24, r18
     b5e:	93 2b       	or	r25, r19
     b60:	90 93 a8 00 	sts	0x00A8, r25
     b64:	80 93 a7 00 	sts	0x00A7, r24
	}
	/* check for key 0 + n */
	if(DIO_u8GetPinValue(KP_u8_IN_2) == DIO_u8_LOW)
     b68:	8e e0       	ldi	r24, 0x0E	; 14
     b6a:	0e 94 b5 02 	call	0x56a	; 0x56a <DIO_u8GetPinValue>
     b6e:	81 30       	cpi	r24, 0x01	; 1
     b70:	c1 f4       	brne	.+48     	; 0xba2 <KP_voidGetColStatus+0x7a>
	{
		SET_BIT(KP_u16Status, 4 + col);
     b72:	89 81       	ldd	r24, Y+1	; 0x01
     b74:	88 2f       	mov	r24, r24
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	9c 01       	movw	r18, r24
     b7a:	2c 5f       	subi	r18, 0xFC	; 252
     b7c:	3f 4f       	sbci	r19, 0xFF	; 255
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	02 c0       	rjmp	.+4      	; 0xb88 <KP_voidGetColStatus+0x60>
     b84:	88 0f       	add	r24, r24
     b86:	99 1f       	adc	r25, r25
     b88:	2a 95       	dec	r18
     b8a:	e2 f7       	brpl	.-8      	; 0xb84 <KP_voidGetColStatus+0x5c>
     b8c:	9c 01       	movw	r18, r24
     b8e:	80 91 a7 00 	lds	r24, 0x00A7
     b92:	90 91 a8 00 	lds	r25, 0x00A8
     b96:	82 2b       	or	r24, r18
     b98:	93 2b       	or	r25, r19
     b9a:	90 93 a8 00 	sts	0x00A8, r25
     b9e:	80 93 a7 00 	sts	0x00A7, r24
	}
	/* check for key 0 + n */
	if(DIO_u8GetPinValue(KP_u8_IN_3) == DIO_u8_LOW)
     ba2:	8d e0       	ldi	r24, 0x0D	; 13
     ba4:	0e 94 b5 02 	call	0x56a	; 0x56a <DIO_u8GetPinValue>
     ba8:	81 30       	cpi	r24, 0x01	; 1
     baa:	c1 f4       	brne	.+48     	; 0xbdc <KP_voidGetColStatus+0xb4>
	{
		SET_BIT(KP_u16Status, 8 + col);
     bac:	89 81       	ldd	r24, Y+1	; 0x01
     bae:	88 2f       	mov	r24, r24
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	9c 01       	movw	r18, r24
     bb4:	28 5f       	subi	r18, 0xF8	; 248
     bb6:	3f 4f       	sbci	r19, 0xFF	; 255
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <KP_voidGetColStatus+0x9a>
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	2a 95       	dec	r18
     bc4:	e2 f7       	brpl	.-8      	; 0xbbe <KP_voidGetColStatus+0x96>
     bc6:	9c 01       	movw	r18, r24
     bc8:	80 91 a7 00 	lds	r24, 0x00A7
     bcc:	90 91 a8 00 	lds	r25, 0x00A8
     bd0:	82 2b       	or	r24, r18
     bd2:	93 2b       	or	r25, r19
     bd4:	90 93 a8 00 	sts	0x00A8, r25
     bd8:	80 93 a7 00 	sts	0x00A7, r24
	}

	/* check for key 0 + n */
	if(DIO_u8GetPinValue(KP_u8_IN_4) == DIO_u8_LOW)
     bdc:	8c e0       	ldi	r24, 0x0C	; 12
     bde:	0e 94 b5 02 	call	0x56a	; 0x56a <DIO_u8GetPinValue>
     be2:	81 30       	cpi	r24, 0x01	; 1
     be4:	c1 f4       	brne	.+48     	; 0xc16 <KP_voidGetColStatus+0xee>
	{
		SET_BIT(KP_u16Status, 12 + col);
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	88 2f       	mov	r24, r24
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	9c 01       	movw	r18, r24
     bee:	24 5f       	subi	r18, 0xF4	; 244
     bf0:	3f 4f       	sbci	r19, 0xFF	; 255
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <KP_voidGetColStatus+0xd4>
     bf8:	88 0f       	add	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	2a 95       	dec	r18
     bfe:	e2 f7       	brpl	.-8      	; 0xbf8 <KP_voidGetColStatus+0xd0>
     c00:	9c 01       	movw	r18, r24
     c02:	80 91 a7 00 	lds	r24, 0x00A7
     c06:	90 91 a8 00 	lds	r25, 0x00A8
     c0a:	82 2b       	or	r24, r18
     c0c:	93 2b       	or	r25, r19
     c0e:	90 93 a8 00 	sts	0x00A8, r25
     c12:	80 93 a7 00 	sts	0x00A7, r24
	}
}
     c16:	0f 90       	pop	r0
     c18:	cf 91       	pop	r28
     c1a:	df 91       	pop	r29
     c1c:	08 95       	ret

00000c1e <main>:
#include "KP_int.h"
#include "sw.h"
#include "protocol.h"
#include "UART_Rx_TEST.h"
void main(void)
{
     c1e:	df 93       	push	r29
     c20:	cf 93       	push	r28
     c22:	cd b7       	in	r28, 0x3d	; 61
     c24:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInitialize();
     c26:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_voidInitialize>

	TIMER0_voidInit();
     c2a:	0e 94 c2 03 	call	0x784	; 0x784 <TIMER0_voidInit>
	/*enable uart*/
	UART_Init();
     c2e:	0e 94 f7 03 	call	0x7ee	; 0x7ee <UART_Init>
	/*Setting Internal PullUp Resistor for The keypad INPUT ROWS */
	DIO_voidSetPinValue(DIO_u8_PIN_12, DIO_u8_HIGH);
     c32:	8c e0       	ldi	r24, 0x0C	; 12
     c34:	60 e0       	ldi	r22, 0x00	; 0
     c36:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PIN_13, DIO_u8_HIGH);
     c3a:	8d e0       	ldi	r24, 0x0D	; 13
     c3c:	60 e0       	ldi	r22, 0x00	; 0
     c3e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PIN_14, DIO_u8_HIGH);
     c42:	8e e0       	ldi	r24, 0x0E	; 14
     c44:	60 e0       	ldi	r22, 0x00	; 0
     c46:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PIN_15, DIO_u8_HIGH);
     c4a:	8f e0       	ldi	r24, 0x0F	; 15
     c4c:	60 e0       	ldi	r22, 0x00	; 0
     c4e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	/*Setting Internal PullUp Resistor for The Switch1, 2 INPUT */
	DIO_voidSetPinValue(DIO_u8_PIN_29, DIO_u8_HIGH);
     c52:	8d e1       	ldi	r24, 0x1D	; 29
     c54:	60 e0       	ldi	r22, 0x00	; 0
     c56:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PIN_28, DIO_u8_HIGH);
     c5a:	8c e1       	ldi	r24, 0x1C	; 28
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>


	GIE_ENABLE();
     c62:	af e5       	ldi	r26, 0x5F	; 95
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	ef e5       	ldi	r30, 0x5F	; 95
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	80 68       	ori	r24, 0x80	; 128
     c6e:	8c 93       	st	X, r24
	OS_voidStart();
     c70:	0e 94 45 03 	call	0x68a	; 0x68a <OS_voidStart>

}
     c74:	cf 91       	pop	r28
     c76:	df 91       	pop	r29
     c78:	08 95       	ret

00000c7a <protcole_task>:
#include "UART_cfg.h"
#include "protocol.h"
#include "task2.h"
#include "KP_int.h"
void protcole_task(void)
{
     c7a:	df 93       	push	r29
     c7c:	cf 93       	push	r28
     c7e:	00 d0       	rcall	.+0      	; 0xc80 <protcole_task+0x6>
     c80:	00 d0       	rcall	.+0      	; 0xc82 <protcole_task+0x8>
     c82:	0f 92       	push	r0
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62
	u8 u8byte = 0;
     c88:	1b 82       	std	Y+3, r1	; 0x03
	u8 u8ID, u8Val;
	if(UART_u8DataAvilable())
     c8a:	0e 94 b5 04 	call	0x96a	; 0x96a <UART_u8DataAvilable>
     c8e:	88 23       	and	r24, r24
     c90:	d9 f1       	breq	.+118    	; 0xd08 <protcole_task+0x8e>
	{

		/* get one received byte */
		u8byte = UART_u8ReadByte();
     c92:	0e 94 be 04 	call	0x97c	; 0x97c <UART_u8ReadByte>
     c96:	8b 83       	std	Y+3, r24	; 0x03
		/* Split it to id and value */
		u8ID = (u8byte >> 4) ;
     c98:	8b 81       	ldd	r24, Y+3	; 0x03
     c9a:	82 95       	swap	r24
     c9c:	8f 70       	andi	r24, 0x0F	; 15
     c9e:	8a 83       	std	Y+2, r24	; 0x02
		/* Anding the u8Val with 00001111, to eliminate the ID and extract just the value */
		u8Val = u8byte & 0x0F;
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	8f 70       	andi	r24, 0x0F	; 15
     ca4:	89 83       	std	Y+1, r24	; 0x01

		switch(u8ID)
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	28 2f       	mov	r18, r24
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	3d 83       	std	Y+5, r19	; 0x05
     cae:	2c 83       	std	Y+4, r18	; 0x04
     cb0:	8c 81       	ldd	r24, Y+4	; 0x04
     cb2:	9d 81       	ldd	r25, Y+5	; 0x05
     cb4:	87 30       	cpi	r24, 0x07	; 7
     cb6:	91 05       	cpc	r25, r1
     cb8:	b9 f0       	breq	.+46     	; 0xce8 <protcole_task+0x6e>
     cba:	2c 81       	ldd	r18, Y+4	; 0x04
     cbc:	3d 81       	ldd	r19, Y+5	; 0x05
     cbe:	2d 30       	cpi	r18, 0x0D	; 13
     cc0:	31 05       	cpc	r19, r1
     cc2:	f9 f0       	breq	.+62     	; 0xd02 <protcole_task+0x88>
     cc4:	8c 81       	ldd	r24, Y+4	; 0x04
     cc6:	9d 81       	ldd	r25, Y+5	; 0x05
     cc8:	85 30       	cpi	r24, 0x05	; 5
     cca:	91 05       	cpc	r25, r1
     ccc:	e9 f4       	brne	.+58     	; 0xd08 <protcole_task+0x8e>
		{
		case ID_B1:
			if(u8Val == PRESSED)
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	88 23       	and	r24, r24
     cd2:	29 f4       	brne	.+10     	; 0xcde <protcole_task+0x64>
			{
				/*Set LED High*/
				DIO_voidSetPinValue(DIO_u8_PIN_26, DIO_u8_HIGH);
     cd4:	8a e1       	ldi	r24, 0x1A	; 26
     cd6:	60 e0       	ldi	r22, 0x00	; 0
     cd8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
     cdc:	15 c0       	rjmp	.+42     	; 0xd08 <protcole_task+0x8e>
			}
			else
			{
				/*Set LED LOW*/
				DIO_voidSetPinValue(DIO_u8_PIN_26, DIO_u8_LOW);
     cde:	8a e1       	ldi	r24, 0x1A	; 26
     ce0:	61 e0       	ldi	r22, 0x01	; 1
     ce2:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
     ce6:	10 c0       	rjmp	.+32     	; 0xd08 <protcole_task+0x8e>
			}
			break;

		case ID_B2:
			if(u8Val == PRESSED)
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	88 23       	and	r24, r24
     cec:	29 f4       	brne	.+10     	; 0xcf8 <protcole_task+0x7e>
			{
				/* Set LED HIGH */
				DIO_voidSetPinValue(DIO_u8_PIN_27, DIO_u8_HIGH);
     cee:	8b e1       	ldi	r24, 0x1B	; 27
     cf0:	60 e0       	ldi	r22, 0x00	; 0
     cf2:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
     cf6:	08 c0       	rjmp	.+16     	; 0xd08 <protcole_task+0x8e>
			}
			else
			{
				/*Set LED LOW*/
				DIO_voidSetPinValue(DIO_u8_PIN_27, DIO_u8_LOW);
     cf8:	8b e1       	ldi	r24, 0x1B	; 27
     cfa:	61 e0       	ldi	r22, 0x01	; 1
     cfc:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
     d00:	03 c0       	rjmp	.+6      	; 0xd08 <protcole_task+0x8e>
			}
			break;

		case ID_MOD_SWITCH:
			u8CurrentMode = u8Val;
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	80 93 c2 00 	sts	0x00C2, r24
		case ID_KP_VALUE:
			break;

		}
	}
}
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	cf 91       	pop	r28
     d14:	df 91       	pop	r29
     d16:	08 95       	ret

00000d18 <SW_u8GetState>:


u8 const u8Link_To_Dio [] = {DIO_u8_PIN_29, DIO_u8_PIN_28};
/* get the switch state */
u8 SW_u8GetState(u8 u8SwitchPin)
{
     d18:	df 93       	push	r29
     d1a:	cf 93       	push	r28
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <SW_u8GetState+0x6>
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
     d22:	89 83       	std	Y+1, r24	; 0x01
	return (u8SwState [u8SwitchPin] == SW_MODE);
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	88 2f       	mov	r24, r24
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	fc 01       	movw	r30, r24
     d2c:	e7 55       	subi	r30, 0x57	; 87
     d2e:	ff 4f       	sbci	r31, 0xFF	; 255
     d30:	80 81       	ld	r24, Z
     d32:	1a 82       	std	Y+2, r1	; 0x02
     d34:	81 30       	cpi	r24, 0x01	; 1
     d36:	11 f4       	brne	.+4      	; 0xd3c <SW_u8GetState+0x24>
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	8a 83       	std	Y+2, r24	; 0x02
     d3c:	8a 81       	ldd	r24, Y+2	; 0x02
}
     d3e:	0f 90       	pop	r0
     d40:	0f 90       	pop	r0
     d42:	cf 91       	pop	r28
     d44:	df 91       	pop	r29
     d46:	08 95       	ret

00000d48 <SW_u16GetHoldTime>:

/* returns time in ms which I have been holding the switch */
u16 SW_u16GetHoldTime(void)
{
     d48:	df 93       	push	r29
     d4a:	cf 93       	push	r28
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62
	return SW_u16wHoldTime;
     d50:	80 91 ab 00 	lds	r24, 0x00AB
     d54:	90 91 ac 00 	lds	r25, 0x00AC
}
     d58:	cf 91       	pop	r28
     d5a:	df 91       	pop	r29
     d5c:	08 95       	ret

00000d5e <SW_voidSwTask>:

/* periodic switch task */
void SW_voidSwTask(void)
{
     d5e:	df 93       	push	r29
     d60:	cf 93       	push	r28
     d62:	0f 92       	push	r0
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
	static u8 u8CounterLoop1 ;
	static u16 u8Cnt [NUMBER_OF_SW] = {0};
	static u8 u8PrevState [NUMBER_OF_SW] = {0};

	for(u8CounterLoop1 = 0; u8CounterLoop1 < NUMBER_OF_SW; u8CounterLoop1++){
     d68:	10 92 b3 00 	sts	0x00B3, r1
     d6c:	7a c0       	rjmp	.+244    	; 0xe62 <SW_voidSwTask+0x104>
		u8 u8CurrentState = DIO_u8GetPinValue(u8Link_To_Dio[u8CounterLoop1]);
     d6e:	80 91 b3 00 	lds	r24, 0x00B3
     d72:	88 2f       	mov	r24, r24
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	fc 01       	movw	r30, r24
     d78:	e4 57       	subi	r30, 0x74	; 116
     d7a:	ff 4f       	sbci	r31, 0xFF	; 255
     d7c:	80 81       	ld	r24, Z
     d7e:	0e 94 b5 02 	call	0x56a	; 0x56a <DIO_u8GetPinValue>
     d82:	89 83       	std	Y+1, r24	; 0x01
			if(u8CurrentState == u8PrevState[u8CounterLoop1])
     d84:	80 91 b3 00 	lds	r24, 0x00B3
     d88:	88 2f       	mov	r24, r24
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	fc 01       	movw	r30, r24
     d8e:	e3 55       	subi	r30, 0x53	; 83
     d90:	ff 4f       	sbci	r31, 0xFF	; 255
     d92:	90 81       	ld	r25, Z
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	98 17       	cp	r25, r24
     d98:	09 f0       	breq	.+2      	; 0xd9c <SW_voidSwTask+0x3e>
     d9a:	48 c0       	rjmp	.+144    	; 0xe2c <SW_voidSwTask+0xce>
			{
				if(u8Cnt[u8CounterLoop1] >= NUMBER_OF_SAMPLES)
     d9c:	80 91 b3 00 	lds	r24, 0x00B3
     da0:	88 2f       	mov	r24, r24
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	fc 01       	movw	r30, r24
     daa:	e1 55       	subi	r30, 0x51	; 81
     dac:	ff 4f       	sbci	r31, 0xFF	; 255
     dae:	80 81       	ld	r24, Z
     db0:	91 81       	ldd	r25, Z+1	; 0x01
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	91 05       	cpc	r25, r1
     db6:	10 f1       	brcs	.+68     	; 0xdfc <SW_voidSwTask+0x9e>
				{
					u8SwState [u8CounterLoop1] = u8CurrentState;
     db8:	80 91 b3 00 	lds	r24, 0x00B3
     dbc:	88 2f       	mov	r24, r24
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	fc 01       	movw	r30, r24
     dc2:	e7 55       	subi	r30, 0x57	; 87
     dc4:	ff 4f       	sbci	r31, 0xFF	; 255
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	80 83       	st	Z, r24
					if(u8SwState [u8CounterLoop1] == SW_MODE)
     dca:	80 91 b3 00 	lds	r24, 0x00B3
     dce:	88 2f       	mov	r24, r24
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	fc 01       	movw	r30, r24
     dd4:	e7 55       	subi	r30, 0x57	; 87
     dd6:	ff 4f       	sbci	r31, 0xFF	; 255
     dd8:	80 81       	ld	r24, Z
     dda:	81 30       	cpi	r24, 0x01	; 1
     ddc:	51 f4       	brne	.+20     	; 0xdf2 <SW_voidSwTask+0x94>
					{
						SW_u16wHoldTime += NUMBER_OF_SAMPLES;
     dde:	80 91 ab 00 	lds	r24, 0x00AB
     de2:	90 91 ac 00 	lds	r25, 0x00AC
     de6:	02 96       	adiw	r24, 0x02	; 2
     de8:	90 93 ac 00 	sts	0x00AC, r25
     dec:	80 93 ab 00 	sts	0x00AB, r24
     df0:	2a c0       	rjmp	.+84     	; 0xe46 <SW_voidSwTask+0xe8>
					}
					else
					{
						SW_u16wHoldTime = 0;
     df2:	10 92 ac 00 	sts	0x00AC, r1
     df6:	10 92 ab 00 	sts	0x00AB, r1
     dfa:	25 c0       	rjmp	.+74     	; 0xe46 <SW_voidSwTask+0xe8>
					}
				}
				else
				{
					u8Cnt[u8CounterLoop1]++;
     dfc:	80 91 b3 00 	lds	r24, 0x00B3
     e00:	28 2f       	mov	r18, r24
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	c9 01       	movw	r24, r18
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	fc 01       	movw	r30, r24
     e0c:	e1 55       	subi	r30, 0x51	; 81
     e0e:	ff 4f       	sbci	r31, 0xFF	; 255
     e10:	80 81       	ld	r24, Z
     e12:	91 81       	ldd	r25, Z+1	; 0x01
     e14:	ac 01       	movw	r20, r24
     e16:	4f 5f       	subi	r20, 0xFF	; 255
     e18:	5f 4f       	sbci	r21, 0xFF	; 255
     e1a:	c9 01       	movw	r24, r18
     e1c:	88 0f       	add	r24, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	fc 01       	movw	r30, r24
     e22:	e1 55       	subi	r30, 0x51	; 81
     e24:	ff 4f       	sbci	r31, 0xFF	; 255
     e26:	51 83       	std	Z+1, r21	; 0x01
     e28:	40 83       	st	Z, r20
     e2a:	0d c0       	rjmp	.+26     	; 0xe46 <SW_voidSwTask+0xe8>
				}
			}
			else
			{
				u8Cnt[u8CounterLoop1] = 1;
     e2c:	80 91 b3 00 	lds	r24, 0x00B3
     e30:	88 2f       	mov	r24, r24
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	fc 01       	movw	r30, r24
     e3a:	e1 55       	subi	r30, 0x51	; 81
     e3c:	ff 4f       	sbci	r31, 0xFF	; 255
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	91 83       	std	Z+1, r25	; 0x01
     e44:	80 83       	st	Z, r24
			}
			u8PrevState[u8CounterLoop1] = u8CurrentState;
     e46:	80 91 b3 00 	lds	r24, 0x00B3
     e4a:	88 2f       	mov	r24, r24
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	fc 01       	movw	r30, r24
     e50:	e3 55       	subi	r30, 0x53	; 83
     e52:	ff 4f       	sbci	r31, 0xFF	; 255
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	80 83       	st	Z, r24
{
	static u8 u8CounterLoop1 ;
	static u16 u8Cnt [NUMBER_OF_SW] = {0};
	static u8 u8PrevState [NUMBER_OF_SW] = {0};

	for(u8CounterLoop1 = 0; u8CounterLoop1 < NUMBER_OF_SW; u8CounterLoop1++){
     e58:	80 91 b3 00 	lds	r24, 0x00B3
     e5c:	8f 5f       	subi	r24, 0xFF	; 255
     e5e:	80 93 b3 00 	sts	0x00B3, r24
     e62:	80 91 b3 00 	lds	r24, 0x00B3
     e66:	82 30       	cpi	r24, 0x02	; 2
     e68:	08 f4       	brcc	.+2      	; 0xe6c <SW_voidSwTask+0x10e>
     e6a:	81 cf       	rjmp	.-254    	; 0xd6e <SW_voidSwTask+0x10>
			}
			u8PrevState[u8CounterLoop1] = u8CurrentState;
	}


}
     e6c:	0f 90       	pop	r0
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <voidTask1>:
 u8 counterSec = 0;
 u8 countermin = 0;
 u8 counterhr = 0;

void voidTask1(void)
{
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62

	counterSec++;
     e7c:	80 91 b4 00 	lds	r24, 0x00B4
     e80:	8f 5f       	subi	r24, 0xFF	; 255
     e82:	80 93 b4 00 	sts	0x00B4, r24
	if(counterSec<60)
     e86:	80 91 b4 00 	lds	r24, 0x00B4
     e8a:	8c 33       	cpi	r24, 0x3C	; 60
     e8c:	90 f4       	brcc	.+36     	; 0xeb2 <voidTask1+0x3e>
	{
		Sec1 = counterSec/10;// Left 7Seg
     e8e:	80 91 b4 00 	lds	r24, 0x00B4
     e92:	9a e0       	ldi	r25, 0x0A	; 10
     e94:	69 2f       	mov	r22, r25
     e96:	0e 94 4e 09 	call	0x129c	; 0x129c <__udivmodqi4>
     e9a:	80 93 bd 00 	sts	0x00BD, r24
		Sec2 = counterSec%10;// Right 7Seg
     e9e:	80 91 b4 00 	lds	r24, 0x00B4
     ea2:	9a e0       	ldi	r25, 0x0A	; 10
     ea4:	69 2f       	mov	r22, r25
     ea6:	0e 94 4e 09 	call	0x129c	; 0x129c <__udivmodqi4>
     eaa:	89 2f       	mov	r24, r25
     eac:	80 93 be 00 	sts	0x00BE, r24
     eb0:	07 c0       	rjmp	.+14     	; 0xec0 <voidTask1+0x4c>
	}
	else
	{
		counterSec=0;
     eb2:	10 92 b4 00 	sts	0x00B4, r1
		countermin++;
     eb6:	80 91 b5 00 	lds	r24, 0x00B5
     eba:	8f 5f       	subi	r24, 0xFF	; 255
     ebc:	80 93 b5 00 	sts	0x00B5, r24
	}
	if(countermin<60)
     ec0:	80 91 b5 00 	lds	r24, 0x00B5
     ec4:	8c 33       	cpi	r24, 0x3C	; 60
     ec6:	90 f4       	brcc	.+36     	; 0xeec <voidTask1+0x78>
	{
		Min1 = countermin/10;
     ec8:	80 91 b5 00 	lds	r24, 0x00B5
     ecc:	9a e0       	ldi	r25, 0x0A	; 10
     ece:	69 2f       	mov	r22, r25
     ed0:	0e 94 4e 09 	call	0x129c	; 0x129c <__udivmodqi4>
     ed4:	80 93 bf 00 	sts	0x00BF, r24
		Min2 = countermin%10;
     ed8:	80 91 b5 00 	lds	r24, 0x00B5
     edc:	9a e0       	ldi	r25, 0x0A	; 10
     ede:	69 2f       	mov	r22, r25
     ee0:	0e 94 4e 09 	call	0x129c	; 0x129c <__udivmodqi4>
     ee4:	89 2f       	mov	r24, r25
     ee6:	80 93 bc 00 	sts	0x00BC, r24
     eea:	07 c0       	rjmp	.+14     	; 0xefa <voidTask1+0x86>
	}
	else
	{
		countermin =0;
     eec:	10 92 b5 00 	sts	0x00B5, r1
		counterhr++;
     ef0:	80 91 b6 00 	lds	r24, 0x00B6
     ef4:	8f 5f       	subi	r24, 0xFF	; 255
     ef6:	80 93 b6 00 	sts	0x00B6, r24
	}
	if(counterhr<24)
     efa:	80 91 b6 00 	lds	r24, 0x00B6
     efe:	88 31       	cpi	r24, 0x18	; 24
     f00:	90 f4       	brcc	.+36     	; 0xf26 <voidTask1+0xb2>
	{
		Hr1 = counterhr/10;
     f02:	80 91 b6 00 	lds	r24, 0x00B6
     f06:	9a e0       	ldi	r25, 0x0A	; 10
     f08:	69 2f       	mov	r22, r25
     f0a:	0e 94 4e 09 	call	0x129c	; 0x129c <__udivmodqi4>
     f0e:	80 93 c0 00 	sts	0x00C0, r24
		Hr2 = counterhr%10;
     f12:	80 91 b6 00 	lds	r24, 0x00B6
     f16:	9a e0       	ldi	r25, 0x0A	; 10
     f18:	69 2f       	mov	r22, r25
     f1a:	0e 94 4e 09 	call	0x129c	; 0x129c <__udivmodqi4>
     f1e:	89 2f       	mov	r24, r25
     f20:	80 93 c1 00 	sts	0x00C1, r24
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <voidTask1+0xb6>
	}
	else
	{
		counterhr=0;
     f26:	10 92 b6 00 	sts	0x00B6, r1
	}
}
     f2a:	cf 91       	pop	r28
     f2c:	df 91       	pop	r29
     f2e:	08 95       	ret

00000f30 <voidCheckModeUART>:
#define Minutes     14
#define Hours 		15

u8 u8CurrentMode;
void voidCheckModeUART(void)
{
     f30:	df 93       	push	r29
     f32:	cf 93       	push	r28
     f34:	00 d0       	rcall	.+0      	; 0xf36 <voidCheckModeUART+0x6>
     f36:	00 d0       	rcall	.+0      	; 0xf38 <voidCheckModeUART+0x8>
     f38:	0f 92       	push	r0
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
	u16 u32KeypadStoredValue;
	u32KeypadStoredValue = KP_u16GetStatus();
     f3e:	0e 94 39 05 	call	0xa72	; 0xa72 <KP_u16GetStatus>
     f42:	9a 83       	std	Y+2, r25	; 0x02
     f44:	89 83       	std	Y+1, r24	; 0x01
	if(GET_BIT(u32KeypadStoredValue, Minutes))
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	9a 81       	ldd	r25, Y+2	; 0x02
     f4a:	80 70       	andi	r24, 0x00	; 0
     f4c:	90 74       	andi	r25, 0x40	; 64
     f4e:	00 97       	sbiw	r24, 0x00	; 0
     f50:	49 f0       	breq	.+18     	; 0xf64 <voidCheckModeUART+0x34>
	{
		u8 u8Byte = (ID_MOD_SWITCH<<4)|(1U);
     f52:	81 ed       	ldi	r24, 0xD1	; 209
     f54:	8b 83       	std	Y+3, r24	; 0x03
		UART_Transmit(&u8Byte, 1);
     f56:	ce 01       	movw	r24, r28
     f58:	03 96       	adiw	r24, 0x03	; 3
     f5a:	61 e0       	ldi	r22, 0x01	; 1
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	0e 94 25 04 	call	0x84a	; 0x84a <UART_Transmit>
     f62:	1b c0       	rjmp	.+54     	; 0xf9a <voidCheckModeUART+0x6a>
	}
	else if (GET_BIT(u32KeypadStoredValue, Hours))
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	9a 81       	ldd	r25, Y+2	; 0x02
     f68:	99 23       	and	r25, r25
     f6a:	4c f4       	brge	.+18     	; 0xf7e <voidCheckModeUART+0x4e>
	{
		u8 u8Byte = (ID_MOD_SWITCH<<4)|(2U);
     f6c:	82 ed       	ldi	r24, 0xD2	; 210
     f6e:	8c 83       	std	Y+4, r24	; 0x04
		UART_Transmit(&u8Byte, 1);
     f70:	ce 01       	movw	r24, r28
     f72:	04 96       	adiw	r24, 0x04	; 4
     f74:	61 e0       	ldi	r22, 0x01	; 1
     f76:	70 e0       	ldi	r23, 0x00	; 0
     f78:	0e 94 25 04 	call	0x84a	; 0x84a <UART_Transmit>
     f7c:	0e c0       	rjmp	.+28     	; 0xf9a <voidCheckModeUART+0x6a>
	}
	else if (GET_BIT(u32KeypadStoredValue, Seconds))
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	9a 81       	ldd	r25, Y+2	; 0x02
     f82:	80 70       	andi	r24, 0x00	; 0
     f84:	90 71       	andi	r25, 0x10	; 16
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	41 f0       	breq	.+16     	; 0xf9a <voidCheckModeUART+0x6a>
	{
		u8 u8Byte = (ID_MOD_SWITCH<<4)|(0U);
     f8a:	80 ed       	ldi	r24, 0xD0	; 208
     f8c:	8d 83       	std	Y+5, r24	; 0x05
		UART_Transmit(&u8Byte, 1);
     f8e:	ce 01       	movw	r24, r28
     f90:	05 96       	adiw	r24, 0x05	; 5
     f92:	61 e0       	ldi	r22, 0x01	; 1
     f94:	70 e0       	ldi	r23, 0x00	; 0
     f96:	0e 94 25 04 	call	0x84a	; 0x84a <UART_Transmit>
	}
}
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	08 95       	ret

00000faa <voidDisplaySeconds>:

void voidDisplaySeconds(void)
{
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
	PORTC = u8SegNum[Sec2];
     fb2:	a5 e3       	ldi	r26, 0x35	; 53
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	80 91 be 00 	lds	r24, 0x00BE
     fba:	88 2f       	mov	r24, r24
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	fc 01       	movw	r30, r24
     fc0:	e0 5a       	subi	r30, 0xA0	; 160
     fc2:	ff 4f       	sbci	r31, 0xFF	; 255
     fc4:	80 81       	ld	r24, Z
     fc6:	8c 93       	st	X, r24
	PORTA = u8SegNum[Sec1];
     fc8:	ab e3       	ldi	r26, 0x3B	; 59
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	80 91 bd 00 	lds	r24, 0x00BD
     fd0:	88 2f       	mov	r24, r24
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	fc 01       	movw	r30, r24
     fd6:	e0 5a       	subi	r30, 0xA0	; 160
     fd8:	ff 4f       	sbci	r31, 0xFF	; 255
     fda:	80 81       	ld	r24, Z
     fdc:	8c 93       	st	X, r24
}
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	08 95       	ret

00000fe4 <voidDisplayMinutes>:
void voidDisplayMinutes(void)
{
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
	PORTC = u8SegNum[Min2];
     fec:	a5 e3       	ldi	r26, 0x35	; 53
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	80 91 bc 00 	lds	r24, 0x00BC
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	fc 01       	movw	r30, r24
     ffa:	e0 5a       	subi	r30, 0xA0	; 160
     ffc:	ff 4f       	sbci	r31, 0xFF	; 255
     ffe:	80 81       	ld	r24, Z
    1000:	8c 93       	st	X, r24
	PORTA = u8SegNum[Min1];
    1002:	ab e3       	ldi	r26, 0x3B	; 59
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	80 91 bf 00 	lds	r24, 0x00BF
    100a:	88 2f       	mov	r24, r24
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	fc 01       	movw	r30, r24
    1010:	e0 5a       	subi	r30, 0xA0	; 160
    1012:	ff 4f       	sbci	r31, 0xFF	; 255
    1014:	80 81       	ld	r24, Z
    1016:	8c 93       	st	X, r24
}
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <voidDisplayHours>:
void voidDisplayHours(void)
{
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
	PORTC = u8SegNum[Hr2];
    1026:	a5 e3       	ldi	r26, 0x35	; 53
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	80 91 c1 00 	lds	r24, 0x00C1
    102e:	88 2f       	mov	r24, r24
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	fc 01       	movw	r30, r24
    1034:	e0 5a       	subi	r30, 0xA0	; 160
    1036:	ff 4f       	sbci	r31, 0xFF	; 255
    1038:	80 81       	ld	r24, Z
    103a:	8c 93       	st	X, r24
	PORTA = u8SegNum[Hr1];
    103c:	ab e3       	ldi	r26, 0x3B	; 59
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	80 91 c0 00 	lds	r24, 0x00C0
    1044:	88 2f       	mov	r24, r24
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	fc 01       	movw	r30, r24
    104a:	e0 5a       	subi	r30, 0xA0	; 160
    104c:	ff 4f       	sbci	r31, 0xFF	; 255
    104e:	80 81       	ld	r24, Z
    1050:	8c 93       	st	X, r24
}
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	08 95       	ret

00001058 <voidDisplay>:
void voidDisplay(void)
{
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	00 d0       	rcall	.+0      	; 0x105e <voidDisplay+0x6>
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
	switch(u8CurrentMode)
    1062:	80 91 c2 00 	lds	r24, 0x00C2
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	3a 83       	std	Y+2, r19	; 0x02
    106c:	29 83       	std	Y+1, r18	; 0x01
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	9a 81       	ldd	r25, Y+2	; 0x02
    1072:	81 30       	cpi	r24, 0x01	; 1
    1074:	91 05       	cpc	r25, r1
    1076:	61 f0       	breq	.+24     	; 0x1090 <voidDisplay+0x38>
    1078:	29 81       	ldd	r18, Y+1	; 0x01
    107a:	3a 81       	ldd	r19, Y+2	; 0x02
    107c:	22 30       	cpi	r18, 0x02	; 2
    107e:	31 05       	cpc	r19, r1
    1080:	51 f0       	breq	.+20     	; 0x1096 <voidDisplay+0x3e>
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	9a 81       	ldd	r25, Y+2	; 0x02
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	41 f4       	brne	.+16     	; 0x109a <voidDisplay+0x42>
	{
	case 0:
		voidDisplaySeconds();
    108a:	0e 94 d5 07 	call	0xfaa	; 0xfaa <voidDisplaySeconds>
    108e:	05 c0       	rjmp	.+10     	; 0x109a <voidDisplay+0x42>
	break;
	case 1:
		voidDisplayMinutes();
    1090:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <voidDisplayMinutes>
    1094:	02 c0       	rjmp	.+4      	; 0x109a <voidDisplay+0x42>
	break;
	case 2:
		voidDisplayHours();
    1096:	0e 94 0f 08 	call	0x101e	; 0x101e <voidDisplayHours>
	break;
	}
}
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	08 95       	ret

000010a4 <voidTask2>:
/********************** Prev View Hrs, Min, Sec *****************************************/

void voidTask2(void)
{
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
	static u32 u32KeypadStoredValue;
	static u8 u8Flag = Seconds;
	if(Seconds == u8Flag)
    10ac:	80 91 6a 00 	lds	r24, 0x006A
    10b0:	8c 30       	cpi	r24, 0x0C	; 12
    10b2:	81 f5       	brne	.+96     	; 0x1114 <voidTask2+0x70>
	{
		if(GET_BIT(u32KeypadStoredValue, Minutes))
    10b4:	80 91 b7 00 	lds	r24, 0x00B7
    10b8:	90 91 b8 00 	lds	r25, 0x00B8
    10bc:	a0 91 b9 00 	lds	r26, 0x00B9
    10c0:	b0 91 ba 00 	lds	r27, 0x00BA
    10c4:	80 70       	andi	r24, 0x00	; 0
    10c6:	90 74       	andi	r25, 0x40	; 64
    10c8:	a0 70       	andi	r26, 0x00	; 0
    10ca:	b0 70       	andi	r27, 0x00	; 0
    10cc:	00 97       	sbiw	r24, 0x00	; 0
    10ce:	a1 05       	cpc	r26, r1
    10d0:	b1 05       	cpc	r27, r1
    10d2:	21 f0       	breq	.+8      	; 0x10dc <voidTask2+0x38>
		{
			u8Flag = Minutes;
    10d4:	8e e0       	ldi	r24, 0x0E	; 14
    10d6:	80 93 6a 00 	sts	0x006A, r24
    10da:	80 c0       	rjmp	.+256    	; 0x11dc <voidTask2+0x138>
		}
		else if (GET_BIT(u32KeypadStoredValue, Hours))
    10dc:	80 91 b7 00 	lds	r24, 0x00B7
    10e0:	90 91 b8 00 	lds	r25, 0x00B8
    10e4:	a0 91 b9 00 	lds	r26, 0x00B9
    10e8:	b0 91 ba 00 	lds	r27, 0x00BA
    10ec:	80 70       	andi	r24, 0x00	; 0
    10ee:	90 78       	andi	r25, 0x80	; 128
    10f0:	a0 70       	andi	r26, 0x00	; 0
    10f2:	b0 70       	andi	r27, 0x00	; 0
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	a1 05       	cpc	r26, r1
    10f8:	b1 05       	cpc	r27, r1
    10fa:	21 f0       	breq	.+8      	; 0x1104 <voidTask2+0x60>
		{
			u8Flag = Hours;
    10fc:	8f e0       	ldi	r24, 0x0F	; 15
    10fe:	80 93 6a 00 	sts	0x006A, r24
    1102:	6c c0       	rjmp	.+216    	; 0x11dc <voidTask2+0x138>
		}
		else if (u8FlagAdjustmentMode == 1)
    1104:	80 91 bb 00 	lds	r24, 0x00BB
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	09 f4       	brne	.+2      	; 0x110e <voidTask2+0x6a>
    110c:	67 c0       	rjmp	.+206    	; 0x11dc <voidTask2+0x138>
		{

		}
		else
		{
			voidDisplaySeconds();
    110e:	0e 94 d5 07 	call	0xfaa	; 0xfaa <voidDisplaySeconds>
    1112:	64 c0       	rjmp	.+200    	; 0x11dc <voidTask2+0x138>
		}

	}
	else if(Minutes == u8Flag)
    1114:	80 91 6a 00 	lds	r24, 0x006A
    1118:	8e 30       	cpi	r24, 0x0E	; 14
    111a:	79 f5       	brne	.+94     	; 0x117a <voidTask2+0xd6>
	{
		if(GET_BIT(u32KeypadStoredValue, Seconds))
    111c:	80 91 b7 00 	lds	r24, 0x00B7
    1120:	90 91 b8 00 	lds	r25, 0x00B8
    1124:	a0 91 b9 00 	lds	r26, 0x00B9
    1128:	b0 91 ba 00 	lds	r27, 0x00BA
    112c:	80 70       	andi	r24, 0x00	; 0
    112e:	90 71       	andi	r25, 0x10	; 16
    1130:	a0 70       	andi	r26, 0x00	; 0
    1132:	b0 70       	andi	r27, 0x00	; 0
    1134:	00 97       	sbiw	r24, 0x00	; 0
    1136:	a1 05       	cpc	r26, r1
    1138:	b1 05       	cpc	r27, r1
    113a:	21 f0       	breq	.+8      	; 0x1144 <voidTask2+0xa0>
		{
			u8Flag = Seconds;
    113c:	8c e0       	ldi	r24, 0x0C	; 12
    113e:	80 93 6a 00 	sts	0x006A, r24
    1142:	4c c0       	rjmp	.+152    	; 0x11dc <voidTask2+0x138>
		}
		else if (GET_BIT(u32KeypadStoredValue, Hours))
    1144:	80 91 b7 00 	lds	r24, 0x00B7
    1148:	90 91 b8 00 	lds	r25, 0x00B8
    114c:	a0 91 b9 00 	lds	r26, 0x00B9
    1150:	b0 91 ba 00 	lds	r27, 0x00BA
    1154:	80 70       	andi	r24, 0x00	; 0
    1156:	90 78       	andi	r25, 0x80	; 128
    1158:	a0 70       	andi	r26, 0x00	; 0
    115a:	b0 70       	andi	r27, 0x00	; 0
    115c:	00 97       	sbiw	r24, 0x00	; 0
    115e:	a1 05       	cpc	r26, r1
    1160:	b1 05       	cpc	r27, r1
    1162:	21 f0       	breq	.+8      	; 0x116c <voidTask2+0xc8>
		{
			u8Flag = Hours;
    1164:	8f e0       	ldi	r24, 0x0F	; 15
    1166:	80 93 6a 00 	sts	0x006A, r24
    116a:	38 c0       	rjmp	.+112    	; 0x11dc <voidTask2+0x138>
		}
		else if (u8FlagAdjustmentMode == 1) {}
    116c:	80 91 bb 00 	lds	r24, 0x00BB
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	a1 f1       	breq	.+104    	; 0x11dc <voidTask2+0x138>
		else
		{
			voidDisplayMinutes();
    1174:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <voidDisplayMinutes>
    1178:	31 c0       	rjmp	.+98     	; 0x11dc <voidTask2+0x138>
		}
	}
	else if(Hours == u8Flag)
    117a:	80 91 6a 00 	lds	r24, 0x006A
    117e:	8f 30       	cpi	r24, 0x0F	; 15
    1180:	69 f5       	brne	.+90     	; 0x11dc <voidTask2+0x138>
	{
		if(GET_BIT(u32KeypadStoredValue, Seconds))
    1182:	80 91 b7 00 	lds	r24, 0x00B7
    1186:	90 91 b8 00 	lds	r25, 0x00B8
    118a:	a0 91 b9 00 	lds	r26, 0x00B9
    118e:	b0 91 ba 00 	lds	r27, 0x00BA
    1192:	80 70       	andi	r24, 0x00	; 0
    1194:	90 71       	andi	r25, 0x10	; 16
    1196:	a0 70       	andi	r26, 0x00	; 0
    1198:	b0 70       	andi	r27, 0x00	; 0
    119a:	00 97       	sbiw	r24, 0x00	; 0
    119c:	a1 05       	cpc	r26, r1
    119e:	b1 05       	cpc	r27, r1
    11a0:	19 f0       	breq	.+6      	; 0x11a8 <voidTask2+0x104>
		{
			u8Flag = Seconds;
    11a2:	8c e0       	ldi	r24, 0x0C	; 12
    11a4:	80 93 6a 00 	sts	0x006A, r24
		}
		if(GET_BIT(u32KeypadStoredValue, Minutes))
    11a8:	80 91 b7 00 	lds	r24, 0x00B7
    11ac:	90 91 b8 00 	lds	r25, 0x00B8
    11b0:	a0 91 b9 00 	lds	r26, 0x00B9
    11b4:	b0 91 ba 00 	lds	r27, 0x00BA
    11b8:	80 70       	andi	r24, 0x00	; 0
    11ba:	90 74       	andi	r25, 0x40	; 64
    11bc:	a0 70       	andi	r26, 0x00	; 0
    11be:	b0 70       	andi	r27, 0x00	; 0
    11c0:	00 97       	sbiw	r24, 0x00	; 0
    11c2:	a1 05       	cpc	r26, r1
    11c4:	b1 05       	cpc	r27, r1
    11c6:	21 f0       	breq	.+8      	; 0x11d0 <voidTask2+0x12c>
		{
			u8Flag = Minutes;
    11c8:	8e e0       	ldi	r24, 0x0E	; 14
    11ca:	80 93 6a 00 	sts	0x006A, r24
    11ce:	06 c0       	rjmp	.+12     	; 0x11dc <voidTask2+0x138>
		}
		else if (u8FlagAdjustmentMode == 1) {}
    11d0:	80 91 bb 00 	lds	r24, 0x00BB
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	11 f0       	breq	.+4      	; 0x11dc <voidTask2+0x138>
		else
		{
			voidDisplayHours();
    11d8:	0e 94 0f 08 	call	0x101e	; 0x101e <voidDisplayHours>
		}
	}

}
    11dc:	cf 91       	pop	r28
    11de:	df 91       	pop	r29
    11e0:	08 95       	ret

000011e2 <taskSwitch1Led>:
#include "sw.h"
#include "protocol.h"
#include "UART.h"

void taskSwitch1Led(void)
{
    11e2:	df 93       	push	r29
    11e4:	cf 93       	push	r28
    11e6:	0f 92       	push	r0
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
	u8 u8ByteSW1;
	if (SW_u8GetState(0))
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	0e 94 8c 06 	call	0xd18	; 0xd18 <SW_u8GetState>
    11f2:	88 23       	and	r24, r24
    11f4:	19 f0       	breq	.+6      	; 0x11fc <taskSwitch1Led+0x1a>
	{
		/* Stores the button1 ID, and place it in the higher nibble - 4 bits - , PRESSED*/
		u8ByteSW1 = (ID_B1<<4)|(0U);
    11f6:	80 e5       	ldi	r24, 0x50	; 80
    11f8:	89 83       	std	Y+1, r24	; 0x01
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <taskSwitch1Led+0x1e>

	}
	else
	{
		/* Stores the button1 ID, and place it in the higher nibble - 4 bits - , RELEASED*/
		u8ByteSW1 = (ID_B1<<4)|(1U);
    11fc:	81 e5       	ldi	r24, 0x51	; 81
    11fe:	89 83       	std	Y+1, r24	; 0x01
	}
	UART_Transmit(&u8ByteSW1, 1);
    1200:	ce 01       	movw	r24, r28
    1202:	01 96       	adiw	r24, 0x01	; 1
    1204:	61 e0       	ldi	r22, 0x01	; 1
    1206:	70 e0       	ldi	r23, 0x00	; 0
    1208:	0e 94 25 04 	call	0x84a	; 0x84a <UART_Transmit>


}
    120c:	0f 90       	pop	r0
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <taskSwitch2Led>:
void taskSwitch2Led(void)
{
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	0f 92       	push	r0
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
	u8 u8ByteSW2;
	if (SW_u8GetState(1))
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	0e 94 8c 06 	call	0xd18	; 0xd18 <SW_u8GetState>
    1224:	88 23       	and	r24, r24
    1226:	19 f0       	breq	.+6      	; 0x122e <taskSwitch2Led+0x1a>
	{
		/* Stores the button1 ID, and place it in the higher nibble - 4 bits - , RELEASED*/
		u8ByteSW2 = (ID_B2<<4)|(0U);
    1228:	80 e7       	ldi	r24, 0x70	; 112
    122a:	89 83       	std	Y+1, r24	; 0x01
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <taskSwitch2Led+0x1e>
	}
	else
	{
		/* Stores the button1 ID, and place it in the higher nibble - 4 bits - , RELEASED*/
		u8ByteSW2 = (ID_B2<<4)|(1U);
    122e:	81 e7       	ldi	r24, 0x71	; 113
    1230:	89 83       	std	Y+1, r24	; 0x01
	}
	UART_Transmit(&u8ByteSW2, 1);
    1232:	ce 01       	movw	r24, r28
    1234:	01 96       	adiw	r24, 0x01	; 1
    1236:	61 e0       	ldi	r22, 0x01	; 1
    1238:	70 e0       	ldi	r23, 0x00	; 0
    123a:	0e 94 25 04 	call	0x84a	; 0x84a <UART_Transmit>
}
    123e:	0f 90       	pop	r0
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <taskReciever>:

/* Functions handles the UART Recieving the signal for the switch*/
void taskReciever(void)
{
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	0f 92       	push	r0
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
	if(UART_u8DataAvilable())
    1250:	0e 94 b5 04 	call	0x96a	; 0x96a <UART_u8DataAvilable>
    1254:	88 23       	and	r24, r24
    1256:	f1 f0       	breq	.+60     	; 0x1294 <taskReciever+0x4e>
	{
		u8 dataRecieved =  UART_u8ReadByte();
    1258:	0e 94 be 04 	call	0x97c	; 0x97c <UART_u8ReadByte>
    125c:	89 83       	std	Y+1, r24	; 0x01
		if(dataRecieved == (ID_B1<<4)|(0U)) /*led1  on */
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	80 35       	cpi	r24, 0x50	; 80
    1262:	29 f4       	brne	.+10     	; 0x126e <taskReciever+0x28>
		{
			DIO_voidSetPinValue(DIO_u8_PIN_16,DIO_u8_HIGH);
    1264:	80 e1       	ldi	r24, 0x10	; 16
    1266:	60 e0       	ldi	r22, 0x00	; 0
    1268:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
    126c:	07 c0       	rjmp	.+14     	; 0x127c <taskReciever+0x36>
		}
		else if(dataRecieved == ((ID_B1<<4)|(1U)))
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	81 35       	cpi	r24, 0x51	; 81
    1272:	21 f4       	brne	.+8      	; 0x127c <taskReciever+0x36>
		{
			DIO_voidSetPinValue(DIO_u8_PIN_16,DIO_u8_LOW);
    1274:	80 e1       	ldi	r24, 0x10	; 16
    1276:	61 e0       	ldi	r22, 0x01	; 1
    1278:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
		}

		if(dataRecieved == (ID_B2<<4)|(0U))/*led2 on*/
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	80 37       	cpi	r24, 0x70	; 112
    1280:	29 f4       	brne	.+10     	; 0x128c <taskReciever+0x46>
		{
			DIO_voidSetPinValue(DIO_u8_PIN_23,DIO_u8_HIGH);
    1282:	87 e1       	ldi	r24, 0x17	; 23
    1284:	60 e0       	ldi	r22, 0x00	; 0
    1286:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
    128a:	04 c0       	rjmp	.+8      	; 0x1294 <taskReciever+0x4e>
		}
		else if(dataRecieved == (ID_B2<<4)|(1U))
		{
			DIO_voidSetPinValue(DIO_u8_PIN_23,DIO_u8_LOW);
    128c:	87 e1       	ldi	r24, 0x17	; 23
    128e:	61 e0       	ldi	r22, 0x01	; 1
    1290:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
		}
	}
}
    1294:	0f 90       	pop	r0
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <__udivmodqi4>:
    129c:	99 1b       	sub	r25, r25
    129e:	79 e0       	ldi	r23, 0x09	; 9
    12a0:	04 c0       	rjmp	.+8      	; 0x12aa <__udivmodqi4_ep>

000012a2 <__udivmodqi4_loop>:
    12a2:	99 1f       	adc	r25, r25
    12a4:	96 17       	cp	r25, r22
    12a6:	08 f0       	brcs	.+2      	; 0x12aa <__udivmodqi4_ep>
    12a8:	96 1b       	sub	r25, r22

000012aa <__udivmodqi4_ep>:
    12aa:	88 1f       	adc	r24, r24
    12ac:	7a 95       	dec	r23
    12ae:	c9 f7       	brne	.-14     	; 0x12a2 <__udivmodqi4_loop>
    12b0:	80 95       	com	r24
    12b2:	08 95       	ret

000012b4 <__udivmodsi4>:
    12b4:	a1 e2       	ldi	r26, 0x21	; 33
    12b6:	1a 2e       	mov	r1, r26
    12b8:	aa 1b       	sub	r26, r26
    12ba:	bb 1b       	sub	r27, r27
    12bc:	fd 01       	movw	r30, r26
    12be:	0d c0       	rjmp	.+26     	; 0x12da <__udivmodsi4_ep>

000012c0 <__udivmodsi4_loop>:
    12c0:	aa 1f       	adc	r26, r26
    12c2:	bb 1f       	adc	r27, r27
    12c4:	ee 1f       	adc	r30, r30
    12c6:	ff 1f       	adc	r31, r31
    12c8:	a2 17       	cp	r26, r18
    12ca:	b3 07       	cpc	r27, r19
    12cc:	e4 07       	cpc	r30, r20
    12ce:	f5 07       	cpc	r31, r21
    12d0:	20 f0       	brcs	.+8      	; 0x12da <__udivmodsi4_ep>
    12d2:	a2 1b       	sub	r26, r18
    12d4:	b3 0b       	sbc	r27, r19
    12d6:	e4 0b       	sbc	r30, r20
    12d8:	f5 0b       	sbc	r31, r21

000012da <__udivmodsi4_ep>:
    12da:	66 1f       	adc	r22, r22
    12dc:	77 1f       	adc	r23, r23
    12de:	88 1f       	adc	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	1a 94       	dec	r1
    12e4:	69 f7       	brne	.-38     	; 0x12c0 <__udivmodsi4_loop>
    12e6:	60 95       	com	r22
    12e8:	70 95       	com	r23
    12ea:	80 95       	com	r24
    12ec:	90 95       	com	r25
    12ee:	9b 01       	movw	r18, r22
    12f0:	ac 01       	movw	r20, r24
    12f2:	bd 01       	movw	r22, r26
    12f4:	cf 01       	movw	r24, r30
    12f6:	08 95       	ret

000012f8 <_exit>:
    12f8:	f8 94       	cli

000012fa <__stop_program>:
    12fa:	ff cf       	rjmp	.-2      	; 0x12fa <__stop_program>
