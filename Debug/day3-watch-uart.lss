
day3-watch-uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  000012ca  0000135e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000035  0080008e  0080008e  0000138c  2**0
                  ALLOC
  3 .stab         0000270c  00000000  00000000  0000138c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000105a  00000000  00000000  00003a98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 94 03 	jmp	0x728	; 0x728 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 b5 04 	jmp	0x96a	; 0x96a <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3c       	cpi	r26, 0xC3	; 195
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <main>
      8a:	0c 94 63 09 	jmp	0x12c6	; 0x12c6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <u8GetNum>:
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <u8GetNum+0x6>
      98:	0f 92       	push	r0
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
      9e:	8a e0       	ldi	r24, 0x0A	; 10
      a0:	89 83       	std	Y+1, r24	; 0x01
      a2:	0e 94 1c 05 	call	0xa38	; 0xa38 <KP_u16GetStatus>
      a6:	9b 83       	std	Y+3, r25	; 0x03
      a8:	8a 83       	std	Y+2, r24	; 0x02
      aa:	8a 81       	ldd	r24, Y+2	; 0x02
      ac:	9b 81       	ldd	r25, Y+3	; 0x03
      ae:	80 32       	cpi	r24, 0x20	; 32
      b0:	91 05       	cpc	r25, r1
      b2:	09 f4       	brne	.+2      	; 0xb6 <u8GetNum+0x24>
      b4:	52 c0       	rjmp	.+164    	; 0x15a <u8GetNum+0xc8>
      b6:	8a 81       	ldd	r24, Y+2	; 0x02
      b8:	9b 81       	ldd	r25, Y+3	; 0x03
      ba:	81 32       	cpi	r24, 0x21	; 33
      bc:	91 05       	cpc	r25, r1
      be:	e0 f4       	brcc	.+56     	; 0xf8 <u8GetNum+0x66>
      c0:	8a 81       	ldd	r24, Y+2	; 0x02
      c2:	9b 81       	ldd	r25, Y+3	; 0x03
      c4:	82 30       	cpi	r24, 0x02	; 2
      c6:	91 05       	cpc	r25, r1
      c8:	09 f4       	brne	.+2      	; 0xcc <u8GetNum+0x3a>
      ca:	3e c0       	rjmp	.+124    	; 0x148 <u8GetNum+0xb6>
      cc:	8a 81       	ldd	r24, Y+2	; 0x02
      ce:	9b 81       	ldd	r25, Y+3	; 0x03
      d0:	83 30       	cpi	r24, 0x03	; 3
      d2:	91 05       	cpc	r25, r1
      d4:	30 f4       	brcc	.+12     	; 0xe2 <u8GetNum+0x50>
      d6:	8a 81       	ldd	r24, Y+2	; 0x02
      d8:	9b 81       	ldd	r25, Y+3	; 0x03
      da:	81 30       	cpi	r24, 0x01	; 1
      dc:	91 05       	cpc	r25, r1
      de:	89 f1       	breq	.+98     	; 0x142 <u8GetNum+0xb0>
      e0:	4c c0       	rjmp	.+152    	; 0x17a <u8GetNum+0xe8>
      e2:	8a 81       	ldd	r24, Y+2	; 0x02
      e4:	9b 81       	ldd	r25, Y+3	; 0x03
      e6:	84 30       	cpi	r24, 0x04	; 4
      e8:	91 05       	cpc	r25, r1
      ea:	89 f1       	breq	.+98     	; 0x14e <u8GetNum+0xbc>
      ec:	8a 81       	ldd	r24, Y+2	; 0x02
      ee:	9b 81       	ldd	r25, Y+3	; 0x03
      f0:	80 31       	cpi	r24, 0x10	; 16
      f2:	91 05       	cpc	r25, r1
      f4:	79 f1       	breq	.+94     	; 0x154 <u8GetNum+0xc2>
      f6:	41 c0       	rjmp	.+130    	; 0x17a <u8GetNum+0xe8>
      f8:	8a 81       	ldd	r24, Y+2	; 0x02
      fa:	9b 81       	ldd	r25, Y+3	; 0x03
      fc:	22 e0       	ldi	r18, 0x02	; 2
      fe:	80 30       	cpi	r24, 0x00	; 0
     100:	92 07       	cpc	r25, r18
     102:	a1 f1       	breq	.+104    	; 0x16c <u8GetNum+0xda>
     104:	8a 81       	ldd	r24, Y+2	; 0x02
     106:	9b 81       	ldd	r25, Y+3	; 0x03
     108:	22 e0       	ldi	r18, 0x02	; 2
     10a:	81 30       	cpi	r24, 0x01	; 1
     10c:	92 07       	cpc	r25, r18
     10e:	60 f4       	brcc	.+24     	; 0x128 <u8GetNum+0x96>
     110:	8a 81       	ldd	r24, Y+2	; 0x02
     112:	9b 81       	ldd	r25, Y+3	; 0x03
     114:	80 34       	cpi	r24, 0x40	; 64
     116:	91 05       	cpc	r25, r1
     118:	19 f1       	breq	.+70     	; 0x160 <u8GetNum+0xce>
     11a:	8a 81       	ldd	r24, Y+2	; 0x02
     11c:	9b 81       	ldd	r25, Y+3	; 0x03
     11e:	21 e0       	ldi	r18, 0x01	; 1
     120:	80 30       	cpi	r24, 0x00	; 0
     122:	92 07       	cpc	r25, r18
     124:	01 f1       	breq	.+64     	; 0x166 <u8GetNum+0xd4>
     126:	29 c0       	rjmp	.+82     	; 0x17a <u8GetNum+0xe8>
     128:	8a 81       	ldd	r24, Y+2	; 0x02
     12a:	9b 81       	ldd	r25, Y+3	; 0x03
     12c:	24 e0       	ldi	r18, 0x04	; 4
     12e:	80 30       	cpi	r24, 0x00	; 0
     130:	92 07       	cpc	r25, r18
     132:	f9 f0       	breq	.+62     	; 0x172 <u8GetNum+0xe0>
     134:	8a 81       	ldd	r24, Y+2	; 0x02
     136:	9b 81       	ldd	r25, Y+3	; 0x03
     138:	20 e2       	ldi	r18, 0x20	; 32
     13a:	80 30       	cpi	r24, 0x00	; 0
     13c:	92 07       	cpc	r25, r18
     13e:	e1 f0       	breq	.+56     	; 0x178 <u8GetNum+0xe6>
     140:	1c c0       	rjmp	.+56     	; 0x17a <u8GetNum+0xe8>
     142:	81 e0       	ldi	r24, 0x01	; 1
     144:	89 83       	std	Y+1, r24	; 0x01
     146:	19 c0       	rjmp	.+50     	; 0x17a <u8GetNum+0xe8>
     148:	82 e0       	ldi	r24, 0x02	; 2
     14a:	89 83       	std	Y+1, r24	; 0x01
     14c:	16 c0       	rjmp	.+44     	; 0x17a <u8GetNum+0xe8>
     14e:	83 e0       	ldi	r24, 0x03	; 3
     150:	89 83       	std	Y+1, r24	; 0x01
     152:	13 c0       	rjmp	.+38     	; 0x17a <u8GetNum+0xe8>
     154:	84 e0       	ldi	r24, 0x04	; 4
     156:	89 83       	std	Y+1, r24	; 0x01
     158:	10 c0       	rjmp	.+32     	; 0x17a <u8GetNum+0xe8>
     15a:	85 e0       	ldi	r24, 0x05	; 5
     15c:	89 83       	std	Y+1, r24	; 0x01
     15e:	0d c0       	rjmp	.+26     	; 0x17a <u8GetNum+0xe8>
     160:	86 e0       	ldi	r24, 0x06	; 6
     162:	89 83       	std	Y+1, r24	; 0x01
     164:	0a c0       	rjmp	.+20     	; 0x17a <u8GetNum+0xe8>
     166:	87 e0       	ldi	r24, 0x07	; 7
     168:	89 83       	std	Y+1, r24	; 0x01
     16a:	07 c0       	rjmp	.+14     	; 0x17a <u8GetNum+0xe8>
     16c:	88 e0       	ldi	r24, 0x08	; 8
     16e:	89 83       	std	Y+1, r24	; 0x01
     170:	04 c0       	rjmp	.+8      	; 0x17a <u8GetNum+0xe8>
     172:	89 e0       	ldi	r24, 0x09	; 9
     174:	89 83       	std	Y+1, r24	; 0x01
     176:	01 c0       	rjmp	.+2      	; 0x17a <u8GetNum+0xe8>
     178:	19 82       	std	Y+1, r1	; 0x01
     17a:	89 81       	ldd	r24, Y+1	; 0x01
     17c:	0f 90       	pop	r0
     17e:	0f 90       	pop	r0
     180:	0f 90       	pop	r0
     182:	cf 91       	pop	r28
     184:	df 91       	pop	r29
     186:	08 95       	ret

00000188 <voidClockAdjust>:
}

u8 u8FlagAdjustmentMode;

void voidClockAdjust(void)
{
     188:	df 93       	push	r29
     18a:	cf 93       	push	r28
     18c:	00 d0       	rcall	.+0      	; 0x18e <voidClockAdjust+0x6>
     18e:	00 d0       	rcall	.+0      	; 0x190 <voidClockAdjust+0x8>
     190:	0f 92       	push	r0
     192:	cd b7       	in	r28, 0x3d	; 61
     194:	de b7       	in	r29, 0x3e	; 62
	static u8 u8DigitCounter;                    /* number of digit has been entered */
	static u8 u8AdjustValue;                     /* new adjust value                 */
	static u16 u16AdjustStateTimeout;            /* Amount of time that the adjust mode can be active in*/
	static u16 u16KeypadStoredValue;             /* holds last pressed key value */

	switch(u16AdjustState)
     196:	80 91 94 00 	lds	r24, 0x0094
     19a:	90 91 95 00 	lds	r25, 0x0095
     19e:	9d 83       	std	Y+5, r25	; 0x05
     1a0:	8c 83       	std	Y+4, r24	; 0x04
     1a2:	8c 81       	ldd	r24, Y+4	; 0x04
     1a4:	9d 81       	ldd	r25, Y+5	; 0x05
     1a6:	88 30       	cpi	r24, 0x08	; 8
     1a8:	91 05       	cpc	r25, r1
     1aa:	09 f4       	brne	.+2      	; 0x1ae <voidClockAdjust+0x26>
     1ac:	c0 c0       	rjmp	.+384    	; 0x32e <voidClockAdjust+0x1a6>
     1ae:	8c 81       	ldd	r24, Y+4	; 0x04
     1b0:	9d 81       	ldd	r25, Y+5	; 0x05
     1b2:	89 30       	cpi	r24, 0x09	; 9
     1b4:	91 05       	cpc	r25, r1
     1b6:	58 f4       	brcc	.+22     	; 0x1ce <voidClockAdjust+0x46>
     1b8:	8c 81       	ldd	r24, Y+4	; 0x04
     1ba:	9d 81       	ldd	r25, Y+5	; 0x05
     1bc:	00 97       	sbiw	r24, 0x00	; 0
     1be:	a9 f0       	breq	.+42     	; 0x1ea <voidClockAdjust+0x62>
     1c0:	8c 81       	ldd	r24, Y+4	; 0x04
     1c2:	9d 81       	ldd	r25, Y+5	; 0x05
     1c4:	85 30       	cpi	r24, 0x05	; 5
     1c6:	91 05       	cpc	r25, r1
     1c8:	09 f4       	brne	.+2      	; 0x1cc <voidClockAdjust+0x44>
     1ca:	40 c0       	rjmp	.+128    	; 0x24c <voidClockAdjust+0xc4>
     1cc:	d6 c0       	rjmp	.+428    	; 0x37a <voidClockAdjust+0x1f2>
     1ce:	8c 81       	ldd	r24, Y+4	; 0x04
     1d0:	9d 81       	ldd	r25, Y+5	; 0x05
     1d2:	80 38       	cpi	r24, 0x80	; 128
     1d4:	91 05       	cpc	r25, r1
     1d6:	09 f4       	brne	.+2      	; 0x1da <voidClockAdjust+0x52>
     1d8:	b7 c0       	rjmp	.+366    	; 0x348 <voidClockAdjust+0x1c0>
     1da:	8c 81       	ldd	r24, Y+4	; 0x04
     1dc:	9d 81       	ldd	r25, Y+5	; 0x05
     1de:	28 e0       	ldi	r18, 0x08	; 8
     1e0:	80 30       	cpi	r24, 0x00	; 0
     1e2:	92 07       	cpc	r25, r18
     1e4:	09 f4       	brne	.+2      	; 0x1e8 <voidClockAdjust+0x60>
     1e6:	bd c0       	rjmp	.+378    	; 0x362 <voidClockAdjust+0x1da>
     1e8:	c8 c0       	rjmp	.+400    	; 0x37a <voidClockAdjust+0x1f2>
	{
		case NORMAL_STATE:
		/* check if the kp got pressed */
		u16KeypadStoredValue= KP_u16GetStatus();
     1ea:	0e 94 1c 05 	call	0xa38	; 0xa38 <KP_u16GetStatus>
     1ee:	90 93 8f 00 	sts	0x008F, r25
     1f2:	80 93 8e 00 	sts	0x008E, r24

		switch(u16KeypadStoredValue)
     1f6:	80 91 8e 00 	lds	r24, 0x008E
     1fa:	90 91 8f 00 	lds	r25, 0x008F
     1fe:	9b 83       	std	Y+3, r25	; 0x03
     200:	8a 83       	std	Y+2, r24	; 0x02
     202:	8a 81       	ldd	r24, Y+2	; 0x02
     204:	9b 81       	ldd	r25, Y+3	; 0x03
     206:	80 38       	cpi	r24, 0x80	; 128
     208:	91 05       	cpc	r25, r1
     20a:	61 f0       	breq	.+24     	; 0x224 <voidClockAdjust+0x9c>
     20c:	8a 81       	ldd	r24, Y+2	; 0x02
     20e:	9b 81       	ldd	r25, Y+3	; 0x03
     210:	28 e0       	ldi	r18, 0x08	; 8
     212:	80 30       	cpi	r24, 0x00	; 0
     214:	92 07       	cpc	r25, r18
     216:	31 f0       	breq	.+12     	; 0x224 <voidClockAdjust+0x9c>
     218:	8a 81       	ldd	r24, Y+2	; 0x02
     21a:	9b 81       	ldd	r25, Y+3	; 0x03
     21c:	88 30       	cpi	r24, 0x08	; 8
     21e:	91 05       	cpc	r25, r1
     220:	09 f0       	breq	.+2      	; 0x224 <voidClockAdjust+0x9c>
     222:	ab c0       	rjmp	.+342    	; 0x37a <voidClockAdjust+0x1f2>
		{
		case ADJUST_SS_STATE:
		case ADJUST_MM_STATE:
		case ADJUST_HH_STATE:
			/* prepare for the adjust mode*/
			u16AdjustStateTimeout = 6;
     224:	86 e0       	ldi	r24, 0x06	; 6
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	90 93 91 00 	sts	0x0091, r25
     22c:	80 93 90 00 	sts	0x0090, r24
			u8DigitCounter = 0;
     230:	10 92 93 00 	sts	0x0093, r1
			u8AdjustValue  = 0;
     234:	10 92 92 00 	sts	0x0092, r1
			/* go to adjusting mode */
			u16AdjustState = ADJUSTING_STATE;
     238:	85 e0       	ldi	r24, 0x05	; 5
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	90 93 95 00 	sts	0x0095, r25
     240:	80 93 94 00 	sts	0x0094, r24
			u8FlagAdjustmentMode = 1;
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	80 93 bb 00 	sts	0x00BB, r24
     24a:	97 c0       	rjmp	.+302    	; 0x37a <voidClockAdjust+0x1f2>
		}
		break;

		case ADJUSTING_STATE:
			/* allow user to enter tow digits only as long as the adjust event didn't timeout */
			if(u16AdjustStateTimeout && u8DigitCounter < 2)
     24c:	80 91 90 00 	lds	r24, 0x0090
     250:	90 91 91 00 	lds	r25, 0x0091
     254:	00 97       	sbiw	r24, 0x00	; 0
     256:	09 f4       	brne	.+2      	; 0x25a <voidClockAdjust+0xd2>
     258:	4e c0       	rjmp	.+156    	; 0x2f6 <voidClockAdjust+0x16e>
     25a:	80 91 93 00 	lds	r24, 0x0093
     25e:	82 30       	cpi	r24, 0x02	; 2
     260:	08 f0       	brcs	.+2      	; 0x264 <voidClockAdjust+0xdc>
     262:	49 c0       	rjmp	.+146    	; 0x2f6 <voidClockAdjust+0x16e>
			{
				u8 u8digit = u8GetNum();
     264:	0e 94 49 00 	call	0x92	; 0x92 <u8GetNum>
     268:	89 83       	std	Y+1, r24	; 0x01
                /* if got number from 0 to 9 */
				if(u8digit < 10)
     26a:	89 81       	ldd	r24, Y+1	; 0x01
     26c:	8a 30       	cpi	r24, 0x0A	; 10
     26e:	c8 f5       	brcc	.+114    	; 0x2e2 <voidClockAdjust+0x15a>
				{
					/* combine the tow digits in one decimal value*/
					if(u8DigitCounter == 0)
     270:	80 91 93 00 	lds	r24, 0x0093
     274:	88 23       	and	r24, r24
     276:	01 f5       	brne	.+64     	; 0x2b8 <voidClockAdjust+0x130>
					{
						PORTB = u8SegNum[u8digit];
     278:	a8 e3       	ldi	r26, 0x38	; 56
     27a:	b0 e0       	ldi	r27, 0x00	; 0
     27c:	89 81       	ldd	r24, Y+1	; 0x01
     27e:	88 2f       	mov	r24, r24
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	fc 01       	movw	r30, r24
     284:	e0 5a       	subi	r30, 0xA0	; 160
     286:	ff 4f       	sbci	r31, 0xFF	; 255
     288:	80 81       	ld	r24, Z
     28a:	8c 93       	st	X, r24
						u8AdjustValue = u8digit * 10;
     28c:	89 81       	ldd	r24, Y+1	; 0x01
     28e:	88 2f       	mov	r24, r24
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	9c 01       	movw	r18, r24
     294:	22 0f       	add	r18, r18
     296:	33 1f       	adc	r19, r19
     298:	c9 01       	movw	r24, r18
     29a:	88 0f       	add	r24, r24
     29c:	99 1f       	adc	r25, r25
     29e:	88 0f       	add	r24, r24
     2a0:	99 1f       	adc	r25, r25
     2a2:	82 0f       	add	r24, r18
     2a4:	93 1f       	adc	r25, r19
     2a6:	80 93 92 00 	sts	0x0092, r24
						u16AdjustStateTimeout = 6;
     2aa:	86 e0       	ldi	r24, 0x06	; 6
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	90 93 91 00 	sts	0x0091, r25
     2b2:	80 93 90 00 	sts	0x0090, r24
     2b6:	10 c0       	rjmp	.+32     	; 0x2d8 <voidClockAdjust+0x150>
					}
					else
					{
						PORTA = u8SegNum[u8digit];
     2b8:	ab e3       	ldi	r26, 0x3B	; 59
     2ba:	b0 e0       	ldi	r27, 0x00	; 0
     2bc:	89 81       	ldd	r24, Y+1	; 0x01
     2be:	88 2f       	mov	r24, r24
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	fc 01       	movw	r30, r24
     2c4:	e0 5a       	subi	r30, 0xA0	; 160
     2c6:	ff 4f       	sbci	r31, 0xFF	; 255
     2c8:	80 81       	ld	r24, Z
     2ca:	8c 93       	st	X, r24
						u8AdjustValue += u8digit;
     2cc:	90 91 92 00 	lds	r25, 0x0092
     2d0:	89 81       	ldd	r24, Y+1	; 0x01
     2d2:	89 0f       	add	r24, r25
     2d4:	80 93 92 00 	sts	0x0092, r24
					}
					u8DigitCounter++;
     2d8:	80 91 93 00 	lds	r24, 0x0093
     2dc:	8f 5f       	subi	r24, 0xFF	; 255
     2de:	80 93 93 00 	sts	0x0093, r24
				}
				u16AdjustStateTimeout--;
     2e2:	80 91 90 00 	lds	r24, 0x0090
     2e6:	90 91 91 00 	lds	r25, 0x0091
     2ea:	01 97       	sbiw	r24, 0x01	; 1
     2ec:	90 93 91 00 	sts	0x0091, r25
     2f0:	80 93 90 00 	sts	0x0090, r24
     2f4:	42 c0       	rjmp	.+132    	; 0x37a <voidClockAdjust+0x1f2>
			}
			/* if adjust has been completed successfully go apply it */
			else if(u16AdjustStateTimeout && u8DigitCounter == 2)
     2f6:	80 91 90 00 	lds	r24, 0x0090
     2fa:	90 91 91 00 	lds	r25, 0x0091
     2fe:	00 97       	sbiw	r24, 0x00	; 0
     300:	79 f0       	breq	.+30     	; 0x320 <voidClockAdjust+0x198>
     302:	80 91 93 00 	lds	r24, 0x0093
     306:	82 30       	cpi	r24, 0x02	; 2
     308:	59 f4       	brne	.+22     	; 0x320 <voidClockAdjust+0x198>
			{
				u16AdjustState = u16KeypadStoredValue;
     30a:	80 91 8e 00 	lds	r24, 0x008E
     30e:	90 91 8f 00 	lds	r25, 0x008F
     312:	90 93 95 00 	sts	0x0095, r25
     316:	80 93 94 00 	sts	0x0094, r24
				u8FlagAdjustmentMode = 0;
     31a:	10 92 bb 00 	sts	0x00BB, r1
     31e:	2d c0       	rjmp	.+90     	; 0x37a <voidClockAdjust+0x1f2>
			}
			/* if adjust has'nt been completed successfully dismiss it */
			else
			{
				u16AdjustState = NORMAL_STATE;
     320:	10 92 95 00 	sts	0x0095, r1
     324:	10 92 94 00 	sts	0x0094, r1
				u8FlagAdjustmentMode = 0;
     328:	10 92 bb 00 	sts	0x00BB, r1
     32c:	26 c0       	rjmp	.+76     	; 0x37a <voidClockAdjust+0x1f2>
			}
			break;

		case ADJUST_SS_STATE:
			/* update seconds with the u8AdjustValue*/
			if (u8AdjustValue < 60){
     32e:	80 91 92 00 	lds	r24, 0x0092
     332:	8c 33       	cpi	r24, 0x3C	; 60
     334:	20 f4       	brcc	.+8      	; 0x33e <voidClockAdjust+0x1b6>
				counterSec = u8AdjustValue;
     336:	80 91 92 00 	lds	r24, 0x0092
     33a:	80 93 b4 00 	sts	0x00B4, r24
			}
			u16AdjustState = NORMAL_STATE;
     33e:	10 92 95 00 	sts	0x0095, r1
     342:	10 92 94 00 	sts	0x0094, r1
     346:	19 c0       	rjmp	.+50     	; 0x37a <voidClockAdjust+0x1f2>
			break;
		case ADJUST_MM_STATE:
			/* update minutes with the u8AdjustValue*/
			if (u8AdjustValue < 60){
     348:	80 91 92 00 	lds	r24, 0x0092
     34c:	8c 33       	cpi	r24, 0x3C	; 60
     34e:	20 f4       	brcc	.+8      	; 0x358 <voidClockAdjust+0x1d0>
				countermin = u8AdjustValue;
     350:	80 91 92 00 	lds	r24, 0x0092
     354:	80 93 b5 00 	sts	0x00B5, r24
			}
			u16AdjustState = NORMAL_STATE;
     358:	10 92 95 00 	sts	0x0095, r1
     35c:	10 92 94 00 	sts	0x0094, r1
     360:	0c c0       	rjmp	.+24     	; 0x37a <voidClockAdjust+0x1f2>
			break;
		case ADJUST_HH_STATE:
			/* update hours with the u8AdjustValue*/
			if (u8AdjustValue < 24){
     362:	80 91 92 00 	lds	r24, 0x0092
     366:	88 31       	cpi	r24, 0x18	; 24
     368:	20 f4       	brcc	.+8      	; 0x372 <voidClockAdjust+0x1ea>
				counterhr = u8AdjustValue;
     36a:	80 91 92 00 	lds	r24, 0x0092
     36e:	80 93 b6 00 	sts	0x00B6, r24
			}
			u16AdjustState = NORMAL_STATE;
     372:	10 92 95 00 	sts	0x0095, r1
     376:	10 92 94 00 	sts	0x0094, r1
			break;
	}
}
     37a:	0f 90       	pop	r0
     37c:	0f 90       	pop	r0
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	cf 91       	pop	r28
     386:	df 91       	pop	r29
     388:	08 95       	ret

0000038a <DIO_voidInitialize>:
#include "DIO_priv.h"
#include "DIO_int.h"
#include "DIO_reg.h"

void DIO_voidInitialize(void)
{
     38a:	df 93       	push	r29
     38c:	cf 93       	push	r28
     38e:	cd b7       	in	r28, 0x3d	; 61
     390:	de b7       	in	r29, 0x3e	; 62
	DDRA=DIO_u8_PORTA_DIRECTION;
     392:	ea e3       	ldi	r30, 0x3A	; 58
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	8f ef       	ldi	r24, 0xFF	; 255
     398:	80 83       	st	Z, r24
	DDRB=DIO_u8_PORTB_DIRECTION;
     39a:	e7 e3       	ldi	r30, 0x37	; 55
     39c:	f0 e0       	ldi	r31, 0x00	; 0
     39e:	8f ef       	ldi	r24, 0xFF	; 255
     3a0:	80 83       	st	Z, r24
	DDRC=DIO_u8_PORTC_DIRECTION;
     3a2:	e4 e3       	ldi	r30, 0x34	; 52
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
     3a6:	89 ef       	ldi	r24, 0xF9	; 249
     3a8:	80 83       	st	Z, r24
	DDRD=DIO_u8_PORTD_DIRECTION;
     3aa:	e1 e3       	ldi	r30, 0x31	; 49
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
     3ae:	8f e0       	ldi	r24, 0x0F	; 15
     3b0:	80 83       	st	Z, r24
	
}
     3b2:	cf 91       	pop	r28
     3b4:	df 91       	pop	r29
     3b6:	08 95       	ret

000003b8 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 u8PinIndexcpy,u8 u8PinValueCpy)
{
     3b8:	df 93       	push	r29
     3ba:	cf 93       	push	r28
     3bc:	00 d0       	rcall	.+0      	; 0x3be <DIO_voidSetPinValue+0x6>
     3be:	cd b7       	in	r28, 0x3d	; 61
     3c0:	de b7       	in	r29, 0x3e	; 62
     3c2:	89 83       	std	Y+1, r24	; 0x01
     3c4:	6a 83       	std	Y+2, r22	; 0x02
	
	/*check if the pin index in  PORTA	range*/
	if(  (u8PinIndexcpy >=DIO_u8_PORTA_START )&& (u8PinIndexcpy <=DIO_u8_PORTA_END))
     3c6:	89 81       	ldd	r24, Y+1	; 0x01
     3c8:	88 30       	cpi	r24, 0x08	; 8
     3ca:	60 f5       	brcc	.+88     	; 0x424 <DIO_voidSetPinValue+0x6c>
	{
		if(u8PinValueCpy == DIO_u8_HIGH)
     3cc:	8a 81       	ldd	r24, Y+2	; 0x02
     3ce:	88 23       	and	r24, r24
     3d0:	a1 f4       	brne	.+40     	; 0x3fa <DIO_voidSetPinValue+0x42>
		{
			SET_BIT(PORTA, u8PinIndexcpy);
     3d2:	ab e3       	ldi	r26, 0x3B	; 59
     3d4:	b0 e0       	ldi	r27, 0x00	; 0
     3d6:	eb e3       	ldi	r30, 0x3B	; 59
     3d8:	f0 e0       	ldi	r31, 0x00	; 0
     3da:	80 81       	ld	r24, Z
     3dc:	48 2f       	mov	r20, r24
     3de:	89 81       	ldd	r24, Y+1	; 0x01
     3e0:	28 2f       	mov	r18, r24
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	02 2e       	mov	r0, r18
     3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <DIO_voidSetPinValue+0x38>
     3ec:	88 0f       	add	r24, r24
     3ee:	99 1f       	adc	r25, r25
     3f0:	0a 94       	dec	r0
     3f2:	e2 f7       	brpl	.-8      	; 0x3ec <DIO_voidSetPinValue+0x34>
     3f4:	84 2b       	or	r24, r20
     3f6:	8c 93       	st	X, r24
     3f8:	b3 c0       	rjmp	.+358    	; 0x560 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTA, u8PinIndexcpy);
     3fa:	ab e3       	ldi	r26, 0x3B	; 59
     3fc:	b0 e0       	ldi	r27, 0x00	; 0
     3fe:	eb e3       	ldi	r30, 0x3B	; 59
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	80 81       	ld	r24, Z
     404:	48 2f       	mov	r20, r24
     406:	89 81       	ldd	r24, Y+1	; 0x01
     408:	28 2f       	mov	r18, r24
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	02 2e       	mov	r0, r18
     412:	02 c0       	rjmp	.+4      	; 0x418 <DIO_voidSetPinValue+0x60>
     414:	88 0f       	add	r24, r24
     416:	99 1f       	adc	r25, r25
     418:	0a 94       	dec	r0
     41a:	e2 f7       	brpl	.-8      	; 0x414 <DIO_voidSetPinValue+0x5c>
     41c:	80 95       	com	r24
     41e:	84 23       	and	r24, r20
     420:	8c 93       	st	X, r24
     422:	9e c0       	rjmp	.+316    	; 0x560 <DIO_voidSetPinValue+0x1a8>
		}
	}
	else if(  (u8PinIndexcpy >= DIO_u8_PORTB_START )&& (u8PinIndexcpy <= DIO_u8_PORTB_END))
     424:	89 81       	ldd	r24, Y+1	; 0x01
     426:	88 30       	cpi	r24, 0x08	; 8
     428:	90 f1       	brcs	.+100    	; 0x48e <DIO_voidSetPinValue+0xd6>
     42a:	89 81       	ldd	r24, Y+1	; 0x01
     42c:	80 31       	cpi	r24, 0x10	; 16
     42e:	78 f5       	brcc	.+94     	; 0x48e <DIO_voidSetPinValue+0xd6>
	{
		u8PinIndexcpy-= DIO_PORTA_SIZE;
     430:	89 81       	ldd	r24, Y+1	; 0x01
     432:	88 50       	subi	r24, 0x08	; 8
     434:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
     436:	8a 81       	ldd	r24, Y+2	; 0x02
     438:	88 23       	and	r24, r24
     43a:	a1 f4       	brne	.+40     	; 0x464 <DIO_voidSetPinValue+0xac>
		{
			SET_BIT(PORTB, u8PinIndexcpy);
     43c:	a8 e3       	ldi	r26, 0x38	; 56
     43e:	b0 e0       	ldi	r27, 0x00	; 0
     440:	e8 e3       	ldi	r30, 0x38	; 56
     442:	f0 e0       	ldi	r31, 0x00	; 0
     444:	80 81       	ld	r24, Z
     446:	48 2f       	mov	r20, r24
     448:	89 81       	ldd	r24, Y+1	; 0x01
     44a:	28 2f       	mov	r18, r24
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	02 2e       	mov	r0, r18
     454:	02 c0       	rjmp	.+4      	; 0x45a <DIO_voidSetPinValue+0xa2>
     456:	88 0f       	add	r24, r24
     458:	99 1f       	adc	r25, r25
     45a:	0a 94       	dec	r0
     45c:	e2 f7       	brpl	.-8      	; 0x456 <DIO_voidSetPinValue+0x9e>
     45e:	84 2b       	or	r24, r20
     460:	8c 93       	st	X, r24
     462:	7e c0       	rjmp	.+252    	; 0x560 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTB, u8PinIndexcpy);
     464:	a8 e3       	ldi	r26, 0x38	; 56
     466:	b0 e0       	ldi	r27, 0x00	; 0
     468:	e8 e3       	ldi	r30, 0x38	; 56
     46a:	f0 e0       	ldi	r31, 0x00	; 0
     46c:	80 81       	ld	r24, Z
     46e:	48 2f       	mov	r20, r24
     470:	89 81       	ldd	r24, Y+1	; 0x01
     472:	28 2f       	mov	r18, r24
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	02 2e       	mov	r0, r18
     47c:	02 c0       	rjmp	.+4      	; 0x482 <DIO_voidSetPinValue+0xca>
     47e:	88 0f       	add	r24, r24
     480:	99 1f       	adc	r25, r25
     482:	0a 94       	dec	r0
     484:	e2 f7       	brpl	.-8      	; 0x47e <DIO_voidSetPinValue+0xc6>
     486:	80 95       	com	r24
     488:	84 23       	and	r24, r20
     48a:	8c 93       	st	X, r24
     48c:	69 c0       	rjmp	.+210    	; 0x560 <DIO_voidSetPinValue+0x1a8>
		}
		
	}
	else if((u8PinIndexcpy >= DIO_u8_PORTC_START )&& (u8PinIndexcpy <= DIO_u8_PORTC_END))
     48e:	89 81       	ldd	r24, Y+1	; 0x01
     490:	80 31       	cpi	r24, 0x10	; 16
     492:	90 f1       	brcs	.+100    	; 0x4f8 <DIO_voidSetPinValue+0x140>
     494:	89 81       	ldd	r24, Y+1	; 0x01
     496:	88 31       	cpi	r24, 0x18	; 24
     498:	78 f5       	brcc	.+94     	; 0x4f8 <DIO_voidSetPinValue+0x140>
	{
		    u8PinIndexcpy -= DIO_PORTA_SIZE+DIO_PORTB_SIZE;
     49a:	89 81       	ldd	r24, Y+1	; 0x01
     49c:	80 51       	subi	r24, 0x10	; 16
     49e:	89 83       	std	Y+1, r24	; 0x01
			if(u8PinValueCpy == DIO_u8_HIGH)
     4a0:	8a 81       	ldd	r24, Y+2	; 0x02
     4a2:	88 23       	and	r24, r24
     4a4:	a1 f4       	brne	.+40     	; 0x4ce <DIO_voidSetPinValue+0x116>
			{
				SET_BIT(PORTC, u8PinIndexcpy);
     4a6:	a5 e3       	ldi	r26, 0x35	; 53
     4a8:	b0 e0       	ldi	r27, 0x00	; 0
     4aa:	e5 e3       	ldi	r30, 0x35	; 53
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	80 81       	ld	r24, Z
     4b0:	48 2f       	mov	r20, r24
     4b2:	89 81       	ldd	r24, Y+1	; 0x01
     4b4:	28 2f       	mov	r18, r24
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	02 2e       	mov	r0, r18
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <DIO_voidSetPinValue+0x10c>
     4c0:	88 0f       	add	r24, r24
     4c2:	99 1f       	adc	r25, r25
     4c4:	0a 94       	dec	r0
     4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <DIO_voidSetPinValue+0x108>
     4c8:	84 2b       	or	r24, r20
     4ca:	8c 93       	st	X, r24
     4cc:	49 c0       	rjmp	.+146    	; 0x560 <DIO_voidSetPinValue+0x1a8>
			}
			else
			{
				CLR_BIT(PORTC, u8PinIndexcpy);
     4ce:	a5 e3       	ldi	r26, 0x35	; 53
     4d0:	b0 e0       	ldi	r27, 0x00	; 0
     4d2:	e5 e3       	ldi	r30, 0x35	; 53
     4d4:	f0 e0       	ldi	r31, 0x00	; 0
     4d6:	80 81       	ld	r24, Z
     4d8:	48 2f       	mov	r20, r24
     4da:	89 81       	ldd	r24, Y+1	; 0x01
     4dc:	28 2f       	mov	r18, r24
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	02 2e       	mov	r0, r18
     4e6:	02 c0       	rjmp	.+4      	; 0x4ec <DIO_voidSetPinValue+0x134>
     4e8:	88 0f       	add	r24, r24
     4ea:	99 1f       	adc	r25, r25
     4ec:	0a 94       	dec	r0
     4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <DIO_voidSetPinValue+0x130>
     4f0:	80 95       	com	r24
     4f2:	84 23       	and	r24, r20
     4f4:	8c 93       	st	X, r24
     4f6:	34 c0       	rjmp	.+104    	; 0x560 <DIO_voidSetPinValue+0x1a8>
			}
	}
	else if((u8PinIndexcpy >=DIO_u8_PORTD_START )&& (u8PinIndexcpy <= DIO_u8_PORTD_END))
     4f8:	89 81       	ldd	r24, Y+1	; 0x01
     4fa:	88 31       	cpi	r24, 0x18	; 24
     4fc:	88 f1       	brcs	.+98     	; 0x560 <DIO_voidSetPinValue+0x1a8>
     4fe:	89 81       	ldd	r24, Y+1	; 0x01
     500:	80 32       	cpi	r24, 0x20	; 32
     502:	70 f5       	brcc	.+92     	; 0x560 <DIO_voidSetPinValue+0x1a8>
	{
		    u8PinIndexcpy -= DIO_PORTA_SIZE+DIO_PORTB_SIZE+DIO_PORTC_SIZE;
     504:	89 81       	ldd	r24, Y+1	; 0x01
     506:	88 51       	subi	r24, 0x18	; 24
     508:	89 83       	std	Y+1, r24	; 0x01
			if(u8PinValueCpy == DIO_u8_HIGH)
     50a:	8a 81       	ldd	r24, Y+2	; 0x02
     50c:	88 23       	and	r24, r24
     50e:	a1 f4       	brne	.+40     	; 0x538 <DIO_voidSetPinValue+0x180>
			{
				SET_BIT(PORTD, u8PinIndexcpy);
     510:	a2 e3       	ldi	r26, 0x32	; 50
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e2 e3       	ldi	r30, 0x32	; 50
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	80 81       	ld	r24, Z
     51a:	48 2f       	mov	r20, r24
     51c:	89 81       	ldd	r24, Y+1	; 0x01
     51e:	28 2f       	mov	r18, r24
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	02 2e       	mov	r0, r18
     528:	02 c0       	rjmp	.+4      	; 0x52e <DIO_voidSetPinValue+0x176>
     52a:	88 0f       	add	r24, r24
     52c:	99 1f       	adc	r25, r25
     52e:	0a 94       	dec	r0
     530:	e2 f7       	brpl	.-8      	; 0x52a <DIO_voidSetPinValue+0x172>
     532:	84 2b       	or	r24, r20
     534:	8c 93       	st	X, r24
     536:	14 c0       	rjmp	.+40     	; 0x560 <DIO_voidSetPinValue+0x1a8>
			}
			else
			{
				CLR_BIT(PORTD,u8PinIndexcpy);
     538:	a2 e3       	ldi	r26, 0x32	; 50
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 e3       	ldi	r30, 0x32	; 50
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	80 81       	ld	r24, Z
     542:	48 2f       	mov	r20, r24
     544:	89 81       	ldd	r24, Y+1	; 0x01
     546:	28 2f       	mov	r18, r24
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	02 2e       	mov	r0, r18
     550:	02 c0       	rjmp	.+4      	; 0x556 <DIO_voidSetPinValue+0x19e>
     552:	88 0f       	add	r24, r24
     554:	99 1f       	adc	r25, r25
     556:	0a 94       	dec	r0
     558:	e2 f7       	brpl	.-8      	; 0x552 <DIO_voidSetPinValue+0x19a>
     55a:	80 95       	com	r24
     55c:	84 23       	and	r24, r20
     55e:	8c 93       	st	X, r24
			}
	}
		
}
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	cf 91       	pop	r28
     566:	df 91       	pop	r29
     568:	08 95       	ret

0000056a <DIO_u8GetPinValue>:

 u8 DIO_u8GetPinValue(u8 u8PinIndexcpy)
{
     56a:	df 93       	push	r29
     56c:	cf 93       	push	r28
     56e:	00 d0       	rcall	.+0      	; 0x570 <DIO_u8GetPinValue+0x6>
     570:	cd b7       	in	r28, 0x3d	; 61
     572:	de b7       	in	r29, 0x3e	; 62
     574:	8a 83       	std	Y+2, r24	; 0x02
	 u8 u8ReturnValue;
	if(  (u8PinIndexcpy >= DIO_u8_PORTA_START )&& (u8PinIndexcpy <= DIO_u8_PORTA_END))
     576:	8a 81       	ldd	r24, Y+2	; 0x02
     578:	88 30       	cpi	r24, 0x08	; 8
     57a:	c0 f4       	brcc	.+48     	; 0x5ac <DIO_u8GetPinValue+0x42>
	{
		if(GET_BIT(PINA, u8PinIndexcpy) == 1)
     57c:	e9 e3       	ldi	r30, 0x39	; 57
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	80 81       	ld	r24, Z
     582:	28 2f       	mov	r18, r24
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	8a 81       	ldd	r24, Y+2	; 0x02
     588:	88 2f       	mov	r24, r24
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	a9 01       	movw	r20, r18
     58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_u8GetPinValue+0x2a>
     590:	55 95       	asr	r21
     592:	47 95       	ror	r20
     594:	8a 95       	dec	r24
     596:	e2 f7       	brpl	.-8      	; 0x590 <DIO_u8GetPinValue+0x26>
     598:	ca 01       	movw	r24, r20
     59a:	81 70       	andi	r24, 0x01	; 1
     59c:	90 70       	andi	r25, 0x00	; 0
     59e:	88 23       	and	r24, r24
     5a0:	11 f0       	breq	.+4      	; 0x5a6 <DIO_u8GetPinValue+0x3c>
		{
			u8ReturnValue=DIO_u8_HIGH;
     5a2:	19 82       	std	Y+1, r1	; 0x01
     5a4:	65 c0       	rjmp	.+202    	; 0x670 <DIO_u8GetPinValue+0x106>
		}
		else
		{
			u8ReturnValue=DIO_u8_LOW;
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	89 83       	std	Y+1, r24	; 0x01
     5aa:	62 c0       	rjmp	.+196    	; 0x670 <DIO_u8GetPinValue+0x106>
		}

	}
	else if(  (u8PinIndexcpy >=DIO_u8_PORTB_START )&& (u8PinIndexcpy <=DIO_u8_PORTB_END))
     5ac:	8a 81       	ldd	r24, Y+2	; 0x02
     5ae:	88 30       	cpi	r24, 0x08	; 8
     5b0:	f0 f0       	brcs	.+60     	; 0x5ee <DIO_u8GetPinValue+0x84>
     5b2:	8a 81       	ldd	r24, Y+2	; 0x02
     5b4:	80 31       	cpi	r24, 0x10	; 16
     5b6:	d8 f4       	brcc	.+54     	; 0x5ee <DIO_u8GetPinValue+0x84>
	{
		u8PinIndexcpy-=DIO_PORTA_SIZE;
     5b8:	8a 81       	ldd	r24, Y+2	; 0x02
     5ba:	88 50       	subi	r24, 0x08	; 8
     5bc:	8a 83       	std	Y+2, r24	; 0x02
		if(GET_BIT(PINB,u8PinIndexcpy) == 1)
     5be:	e6 e3       	ldi	r30, 0x36	; 54
     5c0:	f0 e0       	ldi	r31, 0x00	; 0
     5c2:	80 81       	ld	r24, Z
     5c4:	28 2f       	mov	r18, r24
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	8a 81       	ldd	r24, Y+2	; 0x02
     5ca:	88 2f       	mov	r24, r24
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	a9 01       	movw	r20, r18
     5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_u8GetPinValue+0x6c>
     5d2:	55 95       	asr	r21
     5d4:	47 95       	ror	r20
     5d6:	8a 95       	dec	r24
     5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_u8GetPinValue+0x68>
     5da:	ca 01       	movw	r24, r20
     5dc:	81 70       	andi	r24, 0x01	; 1
     5de:	90 70       	andi	r25, 0x00	; 0
     5e0:	88 23       	and	r24, r24
     5e2:	11 f0       	breq	.+4      	; 0x5e8 <DIO_u8GetPinValue+0x7e>
		{
			u8ReturnValue=DIO_u8_HIGH;
     5e4:	19 82       	std	Y+1, r1	; 0x01
     5e6:	44 c0       	rjmp	.+136    	; 0x670 <DIO_u8GetPinValue+0x106>
		}
		else
		{
			u8ReturnValue=DIO_u8_LOW;
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	89 83       	std	Y+1, r24	; 0x01
     5ec:	41 c0       	rjmp	.+130    	; 0x670 <DIO_u8GetPinValue+0x106>
		}

	}
	else if((u8PinIndexcpy >=DIO_u8_PORTC_START )&& (u8PinIndexcpy <=DIO_u8_PORTC_END))
     5ee:	8a 81       	ldd	r24, Y+2	; 0x02
     5f0:	80 31       	cpi	r24, 0x10	; 16
     5f2:	f0 f0       	brcs	.+60     	; 0x630 <DIO_u8GetPinValue+0xc6>
     5f4:	8a 81       	ldd	r24, Y+2	; 0x02
     5f6:	88 31       	cpi	r24, 0x18	; 24
     5f8:	d8 f4       	brcc	.+54     	; 0x630 <DIO_u8GetPinValue+0xc6>
	{
		u8PinIndexcpy-=DIO_PORTA_SIZE+DIO_PORTB_SIZE;
     5fa:	8a 81       	ldd	r24, Y+2	; 0x02
     5fc:	80 51       	subi	r24, 0x10	; 16
     5fe:	8a 83       	std	Y+2, r24	; 0x02
		if(GET_BIT(PINC,u8PinIndexcpy) == 1)
     600:	e3 e3       	ldi	r30, 0x33	; 51
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	80 81       	ld	r24, Z
     606:	28 2f       	mov	r18, r24
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	8a 81       	ldd	r24, Y+2	; 0x02
     60c:	88 2f       	mov	r24, r24
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	a9 01       	movw	r20, r18
     612:	02 c0       	rjmp	.+4      	; 0x618 <DIO_u8GetPinValue+0xae>
     614:	55 95       	asr	r21
     616:	47 95       	ror	r20
     618:	8a 95       	dec	r24
     61a:	e2 f7       	brpl	.-8      	; 0x614 <DIO_u8GetPinValue+0xaa>
     61c:	ca 01       	movw	r24, r20
     61e:	81 70       	andi	r24, 0x01	; 1
     620:	90 70       	andi	r25, 0x00	; 0
     622:	88 23       	and	r24, r24
     624:	11 f0       	breq	.+4      	; 0x62a <DIO_u8GetPinValue+0xc0>
		{
			u8ReturnValue=DIO_u8_HIGH;
     626:	19 82       	std	Y+1, r1	; 0x01
     628:	23 c0       	rjmp	.+70     	; 0x670 <DIO_u8GetPinValue+0x106>
		}
		else
		{
			u8ReturnValue=DIO_u8_LOW;
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	89 83       	std	Y+1, r24	; 0x01
     62e:	20 c0       	rjmp	.+64     	; 0x670 <DIO_u8GetPinValue+0x106>
		}
	}
	else if((u8PinIndexcpy >=DIO_u8_PORTD_START )&& (u8PinIndexcpy <=DIO_u8_PORTD_END))
     630:	8a 81       	ldd	r24, Y+2	; 0x02
     632:	88 31       	cpi	r24, 0x18	; 24
     634:	e8 f0       	brcs	.+58     	; 0x670 <DIO_u8GetPinValue+0x106>
     636:	8a 81       	ldd	r24, Y+2	; 0x02
     638:	80 32       	cpi	r24, 0x20	; 32
     63a:	d0 f4       	brcc	.+52     	; 0x670 <DIO_u8GetPinValue+0x106>
	{
		u8PinIndexcpy-=DIO_PORTA_SIZE+DIO_PORTB_SIZE+DIO_PORTC_SIZE;
     63c:	8a 81       	ldd	r24, Y+2	; 0x02
     63e:	88 51       	subi	r24, 0x18	; 24
     640:	8a 83       	std	Y+2, r24	; 0x02
		if(GET_BIT(PIND,u8PinIndexcpy) == 1)
     642:	e0 e3       	ldi	r30, 0x30	; 48
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	80 81       	ld	r24, Z
     648:	28 2f       	mov	r18, r24
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	8a 81       	ldd	r24, Y+2	; 0x02
     64e:	88 2f       	mov	r24, r24
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	a9 01       	movw	r20, r18
     654:	02 c0       	rjmp	.+4      	; 0x65a <DIO_u8GetPinValue+0xf0>
     656:	55 95       	asr	r21
     658:	47 95       	ror	r20
     65a:	8a 95       	dec	r24
     65c:	e2 f7       	brpl	.-8      	; 0x656 <DIO_u8GetPinValue+0xec>
     65e:	ca 01       	movw	r24, r20
     660:	81 70       	andi	r24, 0x01	; 1
     662:	90 70       	andi	r25, 0x00	; 0
     664:	88 23       	and	r24, r24
     666:	11 f0       	breq	.+4      	; 0x66c <DIO_u8GetPinValue+0x102>
		{
			u8ReturnValue=DIO_u8_HIGH;
     668:	19 82       	std	Y+1, r1	; 0x01
     66a:	02 c0       	rjmp	.+4      	; 0x670 <DIO_u8GetPinValue+0x106>
		}
		else
		{
			u8ReturnValue=DIO_u8_LOW;
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	89 83       	std	Y+1, r24	; 0x01
		}


	}
	return u8ReturnValue;
     670:	89 81       	ldd	r24, Y+1	; 0x01
}
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	cf 91       	pop	r28
     678:	df 91       	pop	r29
     67a:	08 95       	ret

0000067c <OS_voidInitialization>:
#define InitialValue  0

volatile u32 u32Tick_counter = InitialValue;
volatile u8	 u8Tick_Flag = InitialValue;

void OS_voidInitialization(void){
     67c:	df 93       	push	r29
     67e:	cf 93       	push	r28
     680:	cd b7       	in	r28, 0x3d	; 61
     682:	de b7       	in	r29, 0x3e	; 62

}
     684:	cf 91       	pop	r28
     686:	df 91       	pop	r29
     688:	08 95       	ret

0000068a <OS_voidStart>:

void OS_voidStart(void)
{
     68a:	ef 92       	push	r14
     68c:	ff 92       	push	r15
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	df 93       	push	r29
     694:	cf 93       	push	r28
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
	static u8 u8LoopCounterLoc;
	while(1){
		if (1 == u8Tick_Flag)
     69a:	80 91 9a 00 	lds	r24, 0x009A
     69e:	81 30       	cpi	r24, 0x01	; 1
     6a0:	e1 f7       	brne	.-8      	; 0x69a <OS_voidStart+0x10>
		{
			u8Tick_Flag = 0;
     6a2:	10 92 9a 00 	sts	0x009A, r1
			for(u8LoopCounterLoc = InitialValue ; u8LoopCounterLoc < u8NumberOfTasks; u8LoopCounterLoc++)
     6a6:	10 92 9b 00 	sts	0x009B, r1
     6aa:	37 c0       	rjmp	.+110    	; 0x71a <OS_voidStart+0x90>
			{
				if((u32Tick_counter % OS_cfg[u8LoopCounterLoc].u16Periodicity) == InitialValue)
     6ac:	e0 90 96 00 	lds	r14, 0x0096
     6b0:	f0 90 97 00 	lds	r15, 0x0097
     6b4:	00 91 98 00 	lds	r16, 0x0098
     6b8:	10 91 99 00 	lds	r17, 0x0099
     6bc:	80 91 9b 00 	lds	r24, 0x009B
     6c0:	88 2f       	mov	r24, r24
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	88 0f       	add	r24, r24
     6c6:	99 1f       	adc	r25, r25
     6c8:	01 96       	adiw	r24, 0x01	; 1
     6ca:	88 0f       	add	r24, r24
     6cc:	99 1f       	adc	r25, r25
     6ce:	fc 01       	movw	r30, r24
     6d0:	e5 59       	subi	r30, 0x95	; 149
     6d2:	ff 4f       	sbci	r31, 0xFF	; 255
     6d4:	80 81       	ld	r24, Z
     6d6:	91 81       	ldd	r25, Z+1	; 0x01
     6d8:	9c 01       	movw	r18, r24
     6da:	40 e0       	ldi	r20, 0x00	; 0
     6dc:	50 e0       	ldi	r21, 0x00	; 0
     6de:	c8 01       	movw	r24, r16
     6e0:	b7 01       	movw	r22, r14
     6e2:	0e 94 41 09 	call	0x1282	; 0x1282 <__udivmodsi4>
     6e6:	dc 01       	movw	r26, r24
     6e8:	cb 01       	movw	r24, r22
     6ea:	00 97       	sbiw	r24, 0x00	; 0
     6ec:	a1 05       	cpc	r26, r1
     6ee:	b1 05       	cpc	r27, r1
     6f0:	79 f4       	brne	.+30     	; 0x710 <OS_voidStart+0x86>
				{
					OS_cfg[u8LoopCounterLoc].pfTask();
     6f2:	80 91 9b 00 	lds	r24, 0x009B
     6f6:	88 2f       	mov	r24, r24
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	88 0f       	add	r24, r24
     6fc:	99 1f       	adc	r25, r25
     6fe:	88 0f       	add	r24, r24
     700:	99 1f       	adc	r25, r25
     702:	fc 01       	movw	r30, r24
     704:	e5 59       	subi	r30, 0x95	; 149
     706:	ff 4f       	sbci	r31, 0xFF	; 255
     708:	01 90       	ld	r0, Z+
     70a:	f0 81       	ld	r31, Z
     70c:	e0 2d       	mov	r30, r0
     70e:	09 95       	icall
	static u8 u8LoopCounterLoc;
	while(1){
		if (1 == u8Tick_Flag)
		{
			u8Tick_Flag = 0;
			for(u8LoopCounterLoc = InitialValue ; u8LoopCounterLoc < u8NumberOfTasks; u8LoopCounterLoc++)
     710:	80 91 9b 00 	lds	r24, 0x009B
     714:	8f 5f       	subi	r24, 0xFF	; 255
     716:	80 93 9b 00 	sts	0x009B, r24
     71a:	90 91 9b 00 	lds	r25, 0x009B
     71e:	80 91 8b 00 	lds	r24, 0x008B
     722:	98 17       	cp	r25, r24
     724:	18 f2       	brcs	.-122    	; 0x6ac <OS_voidStart+0x22>
     726:	b9 cf       	rjmp	.-142    	; 0x69a <OS_voidStart+0x10>

00000728 <__vector_10>:
}


/* Tick Timer */
ISR (TIMER0_COMP_vect)
{
     728:	1f 92       	push	r1
     72a:	0f 92       	push	r0
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	0f 92       	push	r0
     730:	11 24       	eor	r1, r1
     732:	8f 93       	push	r24
     734:	9f 93       	push	r25
     736:	af 93       	push	r26
     738:	bf 93       	push	r27
     73a:	df 93       	push	r29
     73c:	cf 93       	push	r28
     73e:	cd b7       	in	r28, 0x3d	; 61
     740:	de b7       	in	r29, 0x3e	; 62
	u32Tick_counter++;
     742:	80 91 96 00 	lds	r24, 0x0096
     746:	90 91 97 00 	lds	r25, 0x0097
     74a:	a0 91 98 00 	lds	r26, 0x0098
     74e:	b0 91 99 00 	lds	r27, 0x0099
     752:	01 96       	adiw	r24, 0x01	; 1
     754:	a1 1d       	adc	r26, r1
     756:	b1 1d       	adc	r27, r1
     758:	80 93 96 00 	sts	0x0096, r24
     75c:	90 93 97 00 	sts	0x0097, r25
     760:	a0 93 98 00 	sts	0x0098, r26
     764:	b0 93 99 00 	sts	0x0099, r27
	u8Tick_Flag = 1 ;
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	80 93 9a 00 	sts	0x009A, r24
}
     76e:	cf 91       	pop	r28
     770:	df 91       	pop	r29
     772:	bf 91       	pop	r27
     774:	af 91       	pop	r26
     776:	9f 91       	pop	r25
     778:	8f 91       	pop	r24
     77a:	0f 90       	pop	r0
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	0f 90       	pop	r0
     780:	1f 90       	pop	r1
     782:	18 95       	reti

00000784 <TIMER0_voidInit>:
#include "TIM_int.h"
#include "TIM_reg.h"

/* set timer0 to work in CTC mode */
void TIMER0_voidInit()
{
     784:	df 93       	push	r29
     786:	cf 93       	push	r28
     788:	cd b7       	in	r28, 0x3d	; 61
     78a:	de b7       	in	r29, 0x3e	; 62
	/* clear tmr1 flag */
	/* Activating Compare PIN 1*/
	SET_BIT(TIFR, 1);
     78c:	a8 e5       	ldi	r26, 0x58	; 88
     78e:	b0 e0       	ldi	r27, 0x00	; 0
     790:	e8 e5       	ldi	r30, 0x58	; 88
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	80 81       	ld	r24, Z
     796:	82 60       	ori	r24, 0x02	; 2
     798:	8c 93       	st	X, r24

	/*to select CTC mode */
	SET_BIT(TCCR0, WGM01);
     79a:	a3 e5       	ldi	r26, 0x53	; 83
     79c:	b0 e0       	ldi	r27, 0x00	; 0
     79e:	e3 e5       	ldi	r30, 0x53	; 83
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	80 81       	ld	r24, Z
     7a4:	88 60       	ori	r24, 0x08	; 8
     7a6:	8c 93       	st	X, r24

	/*  set the pre-scaler to: 1024 */
	SET_BIT(TCCR0, CS00);
     7a8:	a3 e5       	ldi	r26, 0x53	; 83
     7aa:	b0 e0       	ldi	r27, 0x00	; 0
     7ac:	e3 e5       	ldi	r30, 0x53	; 83
     7ae:	f0 e0       	ldi	r31, 0x00	; 0
     7b0:	80 81       	ld	r24, Z
     7b2:	81 60       	ori	r24, 0x01	; 1
     7b4:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
     7b6:	a3 e5       	ldi	r26, 0x53	; 83
     7b8:	b0 e0       	ldi	r27, 0x00	; 0
     7ba:	e3 e5       	ldi	r30, 0x53	; 83
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	80 81       	ld	r24, Z
     7c0:	8d 7f       	andi	r24, 0xFD	; 253
     7c2:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS02);
     7c4:	a3 e5       	ldi	r26, 0x53	; 83
     7c6:	b0 e0       	ldi	r27, 0x00	; 0
     7c8:	e3 e5       	ldi	r30, 0x53	; 83
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	80 81       	ld	r24, Z
     7ce:	84 60       	ori	r24, 0x04	; 4
     7d0:	8c 93       	st	X, r24
	/* set OCR0 compare register */
	OCR0 = 156; // OS Tick = 20 MS
     7d2:	ec e5       	ldi	r30, 0x5C	; 92
     7d4:	f0 e0       	ldi	r31, 0x00	; 0
     7d6:	8c e9       	ldi	r24, 0x9C	; 156
     7d8:	80 83       	st	Z, r24

	/* enable tmr0 interrupt */
	SET_BIT(TIMSK, OCIE0);
     7da:	a9 e5       	ldi	r26, 0x59	; 89
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e9 e5       	ldi	r30, 0x59	; 89
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	80 81       	ld	r24, Z
     7e4:	82 60       	ori	r24, 0x02	; 2
     7e6:	8c 93       	st	X, r24
}
     7e8:	cf 91       	pop	r28
     7ea:	df 91       	pop	r29
     7ec:	08 95       	ret

000007ee <UART_Init>:
#include  "UART_cfg.h"
#include "GIE_int.h"

static UART_t UART_data = {{0}, 0};
void UART_Init(void)
{
     7ee:	df 93       	push	r29
     7f0:	cf 93       	push	r28
     7f2:	00 d0       	rcall	.+0      	; 0x7f4 <UART_Init+0x6>
     7f4:	cd b7       	in	r28, 0x3d	; 61
     7f6:	de b7       	in	r29, 0x3e	; 62
	/* Set baud rate */
	u16 baud = 51;
     7f8:	83 e3       	ldi	r24, 0x33	; 51
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	9a 83       	std	Y+2, r25	; 0x02
     7fe:	89 83       	std	Y+1, r24	; 0x01
	/* baud = ((u16)((u32)F_CPU/(u32)(16 * BAUD_RATE)) -1);*/
	UBRRH = (u8)(baud>>8);
     800:	e0 e4       	ldi	r30, 0x40	; 64
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	89 81       	ldd	r24, Y+1	; 0x01
     806:	9a 81       	ldd	r25, Y+2	; 0x02
     808:	89 2f       	mov	r24, r25
     80a:	99 27       	eor	r25, r25
     80c:	80 83       	st	Z, r24
	UBRRL = (u8)baud;
     80e:	e9 e2       	ldi	r30, 0x29	; 41
     810:	f0 e0       	ldi	r31, 0x00	; 0
     812:	89 81       	ldd	r24, Y+1	; 0x01
     814:	80 83       	st	Z, r24
	/* Enable receiver and transmitter */
	UCSRB |= (1<<RXEN)|(1<<TXEN);
     816:	aa e2       	ldi	r26, 0x2A	; 42
     818:	b0 e0       	ldi	r27, 0x00	; 0
     81a:	ea e2       	ldi	r30, 0x2A	; 42
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	80 81       	ld	r24, Z
     820:	88 61       	ori	r24, 0x18	; 24
     822:	8c 93       	st	X, r24
	/* Set frame format: 8data, 2stop bit */
	UCSRC |= (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
     824:	a0 e4       	ldi	r26, 0x40	; 64
     826:	b0 e0       	ldi	r27, 0x00	; 0
     828:	e0 e4       	ldi	r30, 0x40	; 64
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	80 81       	ld	r24, Z
     82e:	8e 68       	ori	r24, 0x8E	; 142
     830:	8c 93       	st	X, r24
	/* Enable RX Interrupt */
	UCSRB |= (1<<RXCIE);
     832:	aa e2       	ldi	r26, 0x2A	; 42
     834:	b0 e0       	ldi	r27, 0x00	; 0
     836:	ea e2       	ldi	r30, 0x2A	; 42
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	80 81       	ld	r24, Z
     83c:	80 68       	ori	r24, 0x80	; 128
     83e:	8c 93       	st	X, r24
}
     840:	0f 90       	pop	r0
     842:	0f 90       	pop	r0
     844:	cf 91       	pop	r28
     846:	df 91       	pop	r29
     848:	08 95       	ret

0000084a <UART_Transmit>:

void UART_Transmit(u8* data, u16 Len)
{
     84a:	df 93       	push	r29
     84c:	cf 93       	push	r28
     84e:	00 d0       	rcall	.+0      	; 0x850 <UART_Transmit+0x6>
     850:	00 d0       	rcall	.+0      	; 0x852 <UART_Transmit+0x8>
     852:	00 d0       	rcall	.+0      	; 0x854 <UART_Transmit+0xa>
     854:	cd b7       	in	r28, 0x3d	; 61
     856:	de b7       	in	r29, 0x3e	; 62
     858:	9c 83       	std	Y+4, r25	; 0x04
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	7e 83       	std	Y+6, r23	; 0x06
     85e:	6d 83       	std	Y+5, r22	; 0x05
	/* Loop that */
	u16 u16CountrLoopLoc;
	for (u16CountrLoopLoc = 0; u16CountrLoopLoc < Len; u16CountrLoopLoc++)
     860:	1a 82       	std	Y+2, r1	; 0x02
     862:	19 82       	std	Y+1, r1	; 0x01
     864:	19 c0       	rjmp	.+50     	; 0x898 <__stack+0x39>
	{

		/* Wait for empty transmit buffer */
		while ( !( UCSRA & (1<<UDRE)));
     866:	eb e2       	ldi	r30, 0x2B	; 43
     868:	f0 e0       	ldi	r31, 0x00	; 0
     86a:	80 81       	ld	r24, Z
     86c:	88 2f       	mov	r24, r24
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	80 72       	andi	r24, 0x20	; 32
     872:	90 70       	andi	r25, 0x00	; 0
     874:	00 97       	sbiw	r24, 0x00	; 0
     876:	b9 f3       	breq	.-18     	; 0x866 <__stack+0x7>
		/* Put data into buffer, sends the data */
		UDR = data[u16CountrLoopLoc];
     878:	ac e2       	ldi	r26, 0x2C	; 44
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	2b 81       	ldd	r18, Y+3	; 0x03
     87e:	3c 81       	ldd	r19, Y+4	; 0x04
     880:	89 81       	ldd	r24, Y+1	; 0x01
     882:	9a 81       	ldd	r25, Y+2	; 0x02
     884:	f9 01       	movw	r30, r18
     886:	e8 0f       	add	r30, r24
     888:	f9 1f       	adc	r31, r25
     88a:	80 81       	ld	r24, Z
     88c:	8c 93       	st	X, r24

void UART_Transmit(u8* data, u16 Len)
{
	/* Loop that */
	u16 u16CountrLoopLoc;
	for (u16CountrLoopLoc = 0; u16CountrLoopLoc < Len; u16CountrLoopLoc++)
     88e:	89 81       	ldd	r24, Y+1	; 0x01
     890:	9a 81       	ldd	r25, Y+2	; 0x02
     892:	01 96       	adiw	r24, 0x01	; 1
     894:	9a 83       	std	Y+2, r25	; 0x02
     896:	89 83       	std	Y+1, r24	; 0x01
     898:	29 81       	ldd	r18, Y+1	; 0x01
     89a:	3a 81       	ldd	r19, Y+2	; 0x02
     89c:	8d 81       	ldd	r24, Y+5	; 0x05
     89e:	9e 81       	ldd	r25, Y+6	; 0x06
     8a0:	28 17       	cp	r18, r24
     8a2:	39 07       	cpc	r19, r25
     8a4:	00 f3       	brcs	.-64     	; 0x866 <__stack+0x7>
		/* Wait for empty transmit buffer */
		while ( !( UCSRA & (1<<UDRE)));
		/* Put data into buffer, sends the data */
		UDR = data[u16CountrLoopLoc];
	}
}
     8a6:	26 96       	adiw	r28, 0x06	; 6
     8a8:	0f b6       	in	r0, 0x3f	; 63
     8aa:	f8 94       	cli
     8ac:	de bf       	out	0x3e, r29	; 62
     8ae:	0f be       	out	0x3f, r0	; 63
     8b0:	cd bf       	out	0x3d, r28	; 61
     8b2:	cf 91       	pop	r28
     8b4:	df 91       	pop	r29
     8b6:	08 95       	ret

000008b8 <UART_Receive>:


void UART_Receive(u8 *data, u16 *len)
{
     8b8:	df 93       	push	r29
     8ba:	cf 93       	push	r28
     8bc:	00 d0       	rcall	.+0      	; 0x8be <UART_Receive+0x6>
     8be:	00 d0       	rcall	.+0      	; 0x8c0 <UART_Receive+0x8>
     8c0:	00 d0       	rcall	.+0      	; 0x8c2 <UART_Receive+0xa>
     8c2:	cd b7       	in	r28, 0x3d	; 61
     8c4:	de b7       	in	r29, 0x3e	; 62
     8c6:	9c 83       	std	Y+4, r25	; 0x04
     8c8:	8b 83       	std	Y+3, r24	; 0x03
     8ca:	7e 83       	std	Y+6, r23	; 0x06
     8cc:	6d 83       	std	Y+5, r22	; 0x05
	u16 u16CountrLoopLoc;
	/* Disabling the Global interrupt to ensure*/
	GIE_DISABLE();
     8ce:	af e5       	ldi	r26, 0x5F	; 95
     8d0:	b0 e0       	ldi	r27, 0x00	; 0
     8d2:	ef e5       	ldi	r30, 0x5F	; 95
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
     8d6:	80 81       	ld	r24, Z
     8d8:	8f 77       	andi	r24, 0x7F	; 127
     8da:	8c 93       	st	X, r24
	/* Disable RX Interrupt */
	UCSRB &= ~(1<<RXCIE);
     8dc:	aa e2       	ldi	r26, 0x2A	; 42
     8de:	b0 e0       	ldi	r27, 0x00	; 0
     8e0:	ea e2       	ldi	r30, 0x2A	; 42
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	80 81       	ld	r24, Z
     8e6:	8f 77       	andi	r24, 0x7F	; 127
     8e8:	8c 93       	st	X, r24


	/* return the size of received data */
	*len = UART_data.RxBufferSize;
     8ea:	80 91 a6 00 	lds	r24, 0x00A6
     8ee:	88 2f       	mov	r24, r24
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	ed 81       	ldd	r30, Y+5	; 0x05
     8f4:	fe 81       	ldd	r31, Y+6	; 0x06
     8f6:	91 83       	std	Z+1, r25	; 0x01
     8f8:	80 83       	st	Z, r24

	/* return the received data into our given array */
	for (u16CountrLoopLoc = 0; u16CountrLoopLoc < UART_data.RxBufferSize; u16CountrLoopLoc++)
     8fa:	1a 82       	std	Y+2, r1	; 0x02
     8fc:	19 82       	std	Y+1, r1	; 0x01
     8fe:	13 c0       	rjmp	.+38     	; 0x926 <UART_Receive+0x6e>
	{
		data[u16CountrLoopLoc] = UART_data.RxBuffer[u16CountrLoopLoc];
     900:	2b 81       	ldd	r18, Y+3	; 0x03
     902:	3c 81       	ldd	r19, Y+4	; 0x04
     904:	89 81       	ldd	r24, Y+1	; 0x01
     906:	9a 81       	ldd	r25, Y+2	; 0x02
     908:	d9 01       	movw	r26, r18
     90a:	a8 0f       	add	r26, r24
     90c:	b9 1f       	adc	r27, r25
     90e:	89 81       	ldd	r24, Y+1	; 0x01
     910:	9a 81       	ldd	r25, Y+2	; 0x02
     912:	fc 01       	movw	r30, r24
     914:	e4 56       	subi	r30, 0x64	; 100
     916:	ff 4f       	sbci	r31, 0xFF	; 255
     918:	80 81       	ld	r24, Z
     91a:	8c 93       	st	X, r24

	/* return the size of received data */
	*len = UART_data.RxBufferSize;

	/* return the received data into our given array */
	for (u16CountrLoopLoc = 0; u16CountrLoopLoc < UART_data.RxBufferSize; u16CountrLoopLoc++)
     91c:	89 81       	ldd	r24, Y+1	; 0x01
     91e:	9a 81       	ldd	r25, Y+2	; 0x02
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	9a 83       	std	Y+2, r25	; 0x02
     924:	89 83       	std	Y+1, r24	; 0x01
     926:	80 91 a6 00 	lds	r24, 0x00A6
     92a:	28 2f       	mov	r18, r24
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	89 81       	ldd	r24, Y+1	; 0x01
     930:	9a 81       	ldd	r25, Y+2	; 0x02
     932:	82 17       	cp	r24, r18
     934:	93 07       	cpc	r25, r19
     936:	20 f3       	brcs	.-56     	; 0x900 <UART_Receive+0x48>
	{
		data[u16CountrLoopLoc] = UART_data.RxBuffer[u16CountrLoopLoc];
	}

	/* reset the buffer counter */
	UART_data.RxBufferSize = 0;
     938:	10 92 a6 00 	sts	0x00A6, r1

	/* Enable RX Interrupt */
	UCSRB |= (1<<RXCIE);
     93c:	aa e2       	ldi	r26, 0x2A	; 42
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	ea e2       	ldi	r30, 0x2A	; 42
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	80 81       	ld	r24, Z
     946:	80 68       	ori	r24, 0x80	; 128
     948:	8c 93       	st	X, r24
	/* Enabling the global interrupt */
	GIE_ENABLE();
     94a:	af e5       	ldi	r26, 0x5F	; 95
     94c:	b0 e0       	ldi	r27, 0x00	; 0
     94e:	ef e5       	ldi	r30, 0x5F	; 95
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	80 81       	ld	r24, Z
     954:	80 68       	ori	r24, 0x80	; 128
     956:	8c 93       	st	X, r24
}
     958:	26 96       	adiw	r28, 0x06	; 6
     95a:	0f b6       	in	r0, 0x3f	; 63
     95c:	f8 94       	cli
     95e:	de bf       	out	0x3e, r29	; 62
     960:	0f be       	out	0x3f, r0	; 63
     962:	cd bf       	out	0x3d, r28	; 61
     964:	cf 91       	pop	r28
     966:	df 91       	pop	r29
     968:	08 95       	ret

0000096a <__vector_13>:

/* Enabling USART, Rx Complete Based on vector table from data sheet page 42*/
void __vector_13 (void) __attribute__((signal, used));
void __vector_13 (void)
{
     96a:	1f 92       	push	r1
     96c:	0f 92       	push	r0
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	0f 92       	push	r0
     972:	11 24       	eor	r1, r1
     974:	2f 93       	push	r18
     976:	8f 93       	push	r24
     978:	9f 93       	push	r25
     97a:	ef 93       	push	r30
     97c:	ff 93       	push	r31
     97e:	df 93       	push	r29
     980:	cf 93       	push	r28
     982:	cd b7       	in	r28, 0x3d	; 61
     984:	de b7       	in	r29, 0x3e	; 62
	if(UART_data.RxBufferSize < 9)
     986:	80 91 a6 00 	lds	r24, 0x00A6
     98a:	89 30       	cpi	r24, 0x09	; 9
     98c:	80 f4       	brcc	.+32     	; 0x9ae <__vector_13+0x44>
	{
		UART_data.RxBuffer[UART_data.RxBufferSize] = UDR;
     98e:	80 91 a6 00 	lds	r24, 0x00A6
     992:	88 2f       	mov	r24, r24
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	ec e2       	ldi	r30, 0x2C	; 44
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	20 81       	ld	r18, Z
     99c:	fc 01       	movw	r30, r24
     99e:	e4 56       	subi	r30, 0x64	; 100
     9a0:	ff 4f       	sbci	r31, 0xFF	; 255
     9a2:	20 83       	st	Z, r18
		UART_data.RxBufferSize++;
     9a4:	80 91 a6 00 	lds	r24, 0x00A6
     9a8:	8f 5f       	subi	r24, 0xFF	; 255
     9aa:	80 93 a6 00 	sts	0x00A6, r24
	}
}
     9ae:	cf 91       	pop	r28
     9b0:	df 91       	pop	r29
     9b2:	ff 91       	pop	r31
     9b4:	ef 91       	pop	r30
     9b6:	9f 91       	pop	r25
     9b8:	8f 91       	pop	r24
     9ba:	2f 91       	pop	r18
     9bc:	0f 90       	pop	r0
     9be:	0f be       	out	0x3f, r0	; 63
     9c0:	0f 90       	pop	r0
     9c2:	1f 90       	pop	r1
     9c4:	18 95       	reti

000009c6 <voidRecieveFunc>:
#include "STD_TYPES.h"
#include "DIO_int.h"
#include "UART.h"


void voidRecieveFunc(void){
     9c6:	df 93       	push	r29
     9c8:	cf 93       	push	r28
     9ca:	00 d0       	rcall	.+0      	; 0x9cc <voidRecieveFunc+0x6>
     9cc:	0f 92       	push	r0
     9ce:	cd b7       	in	r28, 0x3d	; 61
     9d0:	de b7       	in	r29, 0x3e	; 62
	u8 data;
	u16 len;
	UART_Receive(&data, &len);
     9d2:	9e 01       	movw	r18, r28
     9d4:	2e 5f       	subi	r18, 0xFE	; 254
     9d6:	3f 4f       	sbci	r19, 0xFF	; 255
     9d8:	ce 01       	movw	r24, r28
     9da:	01 96       	adiw	r24, 0x01	; 1
     9dc:	b9 01       	movw	r22, r18
     9de:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <UART_Receive>
	if (0xFF == data)
     9e2:	89 81       	ldd	r24, Y+1	; 0x01
     9e4:	8f 3f       	cpi	r24, 0xFF	; 255
     9e6:	29 f4       	brne	.+10     	; 0x9f2 <voidRecieveFunc+0x2c>
	{
		DIO_voidSetPinValue(8, DIO_u8_HIGH);
     9e8:	88 e0       	ldi	r24, 0x08	; 8
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
     9f0:	04 c0       	rjmp	.+8      	; 0x9fa <voidRecieveFunc+0x34>
	}
	else
	{
		DIO_voidSetPinValue(8, DIO_u8_LOW);
     9f2:	88 e0       	ldi	r24, 0x08	; 8
     9f4:	61 e0       	ldi	r22, 0x01	; 1
     9f6:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	}
}
     9fa:	0f 90       	pop	r0
     9fc:	0f 90       	pop	r0
     9fe:	0f 90       	pop	r0
     a00:	cf 91       	pop	r28
     a02:	df 91       	pop	r29
     a04:	08 95       	ret

00000a06 <voidSendFunc>:

void voidSendFunc(void)
{
     a06:	df 93       	push	r29
     a08:	cf 93       	push	r28
     a0a:	00 d0       	rcall	.+0      	; 0xa0c <voidSendFunc+0x6>
     a0c:	0f 92       	push	r0
     a0e:	cd b7       	in	r28, 0x3d	; 61
     a10:	de b7       	in	r29, 0x3e	; 62
	u8 data = 0xFF;
     a12:	8f ef       	ldi	r24, 0xFF	; 255
     a14:	8b 83       	std	Y+3, r24	; 0x03
	u16 len = 1; // Length in Byte
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	9a 83       	std	Y+2, r25	; 0x02
     a1c:	89 83       	std	Y+1, r24	; 0x01
	UART_Transmit(&data, len);
     a1e:	ce 01       	movw	r24, r28
     a20:	03 96       	adiw	r24, 0x03	; 3
     a22:	29 81       	ldd	r18, Y+1	; 0x01
     a24:	3a 81       	ldd	r19, Y+2	; 0x02
     a26:	b9 01       	movw	r22, r18
     a28:	0e 94 25 04 	call	0x84a	; 0x84a <UART_Transmit>
}
     a2c:	0f 90       	pop	r0
     a2e:	0f 90       	pop	r0
     a30:	0f 90       	pop	r0
     a32:	cf 91       	pop	r28
     a34:	df 91       	pop	r29
     a36:	08 95       	ret

00000a38 <KP_u16GetStatus>:
/*  this functions gets you all pressed buttons */
/************************************************/
static u16 KP_u16Status = 0;

u16 KP_u16GetStatus(void)
{
     a38:	df 93       	push	r29
     a3a:	cf 93       	push	r28
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
	KP_u16Status = 0;
     a40:	10 92 a8 00 	sts	0x00A8, r1
     a44:	10 92 a7 00 	sts	0x00A7, r1
	/* activate column 1 */
	DIO_voidSetPinValue (KP_u8_OUT_1, DIO_u8_LOW);
     a48:	8b e1       	ldi	r24, 0x1B	; 27
     a4a:	61 e0       	ldi	r22, 0x01	; 1
     a4c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (KP_u8_OUT_2, DIO_u8_HIGH);
     a50:	8a e1       	ldi	r24, 0x1A	; 26
     a52:	60 e0       	ldi	r22, 0x00	; 0
     a54:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (KP_u8_OUT_3, DIO_u8_HIGH);
     a58:	89 e1       	ldi	r24, 0x19	; 25
     a5a:	60 e0       	ldi	r22, 0x00	; 0
     a5c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (KP_u8_OUT_4, DIO_u8_HIGH);
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	60 e0       	ldi	r22, 0x00	; 0
     a64:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	KP_voidGetColStatus(0);
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	0e 94 77 05 	call	0xaee	; 0xaee <KP_voidGetColStatus>

	/* activate column 2 */
	DIO_voidSetPinValue (KP_u8_OUT_1, DIO_u8_HIGH);
     a6e:	8b e1       	ldi	r24, 0x1B	; 27
     a70:	60 e0       	ldi	r22, 0x00	; 0
     a72:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (KP_u8_OUT_2, DIO_u8_LOW);
     a76:	8a e1       	ldi	r24, 0x1A	; 26
     a78:	61 e0       	ldi	r22, 0x01	; 1
     a7a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (KP_u8_OUT_3, DIO_u8_HIGH);
     a7e:	89 e1       	ldi	r24, 0x19	; 25
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (KP_u8_OUT_4, DIO_u8_HIGH);
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	60 e0       	ldi	r22, 0x00	; 0
     a8a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	KP_voidGetColStatus(1);
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	0e 94 77 05 	call	0xaee	; 0xaee <KP_voidGetColStatus>

	/* activate column 3 */
	DIO_voidSetPinValue (KP_u8_OUT_1, DIO_u8_HIGH);
     a94:	8b e1       	ldi	r24, 0x1B	; 27
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (KP_u8_OUT_2, DIO_u8_HIGH);
     a9c:	8a e1       	ldi	r24, 0x1A	; 26
     a9e:	60 e0       	ldi	r22, 0x00	; 0
     aa0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (KP_u8_OUT_3, DIO_u8_LOW);
     aa4:	89 e1       	ldi	r24, 0x19	; 25
     aa6:	61 e0       	ldi	r22, 0x01	; 1
     aa8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (KP_u8_OUT_4, DIO_u8_HIGH);
     aac:	88 e1       	ldi	r24, 0x18	; 24
     aae:	60 e0       	ldi	r22, 0x00	; 0
     ab0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	KP_voidGetColStatus(2);
     ab4:	82 e0       	ldi	r24, 0x02	; 2
     ab6:	0e 94 77 05 	call	0xaee	; 0xaee <KP_voidGetColStatus>

	/* activate column 4 */
	DIO_voidSetPinValue (KP_u8_OUT_1, DIO_u8_HIGH);
     aba:	8b e1       	ldi	r24, 0x1B	; 27
     abc:	60 e0       	ldi	r22, 0x00	; 0
     abe:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (KP_u8_OUT_2, DIO_u8_HIGH);
     ac2:	8a e1       	ldi	r24, 0x1A	; 26
     ac4:	60 e0       	ldi	r22, 0x00	; 0
     ac6:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (KP_u8_OUT_3, DIO_u8_HIGH);
     aca:	89 e1       	ldi	r24, 0x19	; 25
     acc:	60 e0       	ldi	r22, 0x00	; 0
     ace:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (KP_u8_OUT_4, DIO_u8_LOW);
     ad2:	88 e1       	ldi	r24, 0x18	; 24
     ad4:	61 e0       	ldi	r22, 0x01	; 1
     ad6:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	KP_voidGetColStatus(3);
     ada:	83 e0       	ldi	r24, 0x03	; 3
     adc:	0e 94 77 05 	call	0xaee	; 0xaee <KP_voidGetColStatus>
	return KP_u16Status;
     ae0:	80 91 a7 00 	lds	r24, 0x00A7
     ae4:	90 91 a8 00 	lds	r25, 0x00A8
}
     ae8:	cf 91       	pop	r28
     aea:	df 91       	pop	r29
     aec:	08 95       	ret

00000aee <KP_voidGetColStatus>:

void KP_voidGetColStatus(u8 col)
{
     aee:	df 93       	push	r29
     af0:	cf 93       	push	r28
     af2:	0f 92       	push	r0
     af4:	cd b7       	in	r28, 0x3d	; 61
     af6:	de b7       	in	r29, 0x3e	; 62
     af8:	89 83       	std	Y+1, r24	; 0x01
	/* check for key 0 + n */
	if(DIO_u8GetPinValue(KP_u8_IN_1) == DIO_u8_LOW)
     afa:	8f e1       	ldi	r24, 0x1F	; 31
     afc:	0e 94 b5 02 	call	0x56a	; 0x56a <DIO_u8GetPinValue>
     b00:	81 30       	cpi	r24, 0x01	; 1
     b02:	a9 f4       	brne	.+42     	; 0xb2e <KP_voidGetColStatus+0x40>
	{
		SET_BIT(KP_u16Status,  col);
     b04:	89 81       	ldd	r24, Y+1	; 0x01
     b06:	28 2f       	mov	r18, r24
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	02 c0       	rjmp	.+4      	; 0xb14 <KP_voidGetColStatus+0x26>
     b10:	88 0f       	add	r24, r24
     b12:	99 1f       	adc	r25, r25
     b14:	2a 95       	dec	r18
     b16:	e2 f7       	brpl	.-8      	; 0xb10 <KP_voidGetColStatus+0x22>
     b18:	9c 01       	movw	r18, r24
     b1a:	80 91 a7 00 	lds	r24, 0x00A7
     b1e:	90 91 a8 00 	lds	r25, 0x00A8
     b22:	82 2b       	or	r24, r18
     b24:	93 2b       	or	r25, r19
     b26:	90 93 a8 00 	sts	0x00A8, r25
     b2a:	80 93 a7 00 	sts	0x00A7, r24
	}
	/* check for key 0 + n */
	if(DIO_u8GetPinValue(KP_u8_IN_2) == DIO_u8_LOW)
     b2e:	8e e1       	ldi	r24, 0x1E	; 30
     b30:	0e 94 b5 02 	call	0x56a	; 0x56a <DIO_u8GetPinValue>
     b34:	81 30       	cpi	r24, 0x01	; 1
     b36:	c1 f4       	brne	.+48     	; 0xb68 <KP_voidGetColStatus+0x7a>
	{
		SET_BIT(KP_u16Status, 4 + col);
     b38:	89 81       	ldd	r24, Y+1	; 0x01
     b3a:	88 2f       	mov	r24, r24
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	9c 01       	movw	r18, r24
     b40:	2c 5f       	subi	r18, 0xFC	; 252
     b42:	3f 4f       	sbci	r19, 0xFF	; 255
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	02 c0       	rjmp	.+4      	; 0xb4e <KP_voidGetColStatus+0x60>
     b4a:	88 0f       	add	r24, r24
     b4c:	99 1f       	adc	r25, r25
     b4e:	2a 95       	dec	r18
     b50:	e2 f7       	brpl	.-8      	; 0xb4a <KP_voidGetColStatus+0x5c>
     b52:	9c 01       	movw	r18, r24
     b54:	80 91 a7 00 	lds	r24, 0x00A7
     b58:	90 91 a8 00 	lds	r25, 0x00A8
     b5c:	82 2b       	or	r24, r18
     b5e:	93 2b       	or	r25, r19
     b60:	90 93 a8 00 	sts	0x00A8, r25
     b64:	80 93 a7 00 	sts	0x00A7, r24
	}
	/* check for key 0 + n */
	if(DIO_u8GetPinValue(KP_u8_IN_3) == DIO_u8_LOW)
     b68:	8d e1       	ldi	r24, 0x1D	; 29
     b6a:	0e 94 b5 02 	call	0x56a	; 0x56a <DIO_u8GetPinValue>
     b6e:	81 30       	cpi	r24, 0x01	; 1
     b70:	c1 f4       	brne	.+48     	; 0xba2 <KP_voidGetColStatus+0xb4>
	{
		SET_BIT(KP_u16Status, 8 + col);
     b72:	89 81       	ldd	r24, Y+1	; 0x01
     b74:	88 2f       	mov	r24, r24
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	9c 01       	movw	r18, r24
     b7a:	28 5f       	subi	r18, 0xF8	; 248
     b7c:	3f 4f       	sbci	r19, 0xFF	; 255
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	02 c0       	rjmp	.+4      	; 0xb88 <KP_voidGetColStatus+0x9a>
     b84:	88 0f       	add	r24, r24
     b86:	99 1f       	adc	r25, r25
     b88:	2a 95       	dec	r18
     b8a:	e2 f7       	brpl	.-8      	; 0xb84 <KP_voidGetColStatus+0x96>
     b8c:	9c 01       	movw	r18, r24
     b8e:	80 91 a7 00 	lds	r24, 0x00A7
     b92:	90 91 a8 00 	lds	r25, 0x00A8
     b96:	82 2b       	or	r24, r18
     b98:	93 2b       	or	r25, r19
     b9a:	90 93 a8 00 	sts	0x00A8, r25
     b9e:	80 93 a7 00 	sts	0x00A7, r24
	}

	/* check for key 0 + n */
	if(DIO_u8GetPinValue(KP_u8_IN_4) == DIO_u8_LOW)
     ba2:	8c e1       	ldi	r24, 0x1C	; 28
     ba4:	0e 94 b5 02 	call	0x56a	; 0x56a <DIO_u8GetPinValue>
     ba8:	81 30       	cpi	r24, 0x01	; 1
     baa:	c1 f4       	brne	.+48     	; 0xbdc <KP_voidGetColStatus+0xee>
	{
		SET_BIT(KP_u16Status, 12 + col);
     bac:	89 81       	ldd	r24, Y+1	; 0x01
     bae:	88 2f       	mov	r24, r24
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	9c 01       	movw	r18, r24
     bb4:	24 5f       	subi	r18, 0xF4	; 244
     bb6:	3f 4f       	sbci	r19, 0xFF	; 255
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <KP_voidGetColStatus+0xd4>
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	2a 95       	dec	r18
     bc4:	e2 f7       	brpl	.-8      	; 0xbbe <KP_voidGetColStatus+0xd0>
     bc6:	9c 01       	movw	r18, r24
     bc8:	80 91 a7 00 	lds	r24, 0x00A7
     bcc:	90 91 a8 00 	lds	r25, 0x00A8
     bd0:	82 2b       	or	r24, r18
     bd2:	93 2b       	or	r25, r19
     bd4:	90 93 a8 00 	sts	0x00A8, r25
     bd8:	80 93 a7 00 	sts	0x00A7, r24
	}
}
     bdc:	0f 90       	pop	r0
     bde:	cf 91       	pop	r28
     be0:	df 91       	pop	r29
     be2:	08 95       	ret

00000be4 <main>:
#include "KP_int.h"
#include "sw.h"
#include "protocol.h"
#include "UART_Rx_TEST.h"
void main(void)
{
     be4:	df 93       	push	r29
     be6:	cf 93       	push	r28
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInitialize();
     bec:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_voidInitialize>

	TIMER0_voidInit();
     bf0:	0e 94 c2 03 	call	0x784	; 0x784 <TIMER0_voidInit>
	/*enable uart*/
	UART_Init();
     bf4:	0e 94 f7 03 	call	0x7ee	; 0x7ee <UART_Init>
	/*Setting Internal PullUp Resistor for The keypad INPUT ROWS */
	DIO_voidSetPinValue(DIO_u8_PIN_28, DIO_u8_HIGH);
     bf8:	8c e1       	ldi	r24, 0x1C	; 28
     bfa:	60 e0       	ldi	r22, 0x00	; 0
     bfc:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PIN_29, DIO_u8_HIGH);
     c00:	8d e1       	ldi	r24, 0x1D	; 29
     c02:	60 e0       	ldi	r22, 0x00	; 0
     c04:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PIN_30, DIO_u8_HIGH);
     c08:	8e e1       	ldi	r24, 0x1E	; 30
     c0a:	60 e0       	ldi	r22, 0x00	; 0
     c0c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PIN_31, DIO_u8_HIGH);
     c10:	8f e1       	ldi	r24, 0x1F	; 31
     c12:	60 e0       	ldi	r22, 0x00	; 0
     c14:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	/*Setting Internal PullUp Resistor for The Switch1, 2 INPUT */
	DIO_voidSetPinValue(DIO_u8_PIN_17, DIO_u8_HIGH);
     c18:	81 e1       	ldi	r24, 0x11	; 17
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PIN_18, DIO_u8_HIGH);
     c20:	82 e1       	ldi	r24, 0x12	; 18
     c22:	60 e0       	ldi	r22, 0x00	; 0
     c24:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>


	GIE_ENABLE();
     c28:	af e5       	ldi	r26, 0x5F	; 95
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	ef e5       	ldi	r30, 0x5F	; 95
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	80 68       	ori	r24, 0x80	; 128
     c34:	8c 93       	st	X, r24
	OS_voidStart();
     c36:	0e 94 45 03 	call	0x68a	; 0x68a <OS_voidStart>

}
     c3a:	cf 91       	pop	r28
     c3c:	df 91       	pop	r29
     c3e:	08 95       	ret

00000c40 <protcole_task>:
#include "UART_cfg.h"
#include "protocol.h"
#include "task2.h"
#include "KP_int.h"
void protcole_task(void)
{
     c40:	df 93       	push	r29
     c42:	cf 93       	push	r28
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62
     c48:	27 97       	sbiw	r28, 0x07	; 7
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	de bf       	out	0x3e, r29	; 62
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	cd bf       	out	0x3d, r28	; 61
	u8 u8byte = 0;
     c54:	1b 82       	std	Y+3, r1	; 0x03
	u16 DummyAddress;
	u8 u8ID, u8Val;
	/* get one received byte */
	UART_Receive(&u8byte, &DummyAddress);
     c56:	ce 01       	movw	r24, r28
     c58:	03 96       	adiw	r24, 0x03	; 3
     c5a:	9e 01       	movw	r18, r28
     c5c:	2c 5f       	subi	r18, 0xFC	; 252
     c5e:	3f 4f       	sbci	r19, 0xFF	; 255
     c60:	b9 01       	movw	r22, r18
     c62:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <UART_Receive>
	/* Split it to id and value */
	u8ID = (u8byte >> 4) ;
     c66:	8b 81       	ldd	r24, Y+3	; 0x03
     c68:	82 95       	swap	r24
     c6a:	8f 70       	andi	r24, 0x0F	; 15
     c6c:	8a 83       	std	Y+2, r24	; 0x02
	/* Anding the u8Val with 00001111, to eliminate the ID and extract just the value */
	u8Val = u8byte & 0x0F;
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	8f 70       	andi	r24, 0x0F	; 15
     c72:	89 83       	std	Y+1, r24	; 0x01

	switch(u8ID)
     c74:	8a 81       	ldd	r24, Y+2	; 0x02
     c76:	28 2f       	mov	r18, r24
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	3f 83       	std	Y+7, r19	; 0x07
     c7c:	2e 83       	std	Y+6, r18	; 0x06
     c7e:	8e 81       	ldd	r24, Y+6	; 0x06
     c80:	9f 81       	ldd	r25, Y+7	; 0x07
     c82:	81 30       	cpi	r24, 0x01	; 1
     c84:	91 05       	cpc	r25, r1
     c86:	b1 f0       	breq	.+44     	; 0xcb4 <protcole_task+0x74>
     c88:	2e 81       	ldd	r18, Y+6	; 0x06
     c8a:	3f 81       	ldd	r19, Y+7	; 0x07
     c8c:	24 30       	cpi	r18, 0x04	; 4
     c8e:	31 05       	cpc	r19, r1
     c90:	f1 f0       	breq	.+60     	; 0xcce <protcole_task+0x8e>
     c92:	8e 81       	ldd	r24, Y+6	; 0x06
     c94:	9f 81       	ldd	r25, Y+7	; 0x07
     c96:	00 97       	sbiw	r24, 0x00	; 0
     c98:	e9 f4       	brne	.+58     	; 0xcd4 <protcole_task+0x94>
	{
		case ID_B1:
			if(u8Val == PRESSED)
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	88 23       	and	r24, r24
     c9e:	29 f4       	brne	.+10     	; 0xcaa <protcole_task+0x6a>
			{
				/*Set LED High*/
				DIO_voidSetPinValue(DIO_u8_PIN_16, DIO_u8_HIGH);
     ca0:	80 e1       	ldi	r24, 0x10	; 16
     ca2:	60 e0       	ldi	r22, 0x00	; 0
     ca4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
     ca8:	15 c0       	rjmp	.+42     	; 0xcd4 <protcole_task+0x94>
			}
			else
			{
				/*Set LED LOW*/
				DIO_voidSetPinValue(DIO_u8_PIN_16, DIO_u8_LOW);
     caa:	80 e1       	ldi	r24, 0x10	; 16
     cac:	61 e0       	ldi	r22, 0x01	; 1
     cae:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
     cb2:	10 c0       	rjmp	.+32     	; 0xcd4 <protcole_task+0x94>
			}
		break;

		case ID_B2:
			if(u8Val == PRESSED)
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	88 23       	and	r24, r24
     cb8:	29 f4       	brne	.+10     	; 0xcc4 <protcole_task+0x84>
			{
				/* Set LED HIGH */
				DIO_voidSetPinValue(DIO_u8_PIN_23, DIO_u8_HIGH);
     cba:	87 e1       	ldi	r24, 0x17	; 23
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
     cc2:	08 c0       	rjmp	.+16     	; 0xcd4 <protcole_task+0x94>
			}
			else
			{
				/*Set LED LOW*/
				DIO_voidSetPinValue(DIO_u8_PIN_23, DIO_u8_LOW);
     cc4:	87 e1       	ldi	r24, 0x17	; 23
     cc6:	61 e0       	ldi	r22, 0x01	; 1
     cc8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
     ccc:	03 c0       	rjmp	.+6      	; 0xcd4 <protcole_task+0x94>
			}
		break;

		case ID_MOD_SWITCH:
			u8CurrentMode = u8Val;
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	80 93 c2 00 	sts	0x00C2, r24

		case ID_KP_VALUE:
		break;

	}
}
     cd4:	27 96       	adiw	r28, 0x07	; 7
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	f8 94       	cli
     cda:	de bf       	out	0x3e, r29	; 62
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	cd bf       	out	0x3d, r28	; 61
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <SW_u8GetState>:


u8 const u8Link_To_Dio [] = {DIO_u8_PIN_17, DIO_u8_PIN_18};
/* get the switch state */
u8 SW_u8GetState(u8 u8SwitchPin)
{
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	00 d0       	rcall	.+0      	; 0xcec <SW_u8GetState+0x6>
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	89 83       	std	Y+1, r24	; 0x01
	return (u8SwState [u8SwitchPin] == SW_MODE);
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
     cf4:	88 2f       	mov	r24, r24
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	fc 01       	movw	r30, r24
     cfa:	e7 55       	subi	r30, 0x57	; 87
     cfc:	ff 4f       	sbci	r31, 0xFF	; 255
     cfe:	80 81       	ld	r24, Z
     d00:	1a 82       	std	Y+2, r1	; 0x02
     d02:	81 30       	cpi	r24, 0x01	; 1
     d04:	11 f4       	brne	.+4      	; 0xd0a <SW_u8GetState+0x24>
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	8a 83       	std	Y+2, r24	; 0x02
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	08 95       	ret

00000d16 <SW_u16GetHoldTime>:

/* returns time in ms which I have been holding the switch */
u16 SW_u16GetHoldTime(void)
{
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
	return SW_u16wHoldTime;
     d1e:	80 91 ab 00 	lds	r24, 0x00AB
     d22:	90 91 ac 00 	lds	r25, 0x00AC
}
     d26:	cf 91       	pop	r28
     d28:	df 91       	pop	r29
     d2a:	08 95       	ret

00000d2c <SW_voidSwTask>:

/* periodic switch task */
void SW_voidSwTask(void)
{
     d2c:	df 93       	push	r29
     d2e:	cf 93       	push	r28
     d30:	0f 92       	push	r0
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
	static u8 u8CounterLoop1 ;
	static u16 u8Cnt [NUMBER_OF_SW] = {0};
	static u8 u8PrevState [NUMBER_OF_SW] = {0};

	for(u8CounterLoop1 = 0; u8CounterLoop1 < NUMBER_OF_SW; u8CounterLoop1++){
     d36:	10 92 b3 00 	sts	0x00B3, r1
     d3a:	7a c0       	rjmp	.+244    	; 0xe30 <SW_voidSwTask+0x104>
		u8 u8CurrentState = DIO_u8GetPinValue(u8Link_To_Dio[u8CounterLoop1]);
     d3c:	80 91 b3 00 	lds	r24, 0x00B3
     d40:	88 2f       	mov	r24, r24
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	fc 01       	movw	r30, r24
     d46:	e4 57       	subi	r30, 0x74	; 116
     d48:	ff 4f       	sbci	r31, 0xFF	; 255
     d4a:	80 81       	ld	r24, Z
     d4c:	0e 94 b5 02 	call	0x56a	; 0x56a <DIO_u8GetPinValue>
     d50:	89 83       	std	Y+1, r24	; 0x01
			if(u8CurrentState == u8PrevState[u8CounterLoop1])
     d52:	80 91 b3 00 	lds	r24, 0x00B3
     d56:	88 2f       	mov	r24, r24
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	fc 01       	movw	r30, r24
     d5c:	e3 55       	subi	r30, 0x53	; 83
     d5e:	ff 4f       	sbci	r31, 0xFF	; 255
     d60:	90 81       	ld	r25, Z
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	98 17       	cp	r25, r24
     d66:	09 f0       	breq	.+2      	; 0xd6a <SW_voidSwTask+0x3e>
     d68:	48 c0       	rjmp	.+144    	; 0xdfa <SW_voidSwTask+0xce>
			{
				if(u8Cnt[u8CounterLoop1] >= NUMBER_OF_SAMPLES)
     d6a:	80 91 b3 00 	lds	r24, 0x00B3
     d6e:	88 2f       	mov	r24, r24
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	fc 01       	movw	r30, r24
     d78:	e1 55       	subi	r30, 0x51	; 81
     d7a:	ff 4f       	sbci	r31, 0xFF	; 255
     d7c:	80 81       	ld	r24, Z
     d7e:	91 81       	ldd	r25, Z+1	; 0x01
     d80:	82 30       	cpi	r24, 0x02	; 2
     d82:	91 05       	cpc	r25, r1
     d84:	10 f1       	brcs	.+68     	; 0xdca <SW_voidSwTask+0x9e>
				{
					u8SwState [u8CounterLoop1] = u8CurrentState;
     d86:	80 91 b3 00 	lds	r24, 0x00B3
     d8a:	88 2f       	mov	r24, r24
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	fc 01       	movw	r30, r24
     d90:	e7 55       	subi	r30, 0x57	; 87
     d92:	ff 4f       	sbci	r31, 0xFF	; 255
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	80 83       	st	Z, r24
					if(u8SwState [u8CounterLoop1] == SW_MODE)
     d98:	80 91 b3 00 	lds	r24, 0x00B3
     d9c:	88 2f       	mov	r24, r24
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	fc 01       	movw	r30, r24
     da2:	e7 55       	subi	r30, 0x57	; 87
     da4:	ff 4f       	sbci	r31, 0xFF	; 255
     da6:	80 81       	ld	r24, Z
     da8:	81 30       	cpi	r24, 0x01	; 1
     daa:	51 f4       	brne	.+20     	; 0xdc0 <SW_voidSwTask+0x94>
					{
						SW_u16wHoldTime += NUMBER_OF_SAMPLES;
     dac:	80 91 ab 00 	lds	r24, 0x00AB
     db0:	90 91 ac 00 	lds	r25, 0x00AC
     db4:	02 96       	adiw	r24, 0x02	; 2
     db6:	90 93 ac 00 	sts	0x00AC, r25
     dba:	80 93 ab 00 	sts	0x00AB, r24
     dbe:	2a c0       	rjmp	.+84     	; 0xe14 <SW_voidSwTask+0xe8>
					}
					else
					{
						SW_u16wHoldTime = 0;
     dc0:	10 92 ac 00 	sts	0x00AC, r1
     dc4:	10 92 ab 00 	sts	0x00AB, r1
     dc8:	25 c0       	rjmp	.+74     	; 0xe14 <SW_voidSwTask+0xe8>
					}
				}
				else
				{
					u8Cnt[u8CounterLoop1]++;
     dca:	80 91 b3 00 	lds	r24, 0x00B3
     dce:	28 2f       	mov	r18, r24
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	c9 01       	movw	r24, r18
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	fc 01       	movw	r30, r24
     dda:	e1 55       	subi	r30, 0x51	; 81
     ddc:	ff 4f       	sbci	r31, 0xFF	; 255
     dde:	80 81       	ld	r24, Z
     de0:	91 81       	ldd	r25, Z+1	; 0x01
     de2:	ac 01       	movw	r20, r24
     de4:	4f 5f       	subi	r20, 0xFF	; 255
     de6:	5f 4f       	sbci	r21, 0xFF	; 255
     de8:	c9 01       	movw	r24, r18
     dea:	88 0f       	add	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	fc 01       	movw	r30, r24
     df0:	e1 55       	subi	r30, 0x51	; 81
     df2:	ff 4f       	sbci	r31, 0xFF	; 255
     df4:	51 83       	std	Z+1, r21	; 0x01
     df6:	40 83       	st	Z, r20
     df8:	0d c0       	rjmp	.+26     	; 0xe14 <SW_voidSwTask+0xe8>
				}
			}
			else
			{
				u8Cnt[u8CounterLoop1] = 1;
     dfa:	80 91 b3 00 	lds	r24, 0x00B3
     dfe:	88 2f       	mov	r24, r24
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	fc 01       	movw	r30, r24
     e08:	e1 55       	subi	r30, 0x51	; 81
     e0a:	ff 4f       	sbci	r31, 0xFF	; 255
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	91 83       	std	Z+1, r25	; 0x01
     e12:	80 83       	st	Z, r24
			}
			u8PrevState[u8CounterLoop1] = u8CurrentState;
     e14:	80 91 b3 00 	lds	r24, 0x00B3
     e18:	88 2f       	mov	r24, r24
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	fc 01       	movw	r30, r24
     e1e:	e3 55       	subi	r30, 0x53	; 83
     e20:	ff 4f       	sbci	r31, 0xFF	; 255
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	80 83       	st	Z, r24
{
	static u8 u8CounterLoop1 ;
	static u16 u8Cnt [NUMBER_OF_SW] = {0};
	static u8 u8PrevState [NUMBER_OF_SW] = {0};

	for(u8CounterLoop1 = 0; u8CounterLoop1 < NUMBER_OF_SW; u8CounterLoop1++){
     e26:	80 91 b3 00 	lds	r24, 0x00B3
     e2a:	8f 5f       	subi	r24, 0xFF	; 255
     e2c:	80 93 b3 00 	sts	0x00B3, r24
     e30:	80 91 b3 00 	lds	r24, 0x00B3
     e34:	82 30       	cpi	r24, 0x02	; 2
     e36:	08 f4       	brcc	.+2      	; 0xe3a <SW_voidSwTask+0x10e>
     e38:	81 cf       	rjmp	.-254    	; 0xd3c <SW_voidSwTask+0x10>
			}
			u8PrevState[u8CounterLoop1] = u8CurrentState;
	}


}
     e3a:	0f 90       	pop	r0
     e3c:	cf 91       	pop	r28
     e3e:	df 91       	pop	r29
     e40:	08 95       	ret

00000e42 <voidTask1>:
 u8 counterSec = 0;
 u8 countermin = 0;
 u8 counterhr = 0;

void voidTask1(void)
{
     e42:	df 93       	push	r29
     e44:	cf 93       	push	r28
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62

	counterSec++;
     e4a:	80 91 b4 00 	lds	r24, 0x00B4
     e4e:	8f 5f       	subi	r24, 0xFF	; 255
     e50:	80 93 b4 00 	sts	0x00B4, r24
	if(counterSec<60)
     e54:	80 91 b4 00 	lds	r24, 0x00B4
     e58:	8c 33       	cpi	r24, 0x3C	; 60
     e5a:	90 f4       	brcc	.+36     	; 0xe80 <voidTask1+0x3e>
	{
		Sec1 = counterSec/10;// Left 7Seg
     e5c:	80 91 b4 00 	lds	r24, 0x00B4
     e60:	9a e0       	ldi	r25, 0x0A	; 10
     e62:	69 2f       	mov	r22, r25
     e64:	0e 94 35 09 	call	0x126a	; 0x126a <__udivmodqi4>
     e68:	80 93 bd 00 	sts	0x00BD, r24
		Sec2 = counterSec%10;// Right 7Seg
     e6c:	80 91 b4 00 	lds	r24, 0x00B4
     e70:	9a e0       	ldi	r25, 0x0A	; 10
     e72:	69 2f       	mov	r22, r25
     e74:	0e 94 35 09 	call	0x126a	; 0x126a <__udivmodqi4>
     e78:	89 2f       	mov	r24, r25
     e7a:	80 93 be 00 	sts	0x00BE, r24
     e7e:	07 c0       	rjmp	.+14     	; 0xe8e <voidTask1+0x4c>
	}
	else
	{
		counterSec=0;
     e80:	10 92 b4 00 	sts	0x00B4, r1
		countermin++;
     e84:	80 91 b5 00 	lds	r24, 0x00B5
     e88:	8f 5f       	subi	r24, 0xFF	; 255
     e8a:	80 93 b5 00 	sts	0x00B5, r24
	}
	if(countermin<60)
     e8e:	80 91 b5 00 	lds	r24, 0x00B5
     e92:	8c 33       	cpi	r24, 0x3C	; 60
     e94:	90 f4       	brcc	.+36     	; 0xeba <voidTask1+0x78>
	{
		Min1 = countermin/10;
     e96:	80 91 b5 00 	lds	r24, 0x00B5
     e9a:	9a e0       	ldi	r25, 0x0A	; 10
     e9c:	69 2f       	mov	r22, r25
     e9e:	0e 94 35 09 	call	0x126a	; 0x126a <__udivmodqi4>
     ea2:	80 93 bf 00 	sts	0x00BF, r24
		Min2 = countermin%10;
     ea6:	80 91 b5 00 	lds	r24, 0x00B5
     eaa:	9a e0       	ldi	r25, 0x0A	; 10
     eac:	69 2f       	mov	r22, r25
     eae:	0e 94 35 09 	call	0x126a	; 0x126a <__udivmodqi4>
     eb2:	89 2f       	mov	r24, r25
     eb4:	80 93 bc 00 	sts	0x00BC, r24
     eb8:	07 c0       	rjmp	.+14     	; 0xec8 <voidTask1+0x86>
	}
	else
	{
		countermin =0;
     eba:	10 92 b5 00 	sts	0x00B5, r1
		counterhr++;
     ebe:	80 91 b6 00 	lds	r24, 0x00B6
     ec2:	8f 5f       	subi	r24, 0xFF	; 255
     ec4:	80 93 b6 00 	sts	0x00B6, r24
	}
	if(counterhr<24)
     ec8:	80 91 b6 00 	lds	r24, 0x00B6
     ecc:	88 31       	cpi	r24, 0x18	; 24
     ece:	90 f4       	brcc	.+36     	; 0xef4 <voidTask1+0xb2>
	{
		Hr1 = counterhr/10;
     ed0:	80 91 b6 00 	lds	r24, 0x00B6
     ed4:	9a e0       	ldi	r25, 0x0A	; 10
     ed6:	69 2f       	mov	r22, r25
     ed8:	0e 94 35 09 	call	0x126a	; 0x126a <__udivmodqi4>
     edc:	80 93 c0 00 	sts	0x00C0, r24
		Hr2 = counterhr%10;
     ee0:	80 91 b6 00 	lds	r24, 0x00B6
     ee4:	9a e0       	ldi	r25, 0x0A	; 10
     ee6:	69 2f       	mov	r22, r25
     ee8:	0e 94 35 09 	call	0x126a	; 0x126a <__udivmodqi4>
     eec:	89 2f       	mov	r24, r25
     eee:	80 93 c1 00 	sts	0x00C1, r24
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <voidTask1+0xb6>
	}
	else
	{
		counterhr=0;
     ef4:	10 92 b6 00 	sts	0x00B6, r1
	}
}
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <voidCheckModeUART>:
#define Minutes     14
#define Hours 		15

u8 u8CurrentMode;
void voidCheckModeUART(void)
{
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	00 d0       	rcall	.+0      	; 0xf04 <voidCheckModeUART+0x6>
     f04:	00 d0       	rcall	.+0      	; 0xf06 <voidCheckModeUART+0x8>
     f06:	0f 92       	push	r0
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
	u16 u32KeypadStoredValue;
	u32KeypadStoredValue = KP_u16GetStatus();
     f0c:	0e 94 1c 05 	call	0xa38	; 0xa38 <KP_u16GetStatus>
     f10:	9a 83       	std	Y+2, r25	; 0x02
     f12:	89 83       	std	Y+1, r24	; 0x01
	if(GET_BIT(u32KeypadStoredValue, Minutes))
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	9a 81       	ldd	r25, Y+2	; 0x02
     f18:	80 70       	andi	r24, 0x00	; 0
     f1a:	90 74       	andi	r25, 0x40	; 64
     f1c:	00 97       	sbiw	r24, 0x00	; 0
     f1e:	49 f0       	breq	.+18     	; 0xf32 <voidCheckModeUART+0x34>
	{
		u8 u8Byte = (ID_KP_ADJUST<<4)|(1U);
     f20:	81 e3       	ldi	r24, 0x31	; 49
     f22:	8b 83       	std	Y+3, r24	; 0x03
		UART_Transmit(&u8Byte, 1);
     f24:	ce 01       	movw	r24, r28
     f26:	03 96       	adiw	r24, 0x03	; 3
     f28:	61 e0       	ldi	r22, 0x01	; 1
     f2a:	70 e0       	ldi	r23, 0x00	; 0
     f2c:	0e 94 25 04 	call	0x84a	; 0x84a <UART_Transmit>
     f30:	1b c0       	rjmp	.+54     	; 0xf68 <voidCheckModeUART+0x6a>
	}
	else if (GET_BIT(u32KeypadStoredValue, Hours))
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	9a 81       	ldd	r25, Y+2	; 0x02
     f36:	99 23       	and	r25, r25
     f38:	4c f4       	brge	.+18     	; 0xf4c <voidCheckModeUART+0x4e>
	{
		u8 u8Byte = (ID_KP_ADJUST<<4)|(2U);
     f3a:	82 e3       	ldi	r24, 0x32	; 50
     f3c:	8c 83       	std	Y+4, r24	; 0x04
		UART_Transmit(&u8Byte, 2);
     f3e:	ce 01       	movw	r24, r28
     f40:	04 96       	adiw	r24, 0x04	; 4
     f42:	62 e0       	ldi	r22, 0x02	; 2
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	0e 94 25 04 	call	0x84a	; 0x84a <UART_Transmit>
     f4a:	0e c0       	rjmp	.+28     	; 0xf68 <voidCheckModeUART+0x6a>
	}
	else if (GET_BIT(u32KeypadStoredValue, Seconds))
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	9a 81       	ldd	r25, Y+2	; 0x02
     f50:	80 70       	andi	r24, 0x00	; 0
     f52:	90 71       	andi	r25, 0x10	; 16
     f54:	00 97       	sbiw	r24, 0x00	; 0
     f56:	41 f0       	breq	.+16     	; 0xf68 <voidCheckModeUART+0x6a>
	{
		u8 u8Byte = (ID_KP_ADJUST<<4)|(0U);
     f58:	80 e3       	ldi	r24, 0x30	; 48
     f5a:	8d 83       	std	Y+5, r24	; 0x05
		UART_Transmit(&u8Byte, 0);
     f5c:	ce 01       	movw	r24, r28
     f5e:	05 96       	adiw	r24, 0x05	; 5
     f60:	60 e0       	ldi	r22, 0x00	; 0
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	0e 94 25 04 	call	0x84a	; 0x84a <UART_Transmit>
	}
}
     f68:	0f 90       	pop	r0
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
     f6e:	0f 90       	pop	r0
     f70:	0f 90       	pop	r0
     f72:	cf 91       	pop	r28
     f74:	df 91       	pop	r29
     f76:	08 95       	ret

00000f78 <voidDisplaySeconds>:

void voidDisplaySeconds(void)
{
     f78:	df 93       	push	r29
     f7a:	cf 93       	push	r28
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
	PORTB = u8SegNum[Sec2];
     f80:	a8 e3       	ldi	r26, 0x38	; 56
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	80 91 be 00 	lds	r24, 0x00BE
     f88:	88 2f       	mov	r24, r24
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	fc 01       	movw	r30, r24
     f8e:	e0 5a       	subi	r30, 0xA0	; 160
     f90:	ff 4f       	sbci	r31, 0xFF	; 255
     f92:	80 81       	ld	r24, Z
     f94:	8c 93       	st	X, r24
	PORTA = u8SegNum[Sec1];
     f96:	ab e3       	ldi	r26, 0x3B	; 59
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	80 91 bd 00 	lds	r24, 0x00BD
     f9e:	88 2f       	mov	r24, r24
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	fc 01       	movw	r30, r24
     fa4:	e0 5a       	subi	r30, 0xA0	; 160
     fa6:	ff 4f       	sbci	r31, 0xFF	; 255
     fa8:	80 81       	ld	r24, Z
     faa:	8c 93       	st	X, r24
}
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	08 95       	ret

00000fb2 <voidDisplayMinutes>:
void voidDisplayMinutes(void)
{
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
	PORTB = u8SegNum[Min2];
     fba:	a8 e3       	ldi	r26, 0x38	; 56
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	80 91 bc 00 	lds	r24, 0x00BC
     fc2:	88 2f       	mov	r24, r24
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	fc 01       	movw	r30, r24
     fc8:	e0 5a       	subi	r30, 0xA0	; 160
     fca:	ff 4f       	sbci	r31, 0xFF	; 255
     fcc:	80 81       	ld	r24, Z
     fce:	8c 93       	st	X, r24
	PORTA = u8SegNum[Min1];
     fd0:	ab e3       	ldi	r26, 0x3B	; 59
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	80 91 bf 00 	lds	r24, 0x00BF
     fd8:	88 2f       	mov	r24, r24
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	fc 01       	movw	r30, r24
     fde:	e0 5a       	subi	r30, 0xA0	; 160
     fe0:	ff 4f       	sbci	r31, 0xFF	; 255
     fe2:	80 81       	ld	r24, Z
     fe4:	8c 93       	st	X, r24
}
     fe6:	cf 91       	pop	r28
     fe8:	df 91       	pop	r29
     fea:	08 95       	ret

00000fec <voidDisplayHours>:
void voidDisplayHours(void)
{
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
	PORTB = u8SegNum[Hr2];
     ff4:	a8 e3       	ldi	r26, 0x38	; 56
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	80 91 c1 00 	lds	r24, 0x00C1
     ffc:	88 2f       	mov	r24, r24
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	fc 01       	movw	r30, r24
    1002:	e0 5a       	subi	r30, 0xA0	; 160
    1004:	ff 4f       	sbci	r31, 0xFF	; 255
    1006:	80 81       	ld	r24, Z
    1008:	8c 93       	st	X, r24
	PORTA = u8SegNum[Hr1];
    100a:	ab e3       	ldi	r26, 0x3B	; 59
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	80 91 c0 00 	lds	r24, 0x00C0
    1012:	88 2f       	mov	r24, r24
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	fc 01       	movw	r30, r24
    1018:	e0 5a       	subi	r30, 0xA0	; 160
    101a:	ff 4f       	sbci	r31, 0xFF	; 255
    101c:	80 81       	ld	r24, Z
    101e:	8c 93       	st	X, r24
}
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <voidDisplay>:
void voidDisplay(void)
{
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	00 d0       	rcall	.+0      	; 0x102c <voidDisplay+0x6>
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
	switch(u8CurrentMode)
    1030:	80 91 c2 00 	lds	r24, 0x00C2
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	3a 83       	std	Y+2, r19	; 0x02
    103a:	29 83       	std	Y+1, r18	; 0x01
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	9a 81       	ldd	r25, Y+2	; 0x02
    1040:	81 30       	cpi	r24, 0x01	; 1
    1042:	91 05       	cpc	r25, r1
    1044:	61 f0       	breq	.+24     	; 0x105e <voidDisplay+0x38>
    1046:	29 81       	ldd	r18, Y+1	; 0x01
    1048:	3a 81       	ldd	r19, Y+2	; 0x02
    104a:	22 30       	cpi	r18, 0x02	; 2
    104c:	31 05       	cpc	r19, r1
    104e:	51 f0       	breq	.+20     	; 0x1064 <voidDisplay+0x3e>
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	9a 81       	ldd	r25, Y+2	; 0x02
    1054:	00 97       	sbiw	r24, 0x00	; 0
    1056:	41 f4       	brne	.+16     	; 0x1068 <voidDisplay+0x42>
	{
	case 0:
		voidDisplaySeconds();
    1058:	0e 94 bc 07 	call	0xf78	; 0xf78 <voidDisplaySeconds>
    105c:	05 c0       	rjmp	.+10     	; 0x1068 <voidDisplay+0x42>
	break;
	case 1:
		voidDisplayMinutes();
    105e:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <voidDisplayMinutes>
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <voidDisplay+0x42>
	break;
	case 2:
		voidDisplayHours();
    1064:	0e 94 f6 07 	call	0xfec	; 0xfec <voidDisplayHours>
	break;
	}
}
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	08 95       	ret

00001072 <voidTask2>:
/********************** Prev View Hrs, Min, Sec *****************************************/

void voidTask2(void)
{
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
	static u32 u32KeypadStoredValue;
	static u8 u8Flag = Seconds;
	if(Seconds == u8Flag)
    107a:	80 91 6a 00 	lds	r24, 0x006A
    107e:	8c 30       	cpi	r24, 0x0C	; 12
    1080:	81 f5       	brne	.+96     	; 0x10e2 <voidTask2+0x70>
	{
		if(GET_BIT(u32KeypadStoredValue, Minutes))
    1082:	80 91 b7 00 	lds	r24, 0x00B7
    1086:	90 91 b8 00 	lds	r25, 0x00B8
    108a:	a0 91 b9 00 	lds	r26, 0x00B9
    108e:	b0 91 ba 00 	lds	r27, 0x00BA
    1092:	80 70       	andi	r24, 0x00	; 0
    1094:	90 74       	andi	r25, 0x40	; 64
    1096:	a0 70       	andi	r26, 0x00	; 0
    1098:	b0 70       	andi	r27, 0x00	; 0
    109a:	00 97       	sbiw	r24, 0x00	; 0
    109c:	a1 05       	cpc	r26, r1
    109e:	b1 05       	cpc	r27, r1
    10a0:	21 f0       	breq	.+8      	; 0x10aa <voidTask2+0x38>
		{
			u8Flag = Minutes;
    10a2:	8e e0       	ldi	r24, 0x0E	; 14
    10a4:	80 93 6a 00 	sts	0x006A, r24
    10a8:	80 c0       	rjmp	.+256    	; 0x11aa <voidTask2+0x138>
		}
		else if (GET_BIT(u32KeypadStoredValue, Hours))
    10aa:	80 91 b7 00 	lds	r24, 0x00B7
    10ae:	90 91 b8 00 	lds	r25, 0x00B8
    10b2:	a0 91 b9 00 	lds	r26, 0x00B9
    10b6:	b0 91 ba 00 	lds	r27, 0x00BA
    10ba:	80 70       	andi	r24, 0x00	; 0
    10bc:	90 78       	andi	r25, 0x80	; 128
    10be:	a0 70       	andi	r26, 0x00	; 0
    10c0:	b0 70       	andi	r27, 0x00	; 0
    10c2:	00 97       	sbiw	r24, 0x00	; 0
    10c4:	a1 05       	cpc	r26, r1
    10c6:	b1 05       	cpc	r27, r1
    10c8:	21 f0       	breq	.+8      	; 0x10d2 <voidTask2+0x60>
		{
			u8Flag = Hours;
    10ca:	8f e0       	ldi	r24, 0x0F	; 15
    10cc:	80 93 6a 00 	sts	0x006A, r24
    10d0:	6c c0       	rjmp	.+216    	; 0x11aa <voidTask2+0x138>
		}
		else if (u8FlagAdjustmentMode == 1)
    10d2:	80 91 bb 00 	lds	r24, 0x00BB
    10d6:	81 30       	cpi	r24, 0x01	; 1
    10d8:	09 f4       	brne	.+2      	; 0x10dc <voidTask2+0x6a>
    10da:	67 c0       	rjmp	.+206    	; 0x11aa <voidTask2+0x138>
		{

		}
		else
		{
			voidDisplaySeconds();
    10dc:	0e 94 bc 07 	call	0xf78	; 0xf78 <voidDisplaySeconds>
    10e0:	64 c0       	rjmp	.+200    	; 0x11aa <voidTask2+0x138>
		}

	}
	else if(Minutes == u8Flag)
    10e2:	80 91 6a 00 	lds	r24, 0x006A
    10e6:	8e 30       	cpi	r24, 0x0E	; 14
    10e8:	79 f5       	brne	.+94     	; 0x1148 <voidTask2+0xd6>
	{
		if(GET_BIT(u32KeypadStoredValue, Seconds))
    10ea:	80 91 b7 00 	lds	r24, 0x00B7
    10ee:	90 91 b8 00 	lds	r25, 0x00B8
    10f2:	a0 91 b9 00 	lds	r26, 0x00B9
    10f6:	b0 91 ba 00 	lds	r27, 0x00BA
    10fa:	80 70       	andi	r24, 0x00	; 0
    10fc:	90 71       	andi	r25, 0x10	; 16
    10fe:	a0 70       	andi	r26, 0x00	; 0
    1100:	b0 70       	andi	r27, 0x00	; 0
    1102:	00 97       	sbiw	r24, 0x00	; 0
    1104:	a1 05       	cpc	r26, r1
    1106:	b1 05       	cpc	r27, r1
    1108:	21 f0       	breq	.+8      	; 0x1112 <voidTask2+0xa0>
		{
			u8Flag = Seconds;
    110a:	8c e0       	ldi	r24, 0x0C	; 12
    110c:	80 93 6a 00 	sts	0x006A, r24
    1110:	4c c0       	rjmp	.+152    	; 0x11aa <voidTask2+0x138>
		}
		else if (GET_BIT(u32KeypadStoredValue, Hours))
    1112:	80 91 b7 00 	lds	r24, 0x00B7
    1116:	90 91 b8 00 	lds	r25, 0x00B8
    111a:	a0 91 b9 00 	lds	r26, 0x00B9
    111e:	b0 91 ba 00 	lds	r27, 0x00BA
    1122:	80 70       	andi	r24, 0x00	; 0
    1124:	90 78       	andi	r25, 0x80	; 128
    1126:	a0 70       	andi	r26, 0x00	; 0
    1128:	b0 70       	andi	r27, 0x00	; 0
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	a1 05       	cpc	r26, r1
    112e:	b1 05       	cpc	r27, r1
    1130:	21 f0       	breq	.+8      	; 0x113a <voidTask2+0xc8>
		{
			u8Flag = Hours;
    1132:	8f e0       	ldi	r24, 0x0F	; 15
    1134:	80 93 6a 00 	sts	0x006A, r24
    1138:	38 c0       	rjmp	.+112    	; 0x11aa <voidTask2+0x138>
		}
		else if (u8FlagAdjustmentMode == 1) {}
    113a:	80 91 bb 00 	lds	r24, 0x00BB
    113e:	81 30       	cpi	r24, 0x01	; 1
    1140:	a1 f1       	breq	.+104    	; 0x11aa <voidTask2+0x138>
		else
		{
			voidDisplayMinutes();
    1142:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <voidDisplayMinutes>
    1146:	31 c0       	rjmp	.+98     	; 0x11aa <voidTask2+0x138>
		}
	}
	else if(Hours == u8Flag)
    1148:	80 91 6a 00 	lds	r24, 0x006A
    114c:	8f 30       	cpi	r24, 0x0F	; 15
    114e:	69 f5       	brne	.+90     	; 0x11aa <voidTask2+0x138>
	{
		if(GET_BIT(u32KeypadStoredValue, Seconds))
    1150:	80 91 b7 00 	lds	r24, 0x00B7
    1154:	90 91 b8 00 	lds	r25, 0x00B8
    1158:	a0 91 b9 00 	lds	r26, 0x00B9
    115c:	b0 91 ba 00 	lds	r27, 0x00BA
    1160:	80 70       	andi	r24, 0x00	; 0
    1162:	90 71       	andi	r25, 0x10	; 16
    1164:	a0 70       	andi	r26, 0x00	; 0
    1166:	b0 70       	andi	r27, 0x00	; 0
    1168:	00 97       	sbiw	r24, 0x00	; 0
    116a:	a1 05       	cpc	r26, r1
    116c:	b1 05       	cpc	r27, r1
    116e:	19 f0       	breq	.+6      	; 0x1176 <voidTask2+0x104>
		{
			u8Flag = Seconds;
    1170:	8c e0       	ldi	r24, 0x0C	; 12
    1172:	80 93 6a 00 	sts	0x006A, r24
		}
		if(GET_BIT(u32KeypadStoredValue, Minutes))
    1176:	80 91 b7 00 	lds	r24, 0x00B7
    117a:	90 91 b8 00 	lds	r25, 0x00B8
    117e:	a0 91 b9 00 	lds	r26, 0x00B9
    1182:	b0 91 ba 00 	lds	r27, 0x00BA
    1186:	80 70       	andi	r24, 0x00	; 0
    1188:	90 74       	andi	r25, 0x40	; 64
    118a:	a0 70       	andi	r26, 0x00	; 0
    118c:	b0 70       	andi	r27, 0x00	; 0
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	a1 05       	cpc	r26, r1
    1192:	b1 05       	cpc	r27, r1
    1194:	21 f0       	breq	.+8      	; 0x119e <voidTask2+0x12c>
		{
			u8Flag = Minutes;
    1196:	8e e0       	ldi	r24, 0x0E	; 14
    1198:	80 93 6a 00 	sts	0x006A, r24
    119c:	06 c0       	rjmp	.+12     	; 0x11aa <voidTask2+0x138>
		}
		else if (u8FlagAdjustmentMode == 1) {}
    119e:	80 91 bb 00 	lds	r24, 0x00BB
    11a2:	81 30       	cpi	r24, 0x01	; 1
    11a4:	11 f0       	breq	.+4      	; 0x11aa <voidTask2+0x138>
		else
		{
			voidDisplayHours();
    11a6:	0e 94 f6 07 	call	0xfec	; 0xfec <voidDisplayHours>
		}
	}

}
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <taskSwitch1Led>:
#include "sw.h"
#include "protocol.h"
#include "UART.h"

void taskSwitch1Led(void)
{
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	0f 92       	push	r0
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
	u8 u8ByteSW1;
	if (SW_u8GetState(0))
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	0e 94 73 06 	call	0xce6	; 0xce6 <SW_u8GetState>
    11c0:	88 23       	and	r24, r24
    11c2:	11 f0       	breq	.+4      	; 0x11c8 <taskSwitch1Led+0x18>
	{
		/* Stores the button1 ID, and place it in the higher nibble - 4 bits - , PRESSED*/
		u8ByteSW1 = (ID_B1<<4)|(0U);
    11c4:	19 82       	std	Y+1, r1	; 0x01
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <taskSwitch1Led+0x1c>

	}
	else
	{
		/* Stores the button1 ID, and place it in the higher nibble - 4 bits - , RELEASED*/
		u8ByteSW1 = (ID_B1<<4)|(1U);
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	89 83       	std	Y+1, r24	; 0x01
	}
	UART_Transmit(&u8ByteSW1, 1);
    11cc:	ce 01       	movw	r24, r28
    11ce:	01 96       	adiw	r24, 0x01	; 1
    11d0:	61 e0       	ldi	r22, 0x01	; 1
    11d2:	70 e0       	ldi	r23, 0x00	; 0
    11d4:	0e 94 25 04 	call	0x84a	; 0x84a <UART_Transmit>


}
    11d8:	0f 90       	pop	r0
    11da:	cf 91       	pop	r28
    11dc:	df 91       	pop	r29
    11de:	08 95       	ret

000011e0 <taskSwitch2Led>:
void taskSwitch2Led(void)
{
    11e0:	df 93       	push	r29
    11e2:	cf 93       	push	r28
    11e4:	0f 92       	push	r0
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
	u8 u8ByteSW2;
	if (SW_u8GetState(1))
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	0e 94 73 06 	call	0xce6	; 0xce6 <SW_u8GetState>
    11f0:	88 23       	and	r24, r24
    11f2:	19 f0       	breq	.+6      	; 0x11fa <taskSwitch2Led+0x1a>
	{
		/* Stores the button1 ID, and place it in the higher nibble - 4 bits - , RELEASED*/
		u8ByteSW2 = (ID_B2<<4)|(0U);
    11f4:	80 e1       	ldi	r24, 0x10	; 16
    11f6:	89 83       	std	Y+1, r24	; 0x01
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <taskSwitch2Led+0x1e>
	}
	else
	{
		/* Stores the button1 ID, and place it in the higher nibble - 4 bits - , RELEASED*/
		u8ByteSW2 = (ID_B2<<4)|(1U);
    11fa:	81 e1       	ldi	r24, 0x11	; 17
    11fc:	89 83       	std	Y+1, r24	; 0x01
	}
	UART_Transmit(&u8ByteSW2, 1);
    11fe:	ce 01       	movw	r24, r28
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	61 e0       	ldi	r22, 0x01	; 1
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	0e 94 25 04 	call	0x84a	; 0x84a <UART_Transmit>
}
    120a:	0f 90       	pop	r0
    120c:	cf 91       	pop	r28
    120e:	df 91       	pop	r29
    1210:	08 95       	ret

00001212 <taskReciever>:

/* Functions handles the UART Recieving the signal for the switch*/
void taskReciever(void)
{
    1212:	df 93       	push	r29
    1214:	cf 93       	push	r28
    1216:	00 d0       	rcall	.+0      	; 0x1218 <taskReciever+0x6>
    1218:	0f 92       	push	r0
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
	u8 dataRecieved;
	u16 length;

	UART_Receive(&dataRecieved,&length);
    121e:	9e 01       	movw	r18, r28
    1220:	2e 5f       	subi	r18, 0xFE	; 254
    1222:	3f 4f       	sbci	r19, 0xFF	; 255
    1224:	ce 01       	movw	r24, r28
    1226:	01 96       	adiw	r24, 0x01	; 1
    1228:	b9 01       	movw	r22, r18
    122a:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <UART_Receive>
	if(dataRecieved == 0x00) /*led1  on */
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	88 23       	and	r24, r24
    1232:	29 f4       	brne	.+10     	; 0x123e <taskReciever+0x2c>
	{
		DIO_voidSetPinValue(DIO_u8_PIN_16,DIO_u8_HIGH);
    1234:	80 e1       	ldi	r24, 0x10	; 16
    1236:	60 e0       	ldi	r22, 0x00	; 0
    1238:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
    123c:	04 c0       	rjmp	.+8      	; 0x1246 <taskReciever+0x34>
	}
	else
	{
		DIO_voidSetPinValue(DIO_u8_PIN_16,DIO_u8_LOW);
    123e:	80 e1       	ldi	r24, 0x10	; 16
    1240:	61 e0       	ldi	r22, 0x01	; 1
    1242:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	}

	if(dataRecieved == 0x10)/*led2 on*/
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	80 31       	cpi	r24, 0x10	; 16
    124a:	29 f4       	brne	.+10     	; 0x1256 <taskReciever+0x44>
	{
		DIO_voidSetPinValue(DIO_u8_PIN_23,DIO_u8_HIGH);
    124c:	87 e1       	ldi	r24, 0x17	; 23
    124e:	60 e0       	ldi	r22, 0x00	; 0
    1250:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
    1254:	04 c0       	rjmp	.+8      	; 0x125e <taskReciever+0x4c>
	}
	else
	{
		DIO_voidSetPinValue(DIO_u8_PIN_23,DIO_u8_LOW);
    1256:	87 e1       	ldi	r24, 0x17	; 23
    1258:	61 e0       	ldi	r22, 0x01	; 1
    125a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	}
}
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	cf 91       	pop	r28
    1266:	df 91       	pop	r29
    1268:	08 95       	ret

0000126a <__udivmodqi4>:
    126a:	99 1b       	sub	r25, r25
    126c:	79 e0       	ldi	r23, 0x09	; 9
    126e:	04 c0       	rjmp	.+8      	; 0x1278 <__udivmodqi4_ep>

00001270 <__udivmodqi4_loop>:
    1270:	99 1f       	adc	r25, r25
    1272:	96 17       	cp	r25, r22
    1274:	08 f0       	brcs	.+2      	; 0x1278 <__udivmodqi4_ep>
    1276:	96 1b       	sub	r25, r22

00001278 <__udivmodqi4_ep>:
    1278:	88 1f       	adc	r24, r24
    127a:	7a 95       	dec	r23
    127c:	c9 f7       	brne	.-14     	; 0x1270 <__udivmodqi4_loop>
    127e:	80 95       	com	r24
    1280:	08 95       	ret

00001282 <__udivmodsi4>:
    1282:	a1 e2       	ldi	r26, 0x21	; 33
    1284:	1a 2e       	mov	r1, r26
    1286:	aa 1b       	sub	r26, r26
    1288:	bb 1b       	sub	r27, r27
    128a:	fd 01       	movw	r30, r26
    128c:	0d c0       	rjmp	.+26     	; 0x12a8 <__udivmodsi4_ep>

0000128e <__udivmodsi4_loop>:
    128e:	aa 1f       	adc	r26, r26
    1290:	bb 1f       	adc	r27, r27
    1292:	ee 1f       	adc	r30, r30
    1294:	ff 1f       	adc	r31, r31
    1296:	a2 17       	cp	r26, r18
    1298:	b3 07       	cpc	r27, r19
    129a:	e4 07       	cpc	r30, r20
    129c:	f5 07       	cpc	r31, r21
    129e:	20 f0       	brcs	.+8      	; 0x12a8 <__udivmodsi4_ep>
    12a0:	a2 1b       	sub	r26, r18
    12a2:	b3 0b       	sbc	r27, r19
    12a4:	e4 0b       	sbc	r30, r20
    12a6:	f5 0b       	sbc	r31, r21

000012a8 <__udivmodsi4_ep>:
    12a8:	66 1f       	adc	r22, r22
    12aa:	77 1f       	adc	r23, r23
    12ac:	88 1f       	adc	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	1a 94       	dec	r1
    12b2:	69 f7       	brne	.-38     	; 0x128e <__udivmodsi4_loop>
    12b4:	60 95       	com	r22
    12b6:	70 95       	com	r23
    12b8:	80 95       	com	r24
    12ba:	90 95       	com	r25
    12bc:	9b 01       	movw	r18, r22
    12be:	ac 01       	movw	r20, r24
    12c0:	bd 01       	movw	r22, r26
    12c2:	cf 01       	movw	r24, r30
    12c4:	08 95       	ret

000012c6 <_exit>:
    12c6:	f8 94       	cli

000012c8 <__stop_program>:
    12c8:	ff cf       	rjmp	.-2      	; 0x12c8 <__stop_program>
