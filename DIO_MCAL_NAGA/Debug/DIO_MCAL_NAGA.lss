
DIO_MCAL_NAGA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ad4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00000ad4  00000b68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800080  00800080  00000b88  2**0
                  ALLOC
  3 .stab         00000900  00000000  00000000  00000b88  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000005f4  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ed       	ldi	r30, 0xD4	; 212
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 38       	cpi	r26, 0x82	; 130
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fe 04 	call	0x9fc	; 0x9fc <main>
  8a:	0c 94 68 05 	jmp	0xad0	; 0xad0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Delay_ms>:
#define callCycles 45
#define equationCycles 797
#define loopingTime 43

void Delay_ms(u32 ms)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	2c 97       	sbiw	r28, 0x0c	; 12
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
  a6:	69 87       	std	Y+9, r22	; 0x09
  a8:	7a 87       	std	Y+10, r23	; 0x0a
  aa:	8b 87       	std	Y+11, r24	; 0x0b
  ac:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i, countLoop  ;
	countLoop = ((freq_ms * ms) - (oneTimeCycles + callCycles + equationCycles)) / loopingTime;
  ae:	89 85       	ldd	r24, Y+9	; 0x09
  b0:	9a 85       	ldd	r25, Y+10	; 0x0a
  b2:	ab 85       	ldd	r26, Y+11	; 0x0b
  b4:	bc 85       	ldd	r27, Y+12	; 0x0c
  b6:	20 e4       	ldi	r18, 0x40	; 64
  b8:	3f e1       	ldi	r19, 0x1F	; 31
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	bc 01       	movw	r22, r24
  c0:	cd 01       	movw	r24, r26
  c2:	0e 94 27 05 	call	0xa4e	; 0xa4e <__mulsi3>
  c6:	dc 01       	movw	r26, r24
  c8:	cb 01       	movw	r24, r22
  ca:	8a 56       	subi	r24, 0x6A	; 106
  cc:	93 40       	sbci	r25, 0x03	; 3
  ce:	a0 40       	sbci	r26, 0x00	; 0
  d0:	b0 40       	sbci	r27, 0x00	; 0
  d2:	2b e2       	ldi	r18, 0x2B	; 43
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	40 e0       	ldi	r20, 0x00	; 0
  d8:	50 e0       	ldi	r21, 0x00	; 0
  da:	bc 01       	movw	r22, r24
  dc:	cd 01       	movw	r24, r26
  de:	0e 94 46 05 	call	0xa8c	; 0xa8c <__udivmodsi4>
  e2:	da 01       	movw	r26, r20
  e4:	c9 01       	movw	r24, r18
  e6:	89 83       	std	Y+1, r24	; 0x01
  e8:	9a 83       	std	Y+2, r25	; 0x02
  ea:	ab 83       	std	Y+3, r26	; 0x03
  ec:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<countLoop;i++)
  ee:	1d 82       	std	Y+5, r1	; 0x05
  f0:	1e 82       	std	Y+6, r1	; 0x06
  f2:	1f 82       	std	Y+7, r1	; 0x07
  f4:	18 86       	std	Y+8, r1	; 0x08
  f6:	0c c0       	rjmp	.+24     	; 0x110 <Delay_ms+0x7e>
				{
					asm("NOP");
  f8:	00 00       	nop

void Delay_ms(u32 ms)
{
	u32 i, countLoop  ;
	countLoop = ((freq_ms * ms) - (oneTimeCycles + callCycles + equationCycles)) / loopingTime;
	for(i=0;i<countLoop;i++)
  fa:	8d 81       	ldd	r24, Y+5	; 0x05
  fc:	9e 81       	ldd	r25, Y+6	; 0x06
  fe:	af 81       	ldd	r26, Y+7	; 0x07
 100:	b8 85       	ldd	r27, Y+8	; 0x08
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	a1 1d       	adc	r26, r1
 106:	b1 1d       	adc	r27, r1
 108:	8d 83       	std	Y+5, r24	; 0x05
 10a:	9e 83       	std	Y+6, r25	; 0x06
 10c:	af 83       	std	Y+7, r26	; 0x07
 10e:	b8 87       	std	Y+8, r27	; 0x08
 110:	2d 81       	ldd	r18, Y+5	; 0x05
 112:	3e 81       	ldd	r19, Y+6	; 0x06
 114:	4f 81       	ldd	r20, Y+7	; 0x07
 116:	58 85       	ldd	r21, Y+8	; 0x08
 118:	89 81       	ldd	r24, Y+1	; 0x01
 11a:	9a 81       	ldd	r25, Y+2	; 0x02
 11c:	ab 81       	ldd	r26, Y+3	; 0x03
 11e:	bc 81       	ldd	r27, Y+4	; 0x04
 120:	28 17       	cp	r18, r24
 122:	39 07       	cpc	r19, r25
 124:	4a 07       	cpc	r20, r26
 126:	5b 07       	cpc	r21, r27
 128:	38 f3       	brcs	.-50     	; 0xf8 <Delay_ms+0x66>
				{
					asm("NOP");
				}
}//delay_ms
 12a:	2c 96       	adiw	r28, 0x0c	; 12
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	f8 94       	cli
 130:	de bf       	out	0x3e, r29	; 62
 132:	0f be       	out	0x3f, r0	; 63
 134:	cd bf       	out	0x3d, r28	; 61
 136:	cf 91       	pop	r28
 138:	df 91       	pop	r29
 13a:	08 95       	ret

0000013c <Delay_us>:

void Delay_us(u32 us)
{
 13c:	df 93       	push	r29
 13e:	cf 93       	push	r28
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	2c 97       	sbiw	r28, 0x0c	; 12
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	f8 94       	cli
 14a:	de bf       	out	0x3e, r29	; 62
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	cd bf       	out	0x3d, r28	; 61
 150:	69 87       	std	Y+9, r22	; 0x09
 152:	7a 87       	std	Y+10, r23	; 0x0a
 154:	8b 87       	std	Y+11, r24	; 0x0b
 156:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i, countLoop  ;
	countLoop = ((freq_us * us) - (oneTimeCycles + callCycles + equationCycles)) / loopingTime;
 158:	89 85       	ldd	r24, Y+9	; 0x09
 15a:	9a 85       	ldd	r25, Y+10	; 0x0a
 15c:	ab 85       	ldd	r26, Y+11	; 0x0b
 15e:	bc 85       	ldd	r27, Y+12	; 0x0c
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	aa 1f       	adc	r26, r26
 166:	bb 1f       	adc	r27, r27
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	aa 1f       	adc	r26, r26
 16e:	bb 1f       	adc	r27, r27
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	aa 1f       	adc	r26, r26
 176:	bb 1f       	adc	r27, r27
 178:	8a 56       	subi	r24, 0x6A	; 106
 17a:	93 40       	sbci	r25, 0x03	; 3
 17c:	a0 40       	sbci	r26, 0x00	; 0
 17e:	b0 40       	sbci	r27, 0x00	; 0
 180:	2b e2       	ldi	r18, 0x2B	; 43
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	40 e0       	ldi	r20, 0x00	; 0
 186:	50 e0       	ldi	r21, 0x00	; 0
 188:	bc 01       	movw	r22, r24
 18a:	cd 01       	movw	r24, r26
 18c:	0e 94 46 05 	call	0xa8c	; 0xa8c <__udivmodsi4>
 190:	da 01       	movw	r26, r20
 192:	c9 01       	movw	r24, r18
 194:	89 83       	std	Y+1, r24	; 0x01
 196:	9a 83       	std	Y+2, r25	; 0x02
 198:	ab 83       	std	Y+3, r26	; 0x03
 19a:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<countLoop;i++)
 19c:	1d 82       	std	Y+5, r1	; 0x05
 19e:	1e 82       	std	Y+6, r1	; 0x06
 1a0:	1f 82       	std	Y+7, r1	; 0x07
 1a2:	18 86       	std	Y+8, r1	; 0x08
 1a4:	0c c0       	rjmp	.+24     	; 0x1be <Delay_us+0x82>
				{
					asm("NOP");
 1a6:	00 00       	nop

void Delay_us(u32 us)
{
	u32 i, countLoop  ;
	countLoop = ((freq_us * us) - (oneTimeCycles + callCycles + equationCycles)) / loopingTime;
	for(i=0;i<countLoop;i++)
 1a8:	8d 81       	ldd	r24, Y+5	; 0x05
 1aa:	9e 81       	ldd	r25, Y+6	; 0x06
 1ac:	af 81       	ldd	r26, Y+7	; 0x07
 1ae:	b8 85       	ldd	r27, Y+8	; 0x08
 1b0:	01 96       	adiw	r24, 0x01	; 1
 1b2:	a1 1d       	adc	r26, r1
 1b4:	b1 1d       	adc	r27, r1
 1b6:	8d 83       	std	Y+5, r24	; 0x05
 1b8:	9e 83       	std	Y+6, r25	; 0x06
 1ba:	af 83       	std	Y+7, r26	; 0x07
 1bc:	b8 87       	std	Y+8, r27	; 0x08
 1be:	2d 81       	ldd	r18, Y+5	; 0x05
 1c0:	3e 81       	ldd	r19, Y+6	; 0x06
 1c2:	4f 81       	ldd	r20, Y+7	; 0x07
 1c4:	58 85       	ldd	r21, Y+8	; 0x08
 1c6:	89 81       	ldd	r24, Y+1	; 0x01
 1c8:	9a 81       	ldd	r25, Y+2	; 0x02
 1ca:	ab 81       	ldd	r26, Y+3	; 0x03
 1cc:	bc 81       	ldd	r27, Y+4	; 0x04
 1ce:	28 17       	cp	r18, r24
 1d0:	39 07       	cpc	r19, r25
 1d2:	4a 07       	cpc	r20, r26
 1d4:	5b 07       	cpc	r21, r27
 1d6:	38 f3       	brcs	.-50     	; 0x1a6 <Delay_us+0x6a>
				{
					asm("NOP");
				}
}//delay_ms
 1d8:	2c 96       	adiw	r28, 0x0c	; 12
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	f8 94       	cli
 1de:	de bf       	out	0x3e, r29	; 62
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	cd bf       	out	0x3d, r28	; 61
 1e4:	cf 91       	pop	r28
 1e6:	df 91       	pop	r29
 1e8:	08 95       	ret

000001ea <DIO_voidInitialize>:

#define OUTPUT_VALUE			1

/******************** Function to initialize DIO Pins *********/
void DIO_voidInitialize()
{
 1ea:	df 93       	push	r29
 1ec:	cf 93       	push	r28
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62
 1f2:	28 97       	sbiw	r28, 0x08	; 8
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	f8 94       	cli
 1f8:	de bf       	out	0x3e, r29	; 62
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	cd bf       	out	0x3d, r28	; 61

	static u8 u8LoopCounter;
	for (u8LoopCounter = 0; u8LoopCounter < total_pins_count; u8LoopCounter++)
 1fe:	10 92 80 00 	sts	0x0080, r1
 202:	0f c2       	rjmp	.+1054   	; 0x622 <DIO_voidInitialize+0x438>
	{

		switch (DIO_MODE[u8LoopCounter])
 204:	80 91 80 00 	lds	r24, 0x0080
 208:	88 2f       	mov	r24, r24
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	fc 01       	movw	r30, r24
 20e:	e0 5a       	subi	r30, 0xA0	; 160
 210:	ff 4f       	sbci	r31, 0xFF	; 255
 212:	80 81       	ld	r24, Z
 214:	28 2f       	mov	r18, r24
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	38 87       	std	Y+8, r19	; 0x08
 21a:	2f 83       	std	Y+7, r18	; 0x07
 21c:	8f 81       	ldd	r24, Y+7	; 0x07
 21e:	98 85       	ldd	r25, Y+8	; 0x08
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	91 05       	cpc	r25, r1
 224:	09 f4       	brne	.+2      	; 0x228 <DIO_voidInitialize+0x3e>
 226:	8f c0       	rjmp	.+286    	; 0x346 <DIO_voidInitialize+0x15c>
 228:	2f 81       	ldd	r18, Y+7	; 0x07
 22a:	38 85       	ldd	r19, Y+8	; 0x08
 22c:	22 30       	cpi	r18, 0x02	; 2
 22e:	31 05       	cpc	r19, r1
 230:	31 f0       	breq	.+12     	; 0x23e <DIO_voidInitialize+0x54>
 232:	8f 81       	ldd	r24, Y+7	; 0x07
 234:	98 85       	ldd	r25, Y+8	; 0x08
 236:	00 97       	sbiw	r24, 0x00	; 0
 238:	09 f4       	brne	.+2      	; 0x23c <DIO_voidInitialize+0x52>
 23a:	0d c1       	rjmp	.+538    	; 0x456 <DIO_voidInitialize+0x26c>
 23c:	ed c1       	rjmp	.+986    	; 0x618 <DIO_voidInitialize+0x42e>
		{
		case OUTPUT:
			switch (u8LoopCounter / Number_of_Pins)  /* know which PORT */
 23e:	80 91 80 00 	lds	r24, 0x0080
 242:	86 95       	lsr	r24
 244:	86 95       	lsr	r24
 246:	86 95       	lsr	r24
 248:	28 2f       	mov	r18, r24
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	3e 83       	std	Y+6, r19	; 0x06
 24e:	2d 83       	std	Y+5, r18	; 0x05
 250:	8d 81       	ldd	r24, Y+5	; 0x05
 252:	9e 81       	ldd	r25, Y+6	; 0x06
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	91 05       	cpc	r25, r1
 258:	71 f1       	breq	.+92     	; 0x2b6 <DIO_voidInitialize+0xcc>
 25a:	2d 81       	ldd	r18, Y+5	; 0x05
 25c:	3e 81       	ldd	r19, Y+6	; 0x06
 25e:	22 30       	cpi	r18, 0x02	; 2
 260:	31 05       	cpc	r19, r1
 262:	2c f4       	brge	.+10     	; 0x26e <DIO_voidInitialize+0x84>
 264:	8d 81       	ldd	r24, Y+5	; 0x05
 266:	9e 81       	ldd	r25, Y+6	; 0x06
 268:	00 97       	sbiw	r24, 0x00	; 0
 26a:	69 f0       	breq	.+26     	; 0x286 <DIO_voidInitialize+0x9c>
 26c:	d5 c1       	rjmp	.+938    	; 0x618 <DIO_voidInitialize+0x42e>
 26e:	2d 81       	ldd	r18, Y+5	; 0x05
 270:	3e 81       	ldd	r19, Y+6	; 0x06
 272:	22 30       	cpi	r18, 0x02	; 2
 274:	31 05       	cpc	r19, r1
 276:	b9 f1       	breq	.+110    	; 0x2e6 <DIO_voidInitialize+0xfc>
 278:	8d 81       	ldd	r24, Y+5	; 0x05
 27a:	9e 81       	ldd	r25, Y+6	; 0x06
 27c:	83 30       	cpi	r24, 0x03	; 3
 27e:	91 05       	cpc	r25, r1
 280:	09 f4       	brne	.+2      	; 0x284 <DIO_voidInitialize+0x9a>
 282:	49 c0       	rjmp	.+146    	; 0x316 <DIO_voidInitialize+0x12c>
 284:	c9 c1       	rjmp	.+914    	; 0x618 <DIO_voidInitialize+0x42e>
			{
			case PORT_A_Num:
				DDRA |= (OUTPUT_VALUE <<(u8LoopCounter % Number_of_Pins)); /* know which PIN*/
 286:	aa e3       	ldi	r26, 0x3A	; 58
 288:	b0 e0       	ldi	r27, 0x00	; 0
 28a:	ea e3       	ldi	r30, 0x3A	; 58
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	48 2f       	mov	r20, r24
 292:	80 91 80 00 	lds	r24, 0x0080
 296:	88 2f       	mov	r24, r24
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	9c 01       	movw	r18, r24
 29c:	27 70       	andi	r18, 0x07	; 7
 29e:	30 70       	andi	r19, 0x00	; 0
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 2e       	mov	r0, r18
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <DIO_voidInitialize+0xc2>
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	0a 94       	dec	r0
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <DIO_voidInitialize+0xbe>
 2b0:	84 2b       	or	r24, r20
 2b2:	8c 93       	st	X, r24
 2b4:	b1 c1       	rjmp	.+866    	; 0x618 <DIO_voidInitialize+0x42e>
				//SET_BIT(DDRA,(u8LoopCounter % Num_of_Pins));
				break;
			case PORT_B_Num:
				DDRB |= (OUTPUT_VALUE <<(u8LoopCounter % Number_of_Pins));
 2b6:	a7 e3       	ldi	r26, 0x37	; 55
 2b8:	b0 e0       	ldi	r27, 0x00	; 0
 2ba:	e7 e3       	ldi	r30, 0x37	; 55
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	48 2f       	mov	r20, r24
 2c2:	80 91 80 00 	lds	r24, 0x0080
 2c6:	88 2f       	mov	r24, r24
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	9c 01       	movw	r18, r24
 2cc:	27 70       	andi	r18, 0x07	; 7
 2ce:	30 70       	andi	r19, 0x00	; 0
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	02 2e       	mov	r0, r18
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_voidInitialize+0xf2>
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	0a 94       	dec	r0
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_voidInitialize+0xee>
 2e0:	84 2b       	or	r24, r20
 2e2:	8c 93       	st	X, r24
 2e4:	99 c1       	rjmp	.+818    	; 0x618 <DIO_voidInitialize+0x42e>
				//SET_BIT(DDRB,(u8LoopCounter % Num_of_Pins));
				break;
			case PORT_C_Num:
				DDRC |= (OUTPUT_VALUE <<(u8LoopCounter % Number_of_Pins));
 2e6:	a4 e3       	ldi	r26, 0x34	; 52
 2e8:	b0 e0       	ldi	r27, 0x00	; 0
 2ea:	e4 e3       	ldi	r30, 0x34	; 52
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	48 2f       	mov	r20, r24
 2f2:	80 91 80 00 	lds	r24, 0x0080
 2f6:	88 2f       	mov	r24, r24
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	9c 01       	movw	r18, r24
 2fc:	27 70       	andi	r18, 0x07	; 7
 2fe:	30 70       	andi	r19, 0x00	; 0
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	02 2e       	mov	r0, r18
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_voidInitialize+0x122>
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	0a 94       	dec	r0
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_voidInitialize+0x11e>
 310:	84 2b       	or	r24, r20
 312:	8c 93       	st	X, r24
 314:	81 c1       	rjmp	.+770    	; 0x618 <DIO_voidInitialize+0x42e>
				//SET_BIT(DDRC,(u8LoopCounter % Num_of_Pins));
				break;
			case PORT_D_Num:
				DDRD |= (OUTPUT_VALUE <<(u8LoopCounter % Number_of_Pins));
 316:	a1 e3       	ldi	r26, 0x31	; 49
 318:	b0 e0       	ldi	r27, 0x00	; 0
 31a:	e1 e3       	ldi	r30, 0x31	; 49
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	48 2f       	mov	r20, r24
 322:	80 91 80 00 	lds	r24, 0x0080
 326:	88 2f       	mov	r24, r24
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	9c 01       	movw	r18, r24
 32c:	27 70       	andi	r18, 0x07	; 7
 32e:	30 70       	andi	r19, 0x00	; 0
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	02 2e       	mov	r0, r18
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_voidInitialize+0x152>
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	0a 94       	dec	r0
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_voidInitialize+0x14e>
 340:	84 2b       	or	r24, r20
 342:	8c 93       	st	X, r24
 344:	69 c1       	rjmp	.+722    	; 0x618 <DIO_voidInitialize+0x42e>
				//SET_BIT(DDRD,(u8LoopCounter % Num_of_Pins));
				break;
			} //switch_PIN
			break;
		case INPUT_WITHOUT_INTERNAL:
			switch (u8LoopCounter / Number_of_Pins)
 346:	80 91 80 00 	lds	r24, 0x0080
 34a:	86 95       	lsr	r24
 34c:	86 95       	lsr	r24
 34e:	86 95       	lsr	r24
 350:	28 2f       	mov	r18, r24
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	3c 83       	std	Y+4, r19	; 0x04
 356:	2b 83       	std	Y+3, r18	; 0x03
 358:	8b 81       	ldd	r24, Y+3	; 0x03
 35a:	9c 81       	ldd	r25, Y+4	; 0x04
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	91 05       	cpc	r25, r1
 360:	79 f1       	breq	.+94     	; 0x3c0 <DIO_voidInitialize+0x1d6>
 362:	2b 81       	ldd	r18, Y+3	; 0x03
 364:	3c 81       	ldd	r19, Y+4	; 0x04
 366:	22 30       	cpi	r18, 0x02	; 2
 368:	31 05       	cpc	r19, r1
 36a:	2c f4       	brge	.+10     	; 0x376 <DIO_voidInitialize+0x18c>
 36c:	8b 81       	ldd	r24, Y+3	; 0x03
 36e:	9c 81       	ldd	r25, Y+4	; 0x04
 370:	00 97       	sbiw	r24, 0x00	; 0
 372:	69 f0       	breq	.+26     	; 0x38e <DIO_voidInitialize+0x1a4>
 374:	51 c1       	rjmp	.+674    	; 0x618 <DIO_voidInitialize+0x42e>
 376:	2b 81       	ldd	r18, Y+3	; 0x03
 378:	3c 81       	ldd	r19, Y+4	; 0x04
 37a:	22 30       	cpi	r18, 0x02	; 2
 37c:	31 05       	cpc	r19, r1
 37e:	c9 f1       	breq	.+114    	; 0x3f2 <DIO_voidInitialize+0x208>
 380:	8b 81       	ldd	r24, Y+3	; 0x03
 382:	9c 81       	ldd	r25, Y+4	; 0x04
 384:	83 30       	cpi	r24, 0x03	; 3
 386:	91 05       	cpc	r25, r1
 388:	09 f4       	brne	.+2      	; 0x38c <DIO_voidInitialize+0x1a2>
 38a:	4c c0       	rjmp	.+152    	; 0x424 <DIO_voidInitialize+0x23a>
 38c:	45 c1       	rjmp	.+650    	; 0x618 <DIO_voidInitialize+0x42e>
			{
			case PORT_A_Num:
				DDRA &= ~(OUTPUT_VALUE <<(u8LoopCounter % Number_of_Pins));
 38e:	aa e3       	ldi	r26, 0x3A	; 58
 390:	b0 e0       	ldi	r27, 0x00	; 0
 392:	ea e3       	ldi	r30, 0x3A	; 58
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	80 81       	ld	r24, Z
 398:	48 2f       	mov	r20, r24
 39a:	80 91 80 00 	lds	r24, 0x0080
 39e:	88 2f       	mov	r24, r24
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	9c 01       	movw	r18, r24
 3a4:	27 70       	andi	r18, 0x07	; 7
 3a6:	30 70       	andi	r19, 0x00	; 0
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	02 2e       	mov	r0, r18
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_voidInitialize+0x1ca>
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	0a 94       	dec	r0
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_voidInitialize+0x1c6>
 3b8:	80 95       	com	r24
 3ba:	84 23       	and	r24, r20
 3bc:	8c 93       	st	X, r24
 3be:	2c c1       	rjmp	.+600    	; 0x618 <DIO_voidInitialize+0x42e>
				//CLR_BIT(DDRA,(u8LoopCounter % Num_of_Pins));
				break;
			case PORT_B_Num:
				DDRB &= ~(OUTPUT_VALUE <<(u8LoopCounter % Number_of_Pins));
 3c0:	a7 e3       	ldi	r26, 0x37	; 55
 3c2:	b0 e0       	ldi	r27, 0x00	; 0
 3c4:	e7 e3       	ldi	r30, 0x37	; 55
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	48 2f       	mov	r20, r24
 3cc:	80 91 80 00 	lds	r24, 0x0080
 3d0:	88 2f       	mov	r24, r24
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	9c 01       	movw	r18, r24
 3d6:	27 70       	andi	r18, 0x07	; 7
 3d8:	30 70       	andi	r19, 0x00	; 0
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	02 2e       	mov	r0, r18
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_voidInitialize+0x1fc>
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	0a 94       	dec	r0
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_voidInitialize+0x1f8>
 3ea:	80 95       	com	r24
 3ec:	84 23       	and	r24, r20
 3ee:	8c 93       	st	X, r24
 3f0:	13 c1       	rjmp	.+550    	; 0x618 <DIO_voidInitialize+0x42e>
				//CLR_BIT(DDRB,(u8LoopCounter % Num_of_Pins));
				break;
			case PORT_C_Num:
				DDRC &= ~(OUTPUT_VALUE <<(u8LoopCounter % Number_of_Pins));
 3f2:	a4 e3       	ldi	r26, 0x34	; 52
 3f4:	b0 e0       	ldi	r27, 0x00	; 0
 3f6:	e4 e3       	ldi	r30, 0x34	; 52
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	80 81       	ld	r24, Z
 3fc:	48 2f       	mov	r20, r24
 3fe:	80 91 80 00 	lds	r24, 0x0080
 402:	88 2f       	mov	r24, r24
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	9c 01       	movw	r18, r24
 408:	27 70       	andi	r18, 0x07	; 7
 40a:	30 70       	andi	r19, 0x00	; 0
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	02 2e       	mov	r0, r18
 412:	02 c0       	rjmp	.+4      	; 0x418 <DIO_voidInitialize+0x22e>
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	0a 94       	dec	r0
 41a:	e2 f7       	brpl	.-8      	; 0x414 <DIO_voidInitialize+0x22a>
 41c:	80 95       	com	r24
 41e:	84 23       	and	r24, r20
 420:	8c 93       	st	X, r24
 422:	fa c0       	rjmp	.+500    	; 0x618 <DIO_voidInitialize+0x42e>
				//CLR_BIT(DDRC,(u8LoopCounter % Num_of_Pins));
				break;
			case PORT_D_Num:
				DDRD &= ~(OUTPUT_VALUE <<(u8LoopCounter % Number_of_Pins));
 424:	a1 e3       	ldi	r26, 0x31	; 49
 426:	b0 e0       	ldi	r27, 0x00	; 0
 428:	e1 e3       	ldi	r30, 0x31	; 49
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	80 81       	ld	r24, Z
 42e:	48 2f       	mov	r20, r24
 430:	80 91 80 00 	lds	r24, 0x0080
 434:	88 2f       	mov	r24, r24
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	9c 01       	movw	r18, r24
 43a:	27 70       	andi	r18, 0x07	; 7
 43c:	30 70       	andi	r19, 0x00	; 0
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	02 2e       	mov	r0, r18
 444:	02 c0       	rjmp	.+4      	; 0x44a <DIO_voidInitialize+0x260>
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	0a 94       	dec	r0
 44c:	e2 f7       	brpl	.-8      	; 0x446 <DIO_voidInitialize+0x25c>
 44e:	80 95       	com	r24
 450:	84 23       	and	r24, r20
 452:	8c 93       	st	X, r24
 454:	e1 c0       	rjmp	.+450    	; 0x618 <DIO_voidInitialize+0x42e>
				//CLR_BIT(DDRD,(u8LoopCounter % Num_of_Pins));
				break;
			} //switch_PIN
			break;
		case INPUT_WITH_INTERNAL_PUR:
			switch (u8LoopCounter / Number_of_Pins)
 456:	80 91 80 00 	lds	r24, 0x0080
 45a:	86 95       	lsr	r24
 45c:	86 95       	lsr	r24
 45e:	86 95       	lsr	r24
 460:	28 2f       	mov	r18, r24
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	3a 83       	std	Y+2, r19	; 0x02
 466:	29 83       	std	Y+1, r18	; 0x01
 468:	89 81       	ldd	r24, Y+1	; 0x01
 46a:	9a 81       	ldd	r25, Y+2	; 0x02
 46c:	81 30       	cpi	r24, 0x01	; 1
 46e:	91 05       	cpc	r25, r1
 470:	09 f4       	brne	.+2      	; 0x474 <DIO_voidInitialize+0x28a>
 472:	46 c0       	rjmp	.+140    	; 0x500 <DIO_voidInitialize+0x316>
 474:	29 81       	ldd	r18, Y+1	; 0x01
 476:	3a 81       	ldd	r19, Y+2	; 0x02
 478:	22 30       	cpi	r18, 0x02	; 2
 47a:	31 05       	cpc	r19, r1
 47c:	2c f4       	brge	.+10     	; 0x488 <DIO_voidInitialize+0x29e>
 47e:	89 81       	ldd	r24, Y+1	; 0x01
 480:	9a 81       	ldd	r25, Y+2	; 0x02
 482:	00 97       	sbiw	r24, 0x00	; 0
 484:	71 f0       	breq	.+28     	; 0x4a2 <DIO_voidInitialize+0x2b8>
 486:	c8 c0       	rjmp	.+400    	; 0x618 <DIO_voidInitialize+0x42e>
 488:	29 81       	ldd	r18, Y+1	; 0x01
 48a:	3a 81       	ldd	r19, Y+2	; 0x02
 48c:	22 30       	cpi	r18, 0x02	; 2
 48e:	31 05       	cpc	r19, r1
 490:	09 f4       	brne	.+2      	; 0x494 <DIO_voidInitialize+0x2aa>
 492:	65 c0       	rjmp	.+202    	; 0x55e <DIO_voidInitialize+0x374>
 494:	89 81       	ldd	r24, Y+1	; 0x01
 496:	9a 81       	ldd	r25, Y+2	; 0x02
 498:	83 30       	cpi	r24, 0x03	; 3
 49a:	91 05       	cpc	r25, r1
 49c:	09 f4       	brne	.+2      	; 0x4a0 <DIO_voidInitialize+0x2b6>
 49e:	8e c0       	rjmp	.+284    	; 0x5bc <DIO_voidInitialize+0x3d2>
 4a0:	bb c0       	rjmp	.+374    	; 0x618 <DIO_voidInitialize+0x42e>
			{
			case PORT_A_Num:
				DDRA &= ~(OUTPUT_VALUE << (u8LoopCounter % Number_of_Pins));
 4a2:	aa e3       	ldi	r26, 0x3A	; 58
 4a4:	b0 e0       	ldi	r27, 0x00	; 0
 4a6:	ea e3       	ldi	r30, 0x3A	; 58
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	80 81       	ld	r24, Z
 4ac:	48 2f       	mov	r20, r24
 4ae:	80 91 80 00 	lds	r24, 0x0080
 4b2:	88 2f       	mov	r24, r24
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	9c 01       	movw	r18, r24
 4b8:	27 70       	andi	r18, 0x07	; 7
 4ba:	30 70       	andi	r19, 0x00	; 0
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <DIO_voidInitialize+0x2dc>
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	2a 95       	dec	r18
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <DIO_voidInitialize+0x2d8>
 4ca:	80 95       	com	r24
 4cc:	84 23       	and	r24, r20
 4ce:	8c 93       	st	X, r24
				//CLR_BIT(DDRA,(u8LoopCounter % Num_of_Pins));
				/** SET one to PIN to make it interinal pull up **/
				PORTA |= (OUTPUT_VALUE <<(u8LoopCounter % Number_of_Pins));
 4d0:	ab e3       	ldi	r26, 0x3B	; 59
 4d2:	b0 e0       	ldi	r27, 0x00	; 0
 4d4:	eb e3       	ldi	r30, 0x3B	; 59
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	80 81       	ld	r24, Z
 4da:	48 2f       	mov	r20, r24
 4dc:	80 91 80 00 	lds	r24, 0x0080
 4e0:	88 2f       	mov	r24, r24
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	9c 01       	movw	r18, r24
 4e6:	27 70       	andi	r18, 0x07	; 7
 4e8:	30 70       	andi	r19, 0x00	; 0
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	02 2e       	mov	r0, r18
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <DIO_voidInitialize+0x30c>
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	0a 94       	dec	r0
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <DIO_voidInitialize+0x308>
 4fa:	84 2b       	or	r24, r20
 4fc:	8c 93       	st	X, r24
 4fe:	8c c0       	rjmp	.+280    	; 0x618 <DIO_voidInitialize+0x42e>
				//SET_BIT(PORTA,(u8LoopCounter % Num_of_Pins));
				break;
			case PORT_B_Num:
				DDRB &= ~(OUTPUT_VALUE << (u8LoopCounter % Number_of_Pins));
 500:	a7 e3       	ldi	r26, 0x37	; 55
 502:	b0 e0       	ldi	r27, 0x00	; 0
 504:	e7 e3       	ldi	r30, 0x37	; 55
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	80 81       	ld	r24, Z
 50a:	48 2f       	mov	r20, r24
 50c:	80 91 80 00 	lds	r24, 0x0080
 510:	88 2f       	mov	r24, r24
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	9c 01       	movw	r18, r24
 516:	27 70       	andi	r18, 0x07	; 7
 518:	30 70       	andi	r19, 0x00	; 0
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	02 c0       	rjmp	.+4      	; 0x524 <DIO_voidInitialize+0x33a>
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	2a 95       	dec	r18
 526:	e2 f7       	brpl	.-8      	; 0x520 <DIO_voidInitialize+0x336>
 528:	80 95       	com	r24
 52a:	84 23       	and	r24, r20
 52c:	8c 93       	st	X, r24
				//CLR_BIT(DDRB,(u8LoopCounter % Num_of_Pins));
				/** SET one to PIN to make it interinal pull up **/
				PORTB |= (OUTPUT_VALUE <<(u8LoopCounter % Number_of_Pins));
 52e:	a8 e3       	ldi	r26, 0x38	; 56
 530:	b0 e0       	ldi	r27, 0x00	; 0
 532:	e8 e3       	ldi	r30, 0x38	; 56
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	80 81       	ld	r24, Z
 538:	48 2f       	mov	r20, r24
 53a:	80 91 80 00 	lds	r24, 0x0080
 53e:	88 2f       	mov	r24, r24
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	9c 01       	movw	r18, r24
 544:	27 70       	andi	r18, 0x07	; 7
 546:	30 70       	andi	r19, 0x00	; 0
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	02 2e       	mov	r0, r18
 54e:	02 c0       	rjmp	.+4      	; 0x554 <DIO_voidInitialize+0x36a>
 550:	88 0f       	add	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	0a 94       	dec	r0
 556:	e2 f7       	brpl	.-8      	; 0x550 <DIO_voidInitialize+0x366>
 558:	84 2b       	or	r24, r20
 55a:	8c 93       	st	X, r24
 55c:	5d c0       	rjmp	.+186    	; 0x618 <DIO_voidInitialize+0x42e>
				//SET_BIT(PORTB,(u8LoopCounter % Num_of_Pins));
				break;
			case PORT_C_Num:
				DDRC &= ~(OUTPUT_VALUE << (u8LoopCounter % Number_of_Pins));
 55e:	a4 e3       	ldi	r26, 0x34	; 52
 560:	b0 e0       	ldi	r27, 0x00	; 0
 562:	e4 e3       	ldi	r30, 0x34	; 52
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	80 81       	ld	r24, Z
 568:	48 2f       	mov	r20, r24
 56a:	80 91 80 00 	lds	r24, 0x0080
 56e:	88 2f       	mov	r24, r24
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	9c 01       	movw	r18, r24
 574:	27 70       	andi	r18, 0x07	; 7
 576:	30 70       	andi	r19, 0x00	; 0
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	02 c0       	rjmp	.+4      	; 0x582 <DIO_voidInitialize+0x398>
 57e:	88 0f       	add	r24, r24
 580:	99 1f       	adc	r25, r25
 582:	2a 95       	dec	r18
 584:	e2 f7       	brpl	.-8      	; 0x57e <DIO_voidInitialize+0x394>
 586:	80 95       	com	r24
 588:	84 23       	and	r24, r20
 58a:	8c 93       	st	X, r24
				//CLR_BIT(DDRC,(u8LoopCounter % Num_of_Pins));
				PORTC |= (OUTPUT_VALUE <<(u8LoopCounter % Number_of_Pins));
 58c:	a5 e3       	ldi	r26, 0x35	; 53
 58e:	b0 e0       	ldi	r27, 0x00	; 0
 590:	e5 e3       	ldi	r30, 0x35	; 53
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	80 81       	ld	r24, Z
 596:	48 2f       	mov	r20, r24
 598:	80 91 80 00 	lds	r24, 0x0080
 59c:	88 2f       	mov	r24, r24
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	9c 01       	movw	r18, r24
 5a2:	27 70       	andi	r18, 0x07	; 7
 5a4:	30 70       	andi	r19, 0x00	; 0
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	02 2e       	mov	r0, r18
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <DIO_voidInitialize+0x3c8>
 5ae:	88 0f       	add	r24, r24
 5b0:	99 1f       	adc	r25, r25
 5b2:	0a 94       	dec	r0
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <DIO_voidInitialize+0x3c4>
 5b6:	84 2b       	or	r24, r20
 5b8:	8c 93       	st	X, r24
 5ba:	2e c0       	rjmp	.+92     	; 0x618 <DIO_voidInitialize+0x42e>
				//SET_BIT(PORTC,(u8LoopCounter % Num_of_Pins));
				break;
			case PORT_D_Num:
				DDRD &= ~(OUTPUT_VALUE << (u8LoopCounter % Number_of_Pins));
 5bc:	a1 e3       	ldi	r26, 0x31	; 49
 5be:	b0 e0       	ldi	r27, 0x00	; 0
 5c0:	e1 e3       	ldi	r30, 0x31	; 49
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	80 81       	ld	r24, Z
 5c6:	48 2f       	mov	r20, r24
 5c8:	80 91 80 00 	lds	r24, 0x0080
 5cc:	88 2f       	mov	r24, r24
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	9c 01       	movw	r18, r24
 5d2:	27 70       	andi	r18, 0x07	; 7
 5d4:	30 70       	andi	r19, 0x00	; 0
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <DIO_voidInitialize+0x3f6>
 5dc:	88 0f       	add	r24, r24
 5de:	99 1f       	adc	r25, r25
 5e0:	2a 95       	dec	r18
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <DIO_voidInitialize+0x3f2>
 5e4:	80 95       	com	r24
 5e6:	84 23       	and	r24, r20
 5e8:	8c 93       	st	X, r24
				//CLR_BIT(DDRD,(u8LoopCounter % Num_of_Pins));
				PORTD |= (OUTPUT_VALUE <<(u8LoopCounter % Number_of_Pins));
 5ea:	a2 e3       	ldi	r26, 0x32	; 50
 5ec:	b0 e0       	ldi	r27, 0x00	; 0
 5ee:	e2 e3       	ldi	r30, 0x32	; 50
 5f0:	f0 e0       	ldi	r31, 0x00	; 0
 5f2:	80 81       	ld	r24, Z
 5f4:	48 2f       	mov	r20, r24
 5f6:	80 91 80 00 	lds	r24, 0x0080
 5fa:	88 2f       	mov	r24, r24
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	9c 01       	movw	r18, r24
 600:	27 70       	andi	r18, 0x07	; 7
 602:	30 70       	andi	r19, 0x00	; 0
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	02 2e       	mov	r0, r18
 60a:	02 c0       	rjmp	.+4      	; 0x610 <DIO_voidInitialize+0x426>
 60c:	88 0f       	add	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	0a 94       	dec	r0
 612:	e2 f7       	brpl	.-8      	; 0x60c <DIO_voidInitialize+0x422>
 614:	84 2b       	or	r24, r20
 616:	8c 93       	st	X, r24
/******************** Function to initialize DIO Pins *********/
void DIO_voidInitialize()
{

	static u8 u8LoopCounter;
	for (u8LoopCounter = 0; u8LoopCounter < total_pins_count; u8LoopCounter++)
 618:	80 91 80 00 	lds	r24, 0x0080
 61c:	8f 5f       	subi	r24, 0xFF	; 255
 61e:	80 93 80 00 	sts	0x0080, r24
 622:	80 91 80 00 	lds	r24, 0x0080
 626:	80 32       	cpi	r24, 0x20	; 32
 628:	08 f4       	brcc	.+2      	; 0x62c <DIO_voidInitialize+0x442>
 62a:	ec cd       	rjmp	.-1064   	; 0x204 <DIO_voidInitialize+0x1a>
			} //switch_PIN
			break;
		} //switch_Mode
	} //for

}
 62c:	28 96       	adiw	r28, 0x08	; 8
 62e:	0f b6       	in	r0, 0x3f	; 63
 630:	f8 94       	cli
 632:	de bf       	out	0x3e, r29	; 62
 634:	0f be       	out	0x3f, r0	; 63
 636:	cd bf       	out	0x3d, r28	; 61
 638:	cf 91       	pop	r28
 63a:	df 91       	pop	r29
 63c:	08 95       	ret

0000063e <DIO_voidWritePin>:


/******************** Function to Write on  DIO Pins *********/
void DIO_voidWritePin(DIO_PIN_NAME_T PinName,u8 value)
{
 63e:	df 93       	push	r29
 640:	cf 93       	push	r28
 642:	00 d0       	rcall	.+0      	; 0x644 <DIO_voidWritePin+0x6>
 644:	00 d0       	rcall	.+0      	; 0x646 <DIO_voidWritePin+0x8>
 646:	00 d0       	rcall	.+0      	; 0x648 <DIO_voidWritePin+0xa>
 648:	cd b7       	in	r28, 0x3d	; 61
 64a:	de b7       	in	r29, 0x3e	; 62
 64c:	89 83       	std	Y+1, r24	; 0x01
 64e:	6a 83       	std	Y+2, r22	; 0x02

	if(1 == value)
 650:	8a 81       	ldd	r24, Y+2	; 0x02
 652:	81 30       	cpi	r24, 0x01	; 1
 654:	09 f0       	breq	.+2      	; 0x658 <DIO_voidWritePin+0x1a>
 656:	7f c0       	rjmp	.+254    	; 0x756 <DIO_voidWritePin+0x118>
	{

		switch (PinName / Number_of_Pins) /* know which PORT */
 658:	89 81       	ldd	r24, Y+1	; 0x01
 65a:	86 95       	lsr	r24
 65c:	86 95       	lsr	r24
 65e:	86 95       	lsr	r24
 660:	28 2f       	mov	r18, r24
 662:	30 e0       	ldi	r19, 0x00	; 0
 664:	3e 83       	std	Y+6, r19	; 0x06
 666:	2d 83       	std	Y+5, r18	; 0x05
 668:	8d 81       	ldd	r24, Y+5	; 0x05
 66a:	9e 81       	ldd	r25, Y+6	; 0x06
 66c:	81 30       	cpi	r24, 0x01	; 1
 66e:	91 05       	cpc	r25, r1
 670:	69 f1       	breq	.+90     	; 0x6cc <DIO_voidWritePin+0x8e>
 672:	2d 81       	ldd	r18, Y+5	; 0x05
 674:	3e 81       	ldd	r19, Y+6	; 0x06
 676:	22 30       	cpi	r18, 0x02	; 2
 678:	31 05       	cpc	r19, r1
 67a:	2c f4       	brge	.+10     	; 0x686 <DIO_voidWritePin+0x48>
 67c:	8d 81       	ldd	r24, Y+5	; 0x05
 67e:	9e 81       	ldd	r25, Y+6	; 0x06
 680:	00 97       	sbiw	r24, 0x00	; 0
 682:	69 f0       	breq	.+26     	; 0x69e <DIO_voidWritePin+0x60>
 684:	ee c0       	rjmp	.+476    	; 0x862 <__stack+0x3>
 686:	2d 81       	ldd	r18, Y+5	; 0x05
 688:	3e 81       	ldd	r19, Y+6	; 0x06
 68a:	22 30       	cpi	r18, 0x02	; 2
 68c:	31 05       	cpc	r19, r1
 68e:	a9 f1       	breq	.+106    	; 0x6fa <DIO_voidWritePin+0xbc>
 690:	8d 81       	ldd	r24, Y+5	; 0x05
 692:	9e 81       	ldd	r25, Y+6	; 0x06
 694:	83 30       	cpi	r24, 0x03	; 3
 696:	91 05       	cpc	r25, r1
 698:	09 f4       	brne	.+2      	; 0x69c <DIO_voidWritePin+0x5e>
 69a:	46 c0       	rjmp	.+140    	; 0x728 <DIO_voidWritePin+0xea>
 69c:	e2 c0       	rjmp	.+452    	; 0x862 <__stack+0x3>
		{
		case PORT_A_Num:
			//PORTA |= (OUTPUT_VALUE << (PinName % Num_of_Pins));
			SET_BIT(PORTA,(PinName % Number_of_Pins));
 69e:	ab e3       	ldi	r26, 0x3B	; 59
 6a0:	b0 e0       	ldi	r27, 0x00	; 0
 6a2:	eb e3       	ldi	r30, 0x3B	; 59
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	80 81       	ld	r24, Z
 6a8:	48 2f       	mov	r20, r24
 6aa:	89 81       	ldd	r24, Y+1	; 0x01
 6ac:	88 2f       	mov	r24, r24
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	9c 01       	movw	r18, r24
 6b2:	27 70       	andi	r18, 0x07	; 7
 6b4:	30 70       	andi	r19, 0x00	; 0
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	02 2e       	mov	r0, r18
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <DIO_voidWritePin+0x84>
 6be:	88 0f       	add	r24, r24
 6c0:	99 1f       	adc	r25, r25
 6c2:	0a 94       	dec	r0
 6c4:	e2 f7       	brpl	.-8      	; 0x6be <DIO_voidWritePin+0x80>
 6c6:	84 2b       	or	r24, r20
 6c8:	8c 93       	st	X, r24
 6ca:	cb c0       	rjmp	.+406    	; 0x862 <__stack+0x3>
			break;
		case PORT_B_Num:
			//PORTB |= (OUTPUT_VALUE << (PinName % Num_of_Pins));
			SET_BIT(PORTB,(PinName % Number_of_Pins));
 6cc:	a8 e3       	ldi	r26, 0x38	; 56
 6ce:	b0 e0       	ldi	r27, 0x00	; 0
 6d0:	e8 e3       	ldi	r30, 0x38	; 56
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	80 81       	ld	r24, Z
 6d6:	48 2f       	mov	r20, r24
 6d8:	89 81       	ldd	r24, Y+1	; 0x01
 6da:	88 2f       	mov	r24, r24
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	9c 01       	movw	r18, r24
 6e0:	27 70       	andi	r18, 0x07	; 7
 6e2:	30 70       	andi	r19, 0x00	; 0
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	02 2e       	mov	r0, r18
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <DIO_voidWritePin+0xb2>
 6ec:	88 0f       	add	r24, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	0a 94       	dec	r0
 6f2:	e2 f7       	brpl	.-8      	; 0x6ec <DIO_voidWritePin+0xae>
 6f4:	84 2b       	or	r24, r20
 6f6:	8c 93       	st	X, r24
 6f8:	b4 c0       	rjmp	.+360    	; 0x862 <__stack+0x3>
			break;
		case PORT_C_Num:
			PORTC |= (OUTPUT_VALUE << (PinName % Number_of_Pins));
 6fa:	a5 e3       	ldi	r26, 0x35	; 53
 6fc:	b0 e0       	ldi	r27, 0x00	; 0
 6fe:	e5 e3       	ldi	r30, 0x35	; 53
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	80 81       	ld	r24, Z
 704:	48 2f       	mov	r20, r24
 706:	89 81       	ldd	r24, Y+1	; 0x01
 708:	88 2f       	mov	r24, r24
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	9c 01       	movw	r18, r24
 70e:	27 70       	andi	r18, 0x07	; 7
 710:	30 70       	andi	r19, 0x00	; 0
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	02 2e       	mov	r0, r18
 718:	02 c0       	rjmp	.+4      	; 0x71e <DIO_voidWritePin+0xe0>
 71a:	88 0f       	add	r24, r24
 71c:	99 1f       	adc	r25, r25
 71e:	0a 94       	dec	r0
 720:	e2 f7       	brpl	.-8      	; 0x71a <DIO_voidWritePin+0xdc>
 722:	84 2b       	or	r24, r20
 724:	8c 93       	st	X, r24
 726:	9d c0       	rjmp	.+314    	; 0x862 <__stack+0x3>
			//SET_BIT(PORTC,(PinName % Num_of_Pins));
			break;
		case PORT_D_Num:
			PORTD |= (OUTPUT_VALUE << (PinName % Number_of_Pins));
 728:	a2 e3       	ldi	r26, 0x32	; 50
 72a:	b0 e0       	ldi	r27, 0x00	; 0
 72c:	e2 e3       	ldi	r30, 0x32	; 50
 72e:	f0 e0       	ldi	r31, 0x00	; 0
 730:	80 81       	ld	r24, Z
 732:	48 2f       	mov	r20, r24
 734:	89 81       	ldd	r24, Y+1	; 0x01
 736:	88 2f       	mov	r24, r24
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	9c 01       	movw	r18, r24
 73c:	27 70       	andi	r18, 0x07	; 7
 73e:	30 70       	andi	r19, 0x00	; 0
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	02 2e       	mov	r0, r18
 746:	02 c0       	rjmp	.+4      	; 0x74c <DIO_voidWritePin+0x10e>
 748:	88 0f       	add	r24, r24
 74a:	99 1f       	adc	r25, r25
 74c:	0a 94       	dec	r0
 74e:	e2 f7       	brpl	.-8      	; 0x748 <DIO_voidWritePin+0x10a>
 750:	84 2b       	or	r24, r20
 752:	8c 93       	st	X, r24
 754:	86 c0       	rjmp	.+268    	; 0x862 <__stack+0x3>
			//SET_BIT(PORTD,(PinName % Num_of_Pins));
			break;
		} //switch_PIN
	}//if
	else if (0 == value)
 756:	8a 81       	ldd	r24, Y+2	; 0x02
 758:	88 23       	and	r24, r24
 75a:	09 f0       	breq	.+2      	; 0x75e <DIO_voidWritePin+0x120>
 75c:	82 c0       	rjmp	.+260    	; 0x862 <__stack+0x3>
	{
		switch (PinName / Number_of_Pins)
 75e:	89 81       	ldd	r24, Y+1	; 0x01
 760:	86 95       	lsr	r24
 762:	86 95       	lsr	r24
 764:	86 95       	lsr	r24
 766:	28 2f       	mov	r18, r24
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	3c 83       	std	Y+4, r19	; 0x04
 76c:	2b 83       	std	Y+3, r18	; 0x03
 76e:	8b 81       	ldd	r24, Y+3	; 0x03
 770:	9c 81       	ldd	r25, Y+4	; 0x04
 772:	81 30       	cpi	r24, 0x01	; 1
 774:	91 05       	cpc	r25, r1
 776:	71 f1       	breq	.+92     	; 0x7d4 <DIO_voidWritePin+0x196>
 778:	2b 81       	ldd	r18, Y+3	; 0x03
 77a:	3c 81       	ldd	r19, Y+4	; 0x04
 77c:	22 30       	cpi	r18, 0x02	; 2
 77e:	31 05       	cpc	r19, r1
 780:	2c f4       	brge	.+10     	; 0x78c <DIO_voidWritePin+0x14e>
 782:	8b 81       	ldd	r24, Y+3	; 0x03
 784:	9c 81       	ldd	r25, Y+4	; 0x04
 786:	00 97       	sbiw	r24, 0x00	; 0
 788:	69 f0       	breq	.+26     	; 0x7a4 <DIO_voidWritePin+0x166>
 78a:	6b c0       	rjmp	.+214    	; 0x862 <__stack+0x3>
 78c:	2b 81       	ldd	r18, Y+3	; 0x03
 78e:	3c 81       	ldd	r19, Y+4	; 0x04
 790:	22 30       	cpi	r18, 0x02	; 2
 792:	31 05       	cpc	r19, r1
 794:	b9 f1       	breq	.+110    	; 0x804 <DIO_voidWritePin+0x1c6>
 796:	8b 81       	ldd	r24, Y+3	; 0x03
 798:	9c 81       	ldd	r25, Y+4	; 0x04
 79a:	83 30       	cpi	r24, 0x03	; 3
 79c:	91 05       	cpc	r25, r1
 79e:	09 f4       	brne	.+2      	; 0x7a2 <DIO_voidWritePin+0x164>
 7a0:	49 c0       	rjmp	.+146    	; 0x834 <DIO_voidWritePin+0x1f6>
 7a2:	5f c0       	rjmp	.+190    	; 0x862 <__stack+0x3>
		{
		case PORT_A_Num:
			PORTA &= ~(OUTPUT_VALUE << (PinName % Number_of_Pins));
 7a4:	ab e3       	ldi	r26, 0x3B	; 59
 7a6:	b0 e0       	ldi	r27, 0x00	; 0
 7a8:	eb e3       	ldi	r30, 0x3B	; 59
 7aa:	f0 e0       	ldi	r31, 0x00	; 0
 7ac:	80 81       	ld	r24, Z
 7ae:	48 2f       	mov	r20, r24
 7b0:	89 81       	ldd	r24, Y+1	; 0x01
 7b2:	88 2f       	mov	r24, r24
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	9c 01       	movw	r18, r24
 7b8:	27 70       	andi	r18, 0x07	; 7
 7ba:	30 70       	andi	r19, 0x00	; 0
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	02 2e       	mov	r0, r18
 7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <DIO_voidWritePin+0x18a>
 7c4:	88 0f       	add	r24, r24
 7c6:	99 1f       	adc	r25, r25
 7c8:	0a 94       	dec	r0
 7ca:	e2 f7       	brpl	.-8      	; 0x7c4 <DIO_voidWritePin+0x186>
 7cc:	80 95       	com	r24
 7ce:	84 23       	and	r24, r20
 7d0:	8c 93       	st	X, r24
 7d2:	47 c0       	rjmp	.+142    	; 0x862 <__stack+0x3>
			//CLR_BIT(PORTA,(u8LoopCounter % Num_of_Pins));
			break;
		case PORT_B_Num:
			PORTB &= ~(OUTPUT_VALUE << (PinName % Number_of_Pins));
 7d4:	a8 e3       	ldi	r26, 0x38	; 56
 7d6:	b0 e0       	ldi	r27, 0x00	; 0
 7d8:	e8 e3       	ldi	r30, 0x38	; 56
 7da:	f0 e0       	ldi	r31, 0x00	; 0
 7dc:	80 81       	ld	r24, Z
 7de:	48 2f       	mov	r20, r24
 7e0:	89 81       	ldd	r24, Y+1	; 0x01
 7e2:	88 2f       	mov	r24, r24
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	9c 01       	movw	r18, r24
 7e8:	27 70       	andi	r18, 0x07	; 7
 7ea:	30 70       	andi	r19, 0x00	; 0
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	02 2e       	mov	r0, r18
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <DIO_voidWritePin+0x1ba>
 7f4:	88 0f       	add	r24, r24
 7f6:	99 1f       	adc	r25, r25
 7f8:	0a 94       	dec	r0
 7fa:	e2 f7       	brpl	.-8      	; 0x7f4 <DIO_voidWritePin+0x1b6>
 7fc:	80 95       	com	r24
 7fe:	84 23       	and	r24, r20
 800:	8c 93       	st	X, r24
 802:	2f c0       	rjmp	.+94     	; 0x862 <__stack+0x3>
			//CLR_BIT(PORTB,(u8LoopCounter % Num_of_Pins));
			break;
		case PORT_C_Num:
			PORTC &= ~(OUTPUT_VALUE << (PinName % Number_of_Pins));
 804:	a5 e3       	ldi	r26, 0x35	; 53
 806:	b0 e0       	ldi	r27, 0x00	; 0
 808:	e5 e3       	ldi	r30, 0x35	; 53
 80a:	f0 e0       	ldi	r31, 0x00	; 0
 80c:	80 81       	ld	r24, Z
 80e:	48 2f       	mov	r20, r24
 810:	89 81       	ldd	r24, Y+1	; 0x01
 812:	88 2f       	mov	r24, r24
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	9c 01       	movw	r18, r24
 818:	27 70       	andi	r18, 0x07	; 7
 81a:	30 70       	andi	r19, 0x00	; 0
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	02 2e       	mov	r0, r18
 822:	02 c0       	rjmp	.+4      	; 0x828 <DIO_voidWritePin+0x1ea>
 824:	88 0f       	add	r24, r24
 826:	99 1f       	adc	r25, r25
 828:	0a 94       	dec	r0
 82a:	e2 f7       	brpl	.-8      	; 0x824 <DIO_voidWritePin+0x1e6>
 82c:	80 95       	com	r24
 82e:	84 23       	and	r24, r20
 830:	8c 93       	st	X, r24
 832:	17 c0       	rjmp	.+46     	; 0x862 <__stack+0x3>
			//CLR_BIT(PORTC,(u8LoopCounter % Num_of_Pins));
			break;
		case PORT_D_Num:
			PORTD &= ~(OUTPUT_VALUE << (PinName % Number_of_Pins));
 834:	a2 e3       	ldi	r26, 0x32	; 50
 836:	b0 e0       	ldi	r27, 0x00	; 0
 838:	e2 e3       	ldi	r30, 0x32	; 50
 83a:	f0 e0       	ldi	r31, 0x00	; 0
 83c:	80 81       	ld	r24, Z
 83e:	48 2f       	mov	r20, r24
 840:	89 81       	ldd	r24, Y+1	; 0x01
 842:	88 2f       	mov	r24, r24
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	9c 01       	movw	r18, r24
 848:	27 70       	andi	r18, 0x07	; 7
 84a:	30 70       	andi	r19, 0x00	; 0
 84c:	81 e0       	ldi	r24, 0x01	; 1
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	02 2e       	mov	r0, r18
 852:	02 c0       	rjmp	.+4      	; 0x858 <DIO_voidWritePin+0x21a>
 854:	88 0f       	add	r24, r24
 856:	99 1f       	adc	r25, r25
 858:	0a 94       	dec	r0
 85a:	e2 f7       	brpl	.-8      	; 0x854 <DIO_voidWritePin+0x216>
 85c:	80 95       	com	r24
 85e:	84 23       	and	r24, r20
 860:	8c 93       	st	X, r24
			//CLR_BIT(PORTD,(u8LoopCounter % Num_of_Pins));
			break;
		} //switch_PIN
	}//else
}
 862:	26 96       	adiw	r28, 0x06	; 6
 864:	0f b6       	in	r0, 0x3f	; 63
 866:	f8 94       	cli
 868:	de bf       	out	0x3e, r29	; 62
 86a:	0f be       	out	0x3f, r0	; 63
 86c:	cd bf       	out	0x3d, r28	; 61
 86e:	cf 91       	pop	r28
 870:	df 91       	pop	r29
 872:	08 95       	ret

00000874 <DIO_u8ReadPin>:

/******************** Function to Read from  DIO Pins *********/
u8 DIO_u8ReadPin(DIO_PIN_NAME_T PinName)
{
 874:	df 93       	push	r29
 876:	cf 93       	push	r28
 878:	00 d0       	rcall	.+0      	; 0x87a <DIO_u8ReadPin+0x6>
 87a:	0f 92       	push	r0
 87c:	cd b7       	in	r28, 0x3d	; 61
 87e:	de b7       	in	r29, 0x3e	; 62
 880:	89 83       	std	Y+1, r24	; 0x01
	static u8 Pin_Value = 0;
	switch (PinName / Number_of_Pins)
 882:	89 81       	ldd	r24, Y+1	; 0x01
 884:	86 95       	lsr	r24
 886:	86 95       	lsr	r24
 888:	86 95       	lsr	r24
 88a:	28 2f       	mov	r18, r24
 88c:	30 e0       	ldi	r19, 0x00	; 0
 88e:	3b 83       	std	Y+3, r19	; 0x03
 890:	2a 83       	std	Y+2, r18	; 0x02
 892:	4a 81       	ldd	r20, Y+2	; 0x02
 894:	5b 81       	ldd	r21, Y+3	; 0x03
 896:	41 30       	cpi	r20, 0x01	; 1
 898:	51 05       	cpc	r21, r1
 89a:	09 f4       	brne	.+2      	; 0x89e <DIO_u8ReadPin+0x2a>
 89c:	3c c0       	rjmp	.+120    	; 0x916 <DIO_u8ReadPin+0xa2>
 89e:	8a 81       	ldd	r24, Y+2	; 0x02
 8a0:	9b 81       	ldd	r25, Y+3	; 0x03
 8a2:	82 30       	cpi	r24, 0x02	; 2
 8a4:	91 05       	cpc	r25, r1
 8a6:	34 f4       	brge	.+12     	; 0x8b4 <DIO_u8ReadPin+0x40>
 8a8:	2a 81       	ldd	r18, Y+2	; 0x02
 8aa:	3b 81       	ldd	r19, Y+3	; 0x03
 8ac:	21 15       	cp	r18, r1
 8ae:	31 05       	cpc	r19, r1
 8b0:	71 f0       	breq	.+28     	; 0x8ce <DIO_u8ReadPin+0x5a>
 8b2:	9c c0       	rjmp	.+312    	; 0x9ec <DIO_u8ReadPin+0x178>
 8b4:	4a 81       	ldd	r20, Y+2	; 0x02
 8b6:	5b 81       	ldd	r21, Y+3	; 0x03
 8b8:	42 30       	cpi	r20, 0x02	; 2
 8ba:	51 05       	cpc	r21, r1
 8bc:	09 f4       	brne	.+2      	; 0x8c0 <DIO_u8ReadPin+0x4c>
 8be:	4f c0       	rjmp	.+158    	; 0x95e <DIO_u8ReadPin+0xea>
 8c0:	8a 81       	ldd	r24, Y+2	; 0x02
 8c2:	9b 81       	ldd	r25, Y+3	; 0x03
 8c4:	83 30       	cpi	r24, 0x03	; 3
 8c6:	91 05       	cpc	r25, r1
 8c8:	09 f4       	brne	.+2      	; 0x8cc <DIO_u8ReadPin+0x58>
 8ca:	6d c0       	rjmp	.+218    	; 0x9a6 <DIO_u8ReadPin+0x132>
 8cc:	8f c0       	rjmp	.+286    	; 0x9ec <DIO_u8ReadPin+0x178>
	{
	case PORT_A_Num:
		Pin_Value = GET_BIT(PINA,(PinName % Number_of_Pins));
 8ce:	e9 e3       	ldi	r30, 0x39	; 57
 8d0:	f0 e0       	ldi	r31, 0x00	; 0
 8d2:	80 81       	ld	r24, Z
 8d4:	48 2f       	mov	r20, r24
 8d6:	50 e0       	ldi	r21, 0x00	; 0
 8d8:	89 81       	ldd	r24, Y+1	; 0x01
 8da:	88 2f       	mov	r24, r24
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	9c 01       	movw	r18, r24
 8e0:	27 70       	andi	r18, 0x07	; 7
 8e2:	30 70       	andi	r19, 0x00	; 0
 8e4:	81 e0       	ldi	r24, 0x01	; 1
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	02 c0       	rjmp	.+4      	; 0x8ee <DIO_u8ReadPin+0x7a>
 8ea:	88 0f       	add	r24, r24
 8ec:	99 1f       	adc	r25, r25
 8ee:	2a 95       	dec	r18
 8f0:	e2 f7       	brpl	.-8      	; 0x8ea <DIO_u8ReadPin+0x76>
 8f2:	9a 01       	movw	r18, r20
 8f4:	28 23       	and	r18, r24
 8f6:	39 23       	and	r19, r25
 8f8:	89 81       	ldd	r24, Y+1	; 0x01
 8fa:	88 2f       	mov	r24, r24
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	87 70       	andi	r24, 0x07	; 7
 900:	90 70       	andi	r25, 0x00	; 0
 902:	a9 01       	movw	r20, r18
 904:	02 c0       	rjmp	.+4      	; 0x90a <DIO_u8ReadPin+0x96>
 906:	55 95       	asr	r21
 908:	47 95       	ror	r20
 90a:	8a 95       	dec	r24
 90c:	e2 f7       	brpl	.-8      	; 0x906 <DIO_u8ReadPin+0x92>
 90e:	ca 01       	movw	r24, r20
 910:	80 93 81 00 	sts	0x0081, r24
 914:	6b c0       	rjmp	.+214    	; 0x9ec <DIO_u8ReadPin+0x178>
		break;
	case PORT_B_Num:
		Pin_Value = GET_BIT(PINB,(PinName % Number_of_Pins));
 916:	e6 e3       	ldi	r30, 0x36	; 54
 918:	f0 e0       	ldi	r31, 0x00	; 0
 91a:	80 81       	ld	r24, Z
 91c:	48 2f       	mov	r20, r24
 91e:	50 e0       	ldi	r21, 0x00	; 0
 920:	89 81       	ldd	r24, Y+1	; 0x01
 922:	88 2f       	mov	r24, r24
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	9c 01       	movw	r18, r24
 928:	27 70       	andi	r18, 0x07	; 7
 92a:	30 70       	andi	r19, 0x00	; 0
 92c:	81 e0       	ldi	r24, 0x01	; 1
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	02 c0       	rjmp	.+4      	; 0x936 <DIO_u8ReadPin+0xc2>
 932:	88 0f       	add	r24, r24
 934:	99 1f       	adc	r25, r25
 936:	2a 95       	dec	r18
 938:	e2 f7       	brpl	.-8      	; 0x932 <DIO_u8ReadPin+0xbe>
 93a:	9a 01       	movw	r18, r20
 93c:	28 23       	and	r18, r24
 93e:	39 23       	and	r19, r25
 940:	89 81       	ldd	r24, Y+1	; 0x01
 942:	88 2f       	mov	r24, r24
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	87 70       	andi	r24, 0x07	; 7
 948:	90 70       	andi	r25, 0x00	; 0
 94a:	a9 01       	movw	r20, r18
 94c:	02 c0       	rjmp	.+4      	; 0x952 <DIO_u8ReadPin+0xde>
 94e:	55 95       	asr	r21
 950:	47 95       	ror	r20
 952:	8a 95       	dec	r24
 954:	e2 f7       	brpl	.-8      	; 0x94e <DIO_u8ReadPin+0xda>
 956:	ca 01       	movw	r24, r20
 958:	80 93 81 00 	sts	0x0081, r24
 95c:	47 c0       	rjmp	.+142    	; 0x9ec <DIO_u8ReadPin+0x178>
		break;
	case PORT_C_Num:
		Pin_Value = GET_BIT(PINC,(PinName % Number_of_Pins));
 95e:	e3 e3       	ldi	r30, 0x33	; 51
 960:	f0 e0       	ldi	r31, 0x00	; 0
 962:	80 81       	ld	r24, Z
 964:	48 2f       	mov	r20, r24
 966:	50 e0       	ldi	r21, 0x00	; 0
 968:	89 81       	ldd	r24, Y+1	; 0x01
 96a:	88 2f       	mov	r24, r24
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	9c 01       	movw	r18, r24
 970:	27 70       	andi	r18, 0x07	; 7
 972:	30 70       	andi	r19, 0x00	; 0
 974:	81 e0       	ldi	r24, 0x01	; 1
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	02 c0       	rjmp	.+4      	; 0x97e <DIO_u8ReadPin+0x10a>
 97a:	88 0f       	add	r24, r24
 97c:	99 1f       	adc	r25, r25
 97e:	2a 95       	dec	r18
 980:	e2 f7       	brpl	.-8      	; 0x97a <DIO_u8ReadPin+0x106>
 982:	9a 01       	movw	r18, r20
 984:	28 23       	and	r18, r24
 986:	39 23       	and	r19, r25
 988:	89 81       	ldd	r24, Y+1	; 0x01
 98a:	88 2f       	mov	r24, r24
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	87 70       	andi	r24, 0x07	; 7
 990:	90 70       	andi	r25, 0x00	; 0
 992:	a9 01       	movw	r20, r18
 994:	02 c0       	rjmp	.+4      	; 0x99a <DIO_u8ReadPin+0x126>
 996:	55 95       	asr	r21
 998:	47 95       	ror	r20
 99a:	8a 95       	dec	r24
 99c:	e2 f7       	brpl	.-8      	; 0x996 <DIO_u8ReadPin+0x122>
 99e:	ca 01       	movw	r24, r20
 9a0:	80 93 81 00 	sts	0x0081, r24
 9a4:	23 c0       	rjmp	.+70     	; 0x9ec <DIO_u8ReadPin+0x178>
		break;
	case PORT_D_Num:
		Pin_Value = GET_BIT(PIND,(PinName % Number_of_Pins));
 9a6:	e0 e3       	ldi	r30, 0x30	; 48
 9a8:	f0 e0       	ldi	r31, 0x00	; 0
 9aa:	80 81       	ld	r24, Z
 9ac:	48 2f       	mov	r20, r24
 9ae:	50 e0       	ldi	r21, 0x00	; 0
 9b0:	89 81       	ldd	r24, Y+1	; 0x01
 9b2:	88 2f       	mov	r24, r24
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	9c 01       	movw	r18, r24
 9b8:	27 70       	andi	r18, 0x07	; 7
 9ba:	30 70       	andi	r19, 0x00	; 0
 9bc:	81 e0       	ldi	r24, 0x01	; 1
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <DIO_u8ReadPin+0x152>
 9c2:	88 0f       	add	r24, r24
 9c4:	99 1f       	adc	r25, r25
 9c6:	2a 95       	dec	r18
 9c8:	e2 f7       	brpl	.-8      	; 0x9c2 <DIO_u8ReadPin+0x14e>
 9ca:	9a 01       	movw	r18, r20
 9cc:	28 23       	and	r18, r24
 9ce:	39 23       	and	r19, r25
 9d0:	89 81       	ldd	r24, Y+1	; 0x01
 9d2:	88 2f       	mov	r24, r24
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	87 70       	andi	r24, 0x07	; 7
 9d8:	90 70       	andi	r25, 0x00	; 0
 9da:	a9 01       	movw	r20, r18
 9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <DIO_u8ReadPin+0x16e>
 9de:	55 95       	asr	r21
 9e0:	47 95       	ror	r20
 9e2:	8a 95       	dec	r24
 9e4:	e2 f7       	brpl	.-8      	; 0x9de <DIO_u8ReadPin+0x16a>
 9e6:	ca 01       	movw	r24, r20
 9e8:	80 93 81 00 	sts	0x0081, r24
		break;
	} //switch_PIN
	return Pin_Value;
 9ec:	80 91 81 00 	lds	r24, 0x0081
}
 9f0:	0f 90       	pop	r0
 9f2:	0f 90       	pop	r0
 9f4:	0f 90       	pop	r0
 9f6:	cf 91       	pop	r28
 9f8:	df 91       	pop	r29
 9fa:	08 95       	ret

000009fc <main>:
#include "DELAY.h"
#include "DIO_MCAL.h"


int main(void)
{
 9fc:	df 93       	push	r29
 9fe:	cf 93       	push	r28
 a00:	cd b7       	in	r28, 0x3d	; 61
 a02:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInitialize();
 a04:	0e 94 f5 00 	call	0x1ea	; 0x1ea <DIO_voidInitialize>
	//DDRB = 0xff;
while(1)
{
	DIO_voidWritePin(PIN_A0,1);
 a08:	80 e0       	ldi	r24, 0x00	; 0
 a0a:	61 e0       	ldi	r22, 0x01	; 1
 a0c:	0e 94 1f 03 	call	0x63e	; 0x63e <DIO_voidWritePin>
	//Delay_ms(500);
	//DIO_voidWritePin(PIN_A1,1);
	//Delay_ms(500);
	if(DIO_u8ReadPin(PIN_A1) == 1)
 a10:	81 e0       	ldi	r24, 0x01	; 1
 a12:	0e 94 3a 04 	call	0x874	; 0x874 <DIO_u8ReadPin>
 a16:	81 30       	cpi	r24, 0x01	; 1
 a18:	69 f4       	brne	.+26     	; 0xa34 <main+0x38>
	{
		DIO_voidWritePin(PIN_B0,1);
 a1a:	88 e0       	ldi	r24, 0x08	; 8
 a1c:	61 e0       	ldi	r22, 0x01	; 1
 a1e:	0e 94 1f 03 	call	0x63e	; 0x63e <DIO_voidWritePin>
		DIO_voidWritePin(PIN_C0,1);
 a22:	80 e1       	ldi	r24, 0x10	; 16
 a24:	61 e0       	ldi	r22, 0x01	; 1
 a26:	0e 94 1f 03 	call	0x63e	; 0x63e <DIO_voidWritePin>
		DIO_voidWritePin(PIN_D0,1);
 a2a:	88 e1       	ldi	r24, 0x18	; 24
 a2c:	61 e0       	ldi	r22, 0x01	; 1
 a2e:	0e 94 1f 03 	call	0x63e	; 0x63e <DIO_voidWritePin>
 a32:	ea cf       	rjmp	.-44     	; 0xa08 <main+0xc>
	}
	else
	{
		DIO_voidWritePin(PIN_B0,0);
 a34:	88 e0       	ldi	r24, 0x08	; 8
 a36:	60 e0       	ldi	r22, 0x00	; 0
 a38:	0e 94 1f 03 	call	0x63e	; 0x63e <DIO_voidWritePin>
		DIO_voidWritePin(PIN_C0,0);
 a3c:	80 e1       	ldi	r24, 0x10	; 16
 a3e:	60 e0       	ldi	r22, 0x00	; 0
 a40:	0e 94 1f 03 	call	0x63e	; 0x63e <DIO_voidWritePin>
		DIO_voidWritePin(PIN_D0,0);
 a44:	88 e1       	ldi	r24, 0x18	; 24
 a46:	60 e0       	ldi	r22, 0x00	; 0
 a48:	0e 94 1f 03 	call	0x63e	; 0x63e <DIO_voidWritePin>
 a4c:	dd cf       	rjmp	.-70     	; 0xa08 <main+0xc>

00000a4e <__mulsi3>:
 a4e:	62 9f       	mul	r22, r18
 a50:	d0 01       	movw	r26, r0
 a52:	73 9f       	mul	r23, r19
 a54:	f0 01       	movw	r30, r0
 a56:	82 9f       	mul	r24, r18
 a58:	e0 0d       	add	r30, r0
 a5a:	f1 1d       	adc	r31, r1
 a5c:	64 9f       	mul	r22, r20
 a5e:	e0 0d       	add	r30, r0
 a60:	f1 1d       	adc	r31, r1
 a62:	92 9f       	mul	r25, r18
 a64:	f0 0d       	add	r31, r0
 a66:	83 9f       	mul	r24, r19
 a68:	f0 0d       	add	r31, r0
 a6a:	74 9f       	mul	r23, r20
 a6c:	f0 0d       	add	r31, r0
 a6e:	65 9f       	mul	r22, r21
 a70:	f0 0d       	add	r31, r0
 a72:	99 27       	eor	r25, r25
 a74:	72 9f       	mul	r23, r18
 a76:	b0 0d       	add	r27, r0
 a78:	e1 1d       	adc	r30, r1
 a7a:	f9 1f       	adc	r31, r25
 a7c:	63 9f       	mul	r22, r19
 a7e:	b0 0d       	add	r27, r0
 a80:	e1 1d       	adc	r30, r1
 a82:	f9 1f       	adc	r31, r25
 a84:	bd 01       	movw	r22, r26
 a86:	cf 01       	movw	r24, r30
 a88:	11 24       	eor	r1, r1
 a8a:	08 95       	ret

00000a8c <__udivmodsi4>:
 a8c:	a1 e2       	ldi	r26, 0x21	; 33
 a8e:	1a 2e       	mov	r1, r26
 a90:	aa 1b       	sub	r26, r26
 a92:	bb 1b       	sub	r27, r27
 a94:	fd 01       	movw	r30, r26
 a96:	0d c0       	rjmp	.+26     	; 0xab2 <__udivmodsi4_ep>

00000a98 <__udivmodsi4_loop>:
 a98:	aa 1f       	adc	r26, r26
 a9a:	bb 1f       	adc	r27, r27
 a9c:	ee 1f       	adc	r30, r30
 a9e:	ff 1f       	adc	r31, r31
 aa0:	a2 17       	cp	r26, r18
 aa2:	b3 07       	cpc	r27, r19
 aa4:	e4 07       	cpc	r30, r20
 aa6:	f5 07       	cpc	r31, r21
 aa8:	20 f0       	brcs	.+8      	; 0xab2 <__udivmodsi4_ep>
 aaa:	a2 1b       	sub	r26, r18
 aac:	b3 0b       	sbc	r27, r19
 aae:	e4 0b       	sbc	r30, r20
 ab0:	f5 0b       	sbc	r31, r21

00000ab2 <__udivmodsi4_ep>:
 ab2:	66 1f       	adc	r22, r22
 ab4:	77 1f       	adc	r23, r23
 ab6:	88 1f       	adc	r24, r24
 ab8:	99 1f       	adc	r25, r25
 aba:	1a 94       	dec	r1
 abc:	69 f7       	brne	.-38     	; 0xa98 <__udivmodsi4_loop>
 abe:	60 95       	com	r22
 ac0:	70 95       	com	r23
 ac2:	80 95       	com	r24
 ac4:	90 95       	com	r25
 ac6:	9b 01       	movw	r18, r22
 ac8:	ac 01       	movw	r20, r24
 aca:	bd 01       	movw	r22, r26
 acc:	cf 01       	movw	r24, r30
 ace:	08 95       	ret

00000ad0 <_exit>:
 ad0:	f8 94       	cli

00000ad2 <__stop_program>:
 ad2:	ff cf       	rjmp	.-2      	; 0xad2 <__stop_program>
